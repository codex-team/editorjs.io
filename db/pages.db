{"_id":"2LmB77sH7adAP2Mh","title":"Basics","uri":"inline-tool-basics","body":{"time":1551278984858,"blocks":[{"type":"header","data":{"text":"Basics","level":2}},{"type":"paragraph","data":{"text":"First of all lets describe elements we will work with. Every Inline Tool must provide a button&nbsp;— HTML element with icon or some layout&nbsp;— for Inline Toolbar of the Editor. When button is pressed Inline Tool receives selected text range as JavaScript <code class=\"inline-code\">Range</code> object references to <code class=\"inline-code\">TextNode</code>&nbsp;on the page. Some Tools may also provide actions for additional interactions with the user."}},{"type":"paragraph","data":{"text":"Enough theory, lets do some practice! To start we need to define JavaScript class. To let Editor know that this Tool is inline we need to provide <code class=\"inline-code\">isInline</code> static getter:"}},{"type":"code","data":{"code":"class MarkerTool {\n    static get isInline() {\n        return true;\n    }\n}"}},{"type":"paragraph","data":{"text":"Inline Tools must provide three methods to work with Editor: <code class=\"inline-code\">render</code>, <code class=\"inline-code\">surround</code>, and <code class=\"inline-code\">checkState</code>."}},{"type":"paragraph","data":{"text":"<code class=\"inline-code\">Render</code> method must return HTML element of the button for Inline Toolbar. When user selects some text Editor calls <code class=\"inline-code\">checkState</code>&nbsp;method&nbsp;of each Inline Tool with current&nbsp;<code class=\"inline-code\">Selection</code>&nbsp;to update the state if selected text contains some of the inline markup. Finally, when button is pressed Editor calls <code class=\"inline-code\">surround</code> method of the tool with <code class=\"inline-code\">Range</code> object as an argument:"}},{"type":"code","data":{"code":"class MarkerTool {\n\n    static get isInline {\n        true;\n    }\n\n    render() {\n        \n    }\n\n    surround(range) {\n    \n    } \n\n    checkState(selection) {\n    \n    }\n\n}"}},{"type":"paragraph","data":{"text":"Lets create the basic structure of the Tool and add primitive implementation for methods."}},{"type":"code","data":{"code":"class MarkerTool {\n\n    static get isInline() {\n        return true;\n    }\n\n    constructor() {\n        this.button = null;\n        this.state = false;\n    }\n\n    render() {\n        this.button = document.createElement('button');\n        this.button.type = 'button';\n        this.button.textContent = 'M';\n\n        return this.button;\n    }\n\n    surround(range) {\n        if (this.state) {\n            // If highlights is already applied, do nothing for now\n            return;\n        }\n\n        const selectedText = range.extractContents();\n\n        // Create MARK element\n        const mark = document.createElement('MARK');\n\n        // Append to the MARK element selected TextNode\n        mark.appendChild(selectedText);\n\n        // Insert new element\n        range.insertNode(mark);\n    }\n\n   \n    checkState(selection) {\n        const text = selection.anchorNode;\n\n        if (!text) {\n            return;\n        }\n\n        const anchorElement = text instanceof Element ? text : text.parentElement;\n      \n        this.state = !!anchorElement.closest('MARK');\n    }\n}"}},{"type":"paragraph","data":{"text":"For now if highlight is applied you can't redo it. How to deal with that you can read at <a href=\"https://editorjs.io/inline-tools-api\">Using API</a>&nbsp;article."}}],"version":"2.8.1"},"parent":"XIfTsWsoUFNLXgEV"}
{"_id":"3z3srZrB62OEke8v","title":"Provide custom configuration","uri":"provide-custom-configuration","body":{"time":1591341536294,"blocks":[{"type":"header","data":{"text":"Provide custom configuration","level":2}},{"type":"paragraph","data":{"text":"Let's suppose we want to allow a user of our Simple Image Tool to pass his own placeholder for the URL field. There is a <code class=\"inline-code\">config</code> property of the Editor Configuration <code class=\"inline-code\">tools.&lt;toolName&gt;</code>&nbsp;object for that purpose."}},{"type":"paragraph","data":{"text":"Open example.html and add a config property with any fields you want. In our example, there is a <code class=\"inline-code\">placeholder</code> field."}},{"type":"code","data":{"code":"<!-- html code -->\n\n<script>\nconst editor = new EditorJS({\n  autofocus: true,\n  tools: {\n    image: {\n      class: SimpleImage,\n      inlineToolbar: true,\n+     config: {\n+       placeholder: 'Paste image URL'\n+     }\n    }\n  },\n  // ... data field \n});\n\n    // ... save button handler\n</script>"}},{"type":"paragraph","data":{"text":"This object will be passed to the class's constructor as <code class=\"inline-code\">config</code> property. You can save it somewhere and access it from another method, for example, <code class=\"inline-code\">render</code>."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... static get toolbox\n  // ... static get pasteConfig\n  // ... static get sanitize\n\n-  constructor({data, api}){\n+  constructor({data, api, config}){\n    this.api = api;\n+   this.config = config || {};\n    // ... this.data\n    // ... this.wrapper\n    // ... this.settings\n  }\n\n  render(){\n    this.wrapper = document.createElement('div');\n    this.wrapper.classList.add('simple-image');\n\n    if (this.data && this.data.url){\n      this._createImage(this.data.url, this.data.caption);\n      return this.wrapper;\n    }\n\n    const input = document.createElement('input');\n\n-   input.placeholder = 'Paste an image URL...';\n+   input.placeholder = this.config.placeholder || 'Paste an image URL...';\n    input.addEventListener('paste', (event) => {\n      this._createImage(event.clipboardData.getData('text'));\n    });\n\n    this.wrapper.appendChild(input);\n\n    return this.wrapper;\n  }\n\n  // ... _createImage\n  // ... save\n  // ... validate\n  // ... renderSettings\n  // ... _toggleTune\n  // ... _acceptTuneView\n  // ... onPaste\n}"}},{"type":"paragraph","data":{"text":"Try to add new Block and check the placeholder of URL input — it should have passed text.&nbsp;"}},{"type":"warning","data":{"title":"","message":"Don't forget to describe properties supported by your configuration at the README.md of you Tool. &nbsp;"}},{"type":"header","data":{"text":"Use i18n API for all UI texts","level":3}},{"type":"paragraph","data":{"text":"Even if you will support overriding of some of your tool's UI texts via config, it's better to <mark class=\"cdx-marker\">wrap all the string with the <a href=\"/i18n-api#t-dictkey-string\"><code class=\"inline-code\">t()</code></a> method</mark> of the I18nAPI. It will allow users to localize all text via one dictionary.&nbsp;"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... \n  constructor({data, api, config}){\n    this.api = api;\n    this.config = config || {};\n    //...\n  }\n\n  render(){\n    //...\n\n-   input.placeholder = this.config.placeholder || 'Paste an image URL...';\n+   input.placeholder = this.api.i18n.t(this.config.placeholder || 'Paste an image URL...');\n\n    // ...\n  }\n\n  //...\n}"}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"Our tool is done. You can view <a href=\"https://github.com/editor-js/simple-image-tutorial\">the final result</a> of created tool or <a href=\"https://github.com/editor-js/simple-image\">more complicated version</a> of Simple Image Tool."}},{"type":"header","data":{"text":"Where to go from here","level":2}},{"type":"paragraph","data":{"text":"After passing the Creating Block Tool guide series, you are able to create your own Block Tool. Try experimenting with more complex UI and functionality."}},{"type":"paragraph","data":{"text":"All supported methods for Block Tools are described at the <a href=\"/tools-api\">Tools API</a> section.&nbsp;More information about Editor.js Core API you can find <a href=\"/api\">here</a>."}},{"type":"paragraph","data":{"text":"<mark class=\"cdx-marker\">Editor.js also allows you to create your own Inline Tools</mark> — plugins for the Inline Formatting Toolbar, such as a Marker, Inline Code, etc. Follow the «<a href=\"/creating-an-inline-tool\">Creating an Inline Tool</a>» guide series to hit this target.&nbsp;"}},{"type":"paragraph","data":{"text":"If you want to contribute cool Tools you made, please read <a href=\"/contributing#share-tools-you-made\">these instructions</a>."}},{"type":"paragraph","data":{"text":"<br><br>"}}],"version":"2.16.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"6MPNWARTul2OBKFe","title":"Paste substitutions","uri":"paste-substitutions","body":{"time":1596217762359,"blocks":[{"type":"header","data":{"text":"Paste substitutions","level":2}},{"type":"paragraph","data":{"text":"Sometimes you need to handle pasted content with your plugin. For example, pasted headers should be handled by Header Tool and pasted images — by Image Tool."}},{"type":"paragraph","data":{"text":"Tools API allows you to substitute pasted HTML tags, Files and string patterns. To make it work you need just two things: static getter <a href=\"/tools-api#pasteconfig\"><code class=\"inline-code\">pasteConfig</code></a> and <a href=\"/tools-api#onpaste\"><code class=\"inline-code\">onPaste</code></a>&nbsp;method."}},{"type":"header","data":{"text":"Paste configuration","level":3}},{"type":"paragraph","data":{"text":"Static getter <code class=\"inline-code\">pasteConfig </code>should return an object with paste substitutions configuration:"}},{"type":"list","data":{"style":"ordered","items":["<code class=\"inline-code\">tags</code>&nbsp;— array of tags to substitute","<code class=\"inline-code\">files</code>&nbsp;— object with <code class=\"inline-code\">mimeTypes</code> and <code class=\"inline-code\">extensions</code> arrays","<code class=\"inline-code\">patterns</code>&nbsp;— object where key is your pattern name and <code class=\"inline-code\">RegExp</code> pattern as value"]}},{"type":"paragraph","data":{"text":"For <i>SimpleImage</i>&nbsp;we need to substitute <code class=\"inline-code\">img</code> tags, handle files with <code class=\"inline-code\">image/*</code> MIME-type and handle URLs to images. "}},{"type":"header","data":{"text":"Paste handling","level":3}},{"type":"paragraph","data":{"text":"For each of substitutions (tags, files, and patterns) you need just one method&nbsp;— <code class=\"inline-code\">onPaste</code>. It accepts <code class=\"inline-code\">CustomEvent</code> object as an argument which can have three <i>types</i>: <code class=\"inline-code\">tag</code>, <code class=\"inline-code\">file</code>, and <code class=\"inline-code\">pattern</code>. Each event provides info about pasted content in <code class=\"inline-code\">detail</code>&nbsp;property."}},{"type":"list","data":{"style":"unordered","items":["<code class=\"inline-code\">Tag</code> event contains pasted HTML element in <code class=\"inline-code\">detail.data</code> property.","<code class=\"inline-code\">File</code> event contains pasted file object in <code class=\"inline-code\">detail.file</code> property.<br>","<code class=\"inline-code\">Pattern</code> event contains pasted string in <code class=\"inline-code\">detail.data</code> property and pattern name in <code class=\"inline-code\">detail.key</code>.<br>"]}},{"type":"paragraph","data":{"text":"Lets add them step-by-step."}},{"type":"header","data":{"text":"Handle pasted tags","level":2}},{"type":"paragraph","data":{"text":"To create our Image Blocks from pasted <code class=\"inline-code\">img</code> tags we need to specify <code class=\"inline-code\">tags</code>&nbsp;key of <code class=\"inline-code\">pasteConfig</code> and implement a handler for&nbsp;<code class=\"inline-code\">tag</code> event type at <code class=\"inline-code\">onPaste</code>:"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox static getter\n\n  static get pasteConfig() {\n    return {\n      tags: ['IMG']\n    }\n  }\n\n  // ... constructor\n  // ... render\n  // ... _createImage\n  // ... save\n  // ... validate\n  // ... renderSettings\n  // ... _toggleTune\n  // ... _acceptTuneView\n\n  onPaste(event){\n    switch (event.type){\n      case 'tag':\n        const imgTag = event.detail.data;\n\n        this._createImage(imgTag.src);\n        break;\n    }\n  }\n}"}},{"type":"paragraph","data":{"text":"Thats it. Now you can open any external article, copy a text with images and paste to the Editor. You should see Image Blocks created from pasted content."}},{"type":"header","data":{"text":"Handle pasted files","level":2}},{"type":"paragraph","data":{"text":"To create Blocks from pasted (by CTRL+V or by drag-n-drop) files, add the <code class=\"inline-code\">files</code> key to the <code class=\"inline-code\">pasteConfig</code> and handle a <code class=\"inline-code\">file</code> event type with <code class=\"inline-code\">onPaste</code>:"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox static getter\n\n  static get pasteConfig() {\n    return {\n      // ... tags\n      files: {\n        mimeTypes: ['image/*'],\n        extensions: ['gif', 'jpg', 'png'] // You can specify extensions instead of mime-types\n      }\n    }\n  }\n\n  // ... constructor\n  // ... render\n  // ... _createImage\n  // ... save\n  // ... validate\n  // ... renderSettings\n  // ... _toggleTune\n  // ... _acceptTuneView\n\n  onPaste(event){\n    switch (event.type){\n      // ... case 'tag'\n      case 'file':\n        /* We need to read file here as base64 string */\n        const file = event.detail.file;\n        const reader = new FileReader();\n\n        reader.onload = (loadEvent) => {\n          this._createImage(loadEvent.target.result);\n        };\n\n        reader.readAsDataURL(file);\n        break;\n    }\n  }\n}"}},{"type":"paragraph","data":{"text":"For now you can try to drag-n-drop or CTRL+V (CMD+V) image files into the Editor. Our Image Blocks should be created."}},{"type":"header","data":{"text":"Create Blocks from pasted link","level":2}},{"type":"paragraph","data":{"text":"Let's add ability to create Image Blocks by pasting an image URL to the empty paragraph. "}},{"type":"paragraph","data":{"text":"For doing this, we should add a <code class=\"inline-code\">patterns</code> key to the <code class=\"inline-code\">pasteConfig</code> and implement a handler for <code class=\"inline-code\">pattern</code> event type at <code class=\"inline-code\">onPaste</code>"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox static getter\n\n  static get pasteConfig() {\n    return {\n      // ... tags\n      // ... files\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png)$/i\n      }\n    }\n  }\n\n  // ... constructor\n  // ... render\n  // ... _createImage\n  // ... save\n  // ... validate\n  // ... renderSettings\n  // ... _toggleTune\n  // ... _acceptTuneView\n\n  onPaste(event){\n    switch (event.type){\n      // ... case 'tag'\n      // ... case 'file'\n      case 'pattern':\n        const src = event.detail.data;\n\n        this._createImage(src);\n        break;\n    }\n  }\n}"}},{"type":"paragraph","data":{"text":"Now try to copy image URL from somewhere and paste it to the empty paragraph — an Image Block should be rendered."}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"In <a href=\"/sanitize-saved-data\">next chapter</a> we will learn how to sanitise output data from unsupported HTML entities."}}],"version":"2.16.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"7R0VVZoDIk8WzgsA","title":"Home","uri":"home-1","body":{"time":1551466433971,"blocks":[{"type":"header","data":{"text":"Home","level":2}}],"version":"2.8.1"},"parent":"eiJBcLTfiCadhzXW"}
{"_id":"9E9ZzaR2Mvy5riX7","title":"Saving data","uri":"saving-data","body":{"time":1644307811592,"blocks":[{"type":"header","data":{"text":"Saving data","level":2}},{"type":"paragraph","data":{"text":"To get all entry's data from Editor.js, call the <code class=\"inline-code\">save()</code> method on the class instance. It will return a Promise that resolves with clean data."}},{"type":"code","data":{"code":"const editor = new EditorJS();\n\neditor.save().then((outputData) => {\n  console.log('Article data: ', outputData)\n}).catch((error) => {\n  console.log('Saving failed: ', error)\n});"}},{"type":"paragraph","data":{"text":"After this, you can send this data to the backend for processing and saving."}},{"type":"header","data":{"text":"Output data format","level":2}},{"type":"paragraph","data":{"text":"Object returned by the <a href=\"/saver\">save()</a> method conforms the following scheme:"}},{"type":"code","data":{"code":"{\n    \"time\" : 1550476186479,\n    \"blocks\" : [],\n    \"version\" : \"2.8.1\"\n}"}},{"type":"table","data":{"content":[["<code class=\"inline-code\">time</code>","<i>number</i>","Saving timestamp"],["<code class=\"inline-code\">blocks</code>","<i>{type: string, data: object}[]</i>","List of Blocks data"],["<code class=\"inline-code\">version</code>","<i>string</i>","Version of Editor.js"]]}},{"type":"paragraph","data":{"text":"A <code class=\"inline-code\">blocks</code> property contains an array of objects with <code class=\"inline-code\">id</code>,&nbsp;<code class=\"inline-code\">type</code> and <code class=\"inline-code\">data</code>&nbsp;of Editor Blocks. <mark class=\"cdx-marker\">The values of this fields are depend on the Tools you use</mark>.&nbsp;"}},{"type":"paragraph","data":{"text":"For example, here is a data of page that uses <a href=\"https://github.com/editor-js/header\">Header</a>, <a href=\"https://github.com/editor-js/paragraph\">Paragraph</a> and <a href=\"https://github.com/editor-js/list\">List</a> Tools."}},{"type":"code","data":{"code":"{\n   \"time\": 1550476186479,\n   \"blocks\": [\n      {\n         \"id\": \"oUq2g_tl8y\",\n         \"type\": \"header\",\n         \"data\": {\n            \"text\": \"Editor.js\",\n            \"level\": 2\n         }\n      },\n      {\n         \"id\": \"zbGZFPM-iI\",\n         \"type\": \"paragraph\",\n         \"data\": {\n            \"text\": \"Hey. Meet the new Editor. On this page you can see it in action — try to edit this text. Source code of the page contains the example of connection and configuration.\"\n         }\n      },\n      {\n         \"id\": \"qYIGsjS5rt\",\n         \"type\": \"header\",\n         \"data\": {\n            \"text\": \"Key features\",\n            \"level\": 3\n         }\n      },\n      {\n         \"id\": \"XV87kJS_H1\",\n         \"type\": \"list\",\n         \"data\": {\n            \"style\": \"unordered\",\n            \"items\": [\n               \"It is a block-styled editor\",\n               \"It returns clean data output in JSON\",\n               \"Designed to be extendable and pluggable with a simple API\"\n            ]\n         }\n      },\n      {\n         \"id\": \"AOulAjL8XM\",\n         \"type\": \"header\",\n         \"data\": {\n            \"text\": \"What does it mean «block-styled editor»\",\n            \"level\": 3\n         }\n      },\n      {\n         \"id\": \"cyZjplMOZ0\",\n         \"type\": \"paragraph\",\n         \"data\": {\n            \"text\": \"Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js <mark class=\\\"cdx-marker\\\">workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc</mark>. Each of them is an independent contenteditable element (or more complex structure) provided by Plugin and united by Editor's Core.\"\n         }\n      }\n   ],\n   \"version\": \"2.8.1\"\n}"}},{"type":"header","data":{"text":"Configure Block type","level":2}},{"type":"paragraph","data":{"text":"Note that <code class=\"inline-code\">type</code> field in Block data is the key of object of Editor config's <code class=\"inline-code\">tools</code> property. In other words, it can be changed by you own."}},{"type":"paragraph","data":{"text":"For example, if we change key «header» with «heading», in output data blocks will be marked as <code class=\"inline-code\">type: \"heading\"</code>"}},{"type":"code","data":{"code":"const editor = new EditorJs({ \n  tools: { \n-   header: Header, \n+   heading: Header, \n    list: List \n  }, \n})"}},{"type":"code","data":{"code":"{\n   \"time\": 1550476186479,\n   \"blocks\": [\n      {\n         \"type\": \"heading\",\n         \"data\": {\n            \"text\": \"Editor.js\",\n            \"level\": 2\n         }\n      },\n      {\n         \"type\": \"paragraph\",\n         \"data\": {\n            \"text\": \"Hey. Meet the new Editor. On this page you can see it in action — try to edit this text. Source code of the page contains the example of connection and configuration.\"\n         }\n      },\n      {\n         \"type\": \"heading\",\n         \"data\": {\n            \"text\": \"Key features\",\n            \"level\": 3\n         }\n      }\n   ],\n   \"version\": \"2.8.1\"\n}"}}],"version":"2.19.0"},"parent":"tNfI7Y8IaRlvvCcF"}
{"_id":"9d95HWDsA5ulDc59","title":"Enable Inline Toolbar","uri":"enable-inline-toolbar","body":{"time":1581959577988,"blocks":[{"type":"header","data":{"text":"Enable Inline Toolbar","level":2}},{"type":"paragraph","data":{"text":"In this short chapter we will learn how to enable Inline Formatting Toolbar for Caption field of our Tool."}},{"type":"header","data":{"text":"Make contenteditable instead of inputs","level":3}},{"type":"paragraph","data":{"text":"At first, we need to replace an <code class=\"inline-code\">input</code> with content editable <code class=\"inline-code\">div</code> to allow user modify a caption markup:"}},{"type":"code","data":{"code":"_createImage(url, captionText){\n  const image = document.createElement('img');\n  const caption = document.createElement('div');\n\n  image.src = url;\n  caption.contentEditable = true;\n  caption.innerHTML = captionText || '';\n\n  this.wrapper.innerHTML = '';\n  this.wrapper.appendChild(image);\n  this.wrapper.appendChild(caption);\n}\n"}},{"type":"paragraph","data":{"text":"And at the save method:"}},{"type":"code","data":{"code":"save(blockContent){\n  const image = blockContent.querySelector('img');\n  const caption = blockContent.querySelector('[contenteditable]');\n\n  return {\n    url: image.src,\n    caption: caption.innerHTML || ''\n  }\n}"}},{"type":"paragraph","data":{"text":"And support it in CSS too:"}},{"type":"code","data":{"code":".simple-image input,\n.simple-image [contenteditable] {\n  // styles\n}\n\n"}},{"type":"header","data":{"text":"Enable Inline Toolbar","level":3}},{"type":"paragraph","data":{"text":"To activate or not to activate the Inline Formatting Toolbar — is the decision of your Tools' user. So this options configured outside the source of Tool's code.&nbsp;"}},{"type":"paragraph","data":{"text":"Open <i>example.html</i> and find a <code class=\"inline-code\">tools</code>&nbsp;property where our Tool is connected. Here is a place to make some configuration. To enable Inline Toolbar, set <code class=\"inline-code\">inlineToolbar</code> option as <code class=\"inline-code\">true</code>."}},{"type":"code","data":{"code":"<!-- HTML code of example -->\n<script>\nconst editor = new EditorJS({\n  autofocus: true,\n  tools: {\n    image: {\n      class: SimpleImage,\n      inlineToolbar: true\n    }\n  },\n  // ... data\n});\n\n// ... saving button handler\n</script>"}},{"type":"paragraph","data":{"text":"After that, try to select some fragment of a caption field — you will see an Inline Toolbar with all available Inline Tools."}},{"type":"image","data":{"file":{"url":"/uploads/5165961241cae25386f789be6ad7efbd.png","size":383090,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Configure Tools at Inline Toolbar","level":2}},{"type":"paragraph","data":{"text":"Let's suppose you want only Link Tool at the Inline Toolbar. That can be set by the same option:"}},{"type":"code","data":{"code":"<!-- HTML code of example -->\n<script>\nconst editor = new EditorJS({\n  autofocus: true,\n  tools: {\n    image: {\n      class: SimpleImage,\n      inlineToolbar: ['link']\n    }\n  },\n  // ... data\n});\n\n// ... saving button handler\n</script>"}},{"type":"warning","data":{"title":"Note.","message":"Names of Tools in&nbsp;<code class=\"inline-code\">inlineToolbar</code> is the keys of Inline Tools plugins that used in <code class=\"inline-code\">tools</code> property of initial config. There are three built-in Inline Tools: <code class=\"inline-code\">link</code>, <code class=\"inline-code\">bold</code>, <code class=\"inline-code\">italic</code>."}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"In next part we will learn&nbsp;<a href=\"/making-a-block-settings\">how to create a Block Settings</a>&nbsp;panel to manipulate our Image's view options:"}},{"type":"image","data":{"file":{"url":"/uploads/15b2c83ff4c1d2d668b827ac204f543b.png","size":140037,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"&nbsp;Select an Image"}}],"version":"2.16.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"9plkfNzoYlZWzpTf","title":"Caret","uri":"caret","body":{"time":1560362487970,"blocks":[{"type":"header","data":{"text":"Caret","level":2}},{"type":"paragraph","data":{"text":"Module provides with methods to work with Caret built-in class"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/caret#settofirstblock\">setToFirstBlock</a> — sets caret to the first Block"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/caret#settolastblock\">setToLastBlock</a> — sets caret to the last Block"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/caret#settopreviousblock\">setToPreviousBlock</a> — sets caret to the previous Block"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/caret#settonextblock\">setToNextBlock</a> — sets caret to the next Block"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/caret#settoblock\">setToBlock</a> — sets caret to the Block"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/caret#focus\">focus</a> — focus Editor"}},{"type":"paragraph","data":{"text":"By default, caret will be set at the start with zero offset. You can choose position passing&nbsp;<code class=\"inline-code\">start</code>&nbsp;or&nbsp;<code class=\"inline-code\">end</code>&nbsp;and pass offset parameter"}},{"type":"header","data":{"text":"setToFirstBlock","level":2}},{"type":"paragraph","data":{"text":"Method sets caret to the first Block (with index = 0)"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">String</code>","Caret position at the Block (can be only <code class=\"inline-code\">start</code> or <code class=\"inline-code\">end</code>"],["<code class=\"inline-code\">Number</code>","Caret offset at the node"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["Boolean","Returns <code class=\"inline-code\">true</code> if caret was set"]]}},{"type":"code","data":{"code":"setToFirstBlock(position: string = this.Editor.Caret.positions.DEFAULT, offset: number = 0): boolean"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  setAtTheEnd() {\n    this.api.caret.setToFirstBlock('end', 0);\n  }\n  // ... other methods\n}"}},{"type":"header","data":{"text":"setToLastBlock","level":2}},{"type":"paragraph","data":{"text":"Method sets caret to the last Block (with index = length - 1)"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">String</code>","Caret position at the Block (can be only&nbsp;<code class=\"inline-code\">start</code>&nbsp;or&nbsp;<code class=\"inline-code\">end</code>"],["<code class=\"inline-code\">Number</code>","Caret offset at the node"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Boolean</code>","Returns&nbsp;<code class=\"inline-code\">true</code>&nbsp;if caret was set"]]}},{"type":"code","data":{"code":"setToLastBlock(position: string = this.Editor.Caret.positions.DEFAULT, offset: number = 0): boolean"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  setAtTheStart() {\n    this.api.caret.setToLastBlock('start', 0);\n  }\n  // ... other methods\n}"}},{"type":"header","data":{"text":"setToPreviousBlock","level":2}},{"type":"paragraph","data":{"text":"Method sets caret to the previous Block"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">String</code>","Caret position at the Block (can be only&nbsp;<code class=\"inline-code\">start</code>&nbsp;or&nbsp;<code class=\"inline-code\">end</code>"],["<code class=\"inline-code\">Number</code>","Caret offset at the node"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Boolean</code>","Returns <code class=\"inline-code\">true</code> if caret was set"]]}},{"type":"code","data":{"code":"setToPreviousBlock(position: string = this.Editor.Caret.positions.DEFAULT, offset: number = 0): boolean"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  setToPreviousBlock() {\n    this.api.caret.setToPreviousBlock('start', 0);\n  }\n  // ... other methods\n}"}},{"type":"header","data":{"text":"setToNextBlock","level":2}},{"type":"paragraph","data":{"text":"Method sets caret to the next Block"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">String</code>","Caret position at the Block (can be only&nbsp;<code class=\"inline-code\">start</code>&nbsp;or&nbsp;<code class=\"inline-code\">end</code>"],["<code class=\"inline-code\">Number</code>","Caret offset at the node"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Boolean</code>","Returns <code class=\"inline-code\">true</code> if caret was set"]]}},{"type":"code","data":{"code":"setToNextBlock(position: string = this.Editor.Caret.positions.DEFAULT, offset: number = 0): boolean"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  setToNextBlock() {\n    this.api.caret.setToNextBlock('start', 0);\n  }\n  // ... other methods\n}"}},{"type":"header","data":{"text":"setToBlock","level":2}},{"type":"paragraph","data":{"text":"Method sets caret to the Block with passed index"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Number</code>","index of Block"],["<code class=\"inline-code\">String</code>","Caret position at the Block (can be only&nbsp;<code class=\"inline-code\">start</code>&nbsp;or&nbsp;<code class=\"inline-code\">end</code>"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Boolean</code>","Returns <code class=\"inline-code\">true</code> if caret was set"]]}},{"type":"code","data":{"code":"setToBlock(index: number, position: string = this.Editor.Caret.positions.DEFAULT, offset: number = 0): boolean"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  setToBlock() {\n    this.api.caret.setToBlock('start', 0); // set caret at the start of first Block\n  }\n  // ... other methods\n}"}},{"type":"header","data":{"text":"focus","level":2}},{"type":"paragraph","data":{"text":"Method set caret always to the first Block by default"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Boolean</code>","set caret at the end or not. By default it is false"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"paragraph","data":{"text":"Method does not return anything"}},{"type":"code","data":{"code":"focus(atEnd: boolean = false)"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  focusEditor() {\n    this.api.caret.focus(true);\n  }\n  // ... other methods\n}"}},{"type":"warning","data":{"title":"Note.","message":"Method has a <a href=\"https://editorjs.io/api#shorthands\">shorthand</a>"}}],"version":"2.12.4"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"EhK1uteRlpbvGPOw","title":"I18n API","uri":"i18n-api","body":{"time":1623355735699,"blocks":[{"type":"header","data":{"text":"I18n API","level":2}},{"type":"paragraph","data":{"text":"This API provides methods for the <a href=\"https://editorjs.io/internationalization\">Internalization</a> that can be used in plugins."}},{"type":"header","data":{"text":"Available methods","level":2}},{"type":"table","data":{"content":[["<a href=\"#t-dictkey-string\"><code class=\"inline-code\">t</code></a>","Performs translation of the passed string depended on the i18n dictionary"]]}},{"type":"header","data":{"text":"t(dictKey: string)","level":2}},{"type":"paragraph","data":{"text":"Performs translation with automatically added namespace like&nbsp;<code class=\"inline-code\">tools.${toolName}&nbsp;</code>&nbsp;or&nbsp;<code class=\"inline-code\">blockTunes.${tuneName}</code>"}},{"type":"code","data":{"code":"t(dictKey: string): string;"}},{"type":"header","data":{"text":"Parameters","level":3}},{"type":"table","data":{"content":[["<code class=\"inline-code\">string</code>","String to translate. Actually, the key from the i18n dictionary under the corresponding section."]]}},{"type":"header","data":{"text":"Return value","level":3}},{"type":"table","data":{"content":[["<code class=\"inline-code\">string</code>","Translated string. The value from the i18n dictionary."]]}},{"type":"header","data":{"text":"Example for Block and Inline Tools","level":3}},{"type":"code","data":{"code":"/**\n * Using in a plugin\n */\nclass SimpleImage {\n  constructor({data, api}){\n    this.api = api;\n  }\n\n  render(){\n    const button = document.createElement('button');\n\n    button.textContent = this.api.i18n.t('Upload an image');\n\n    return button;\n  }\n}\n\n/**\n * Editor.js initialization\n * Example of passing i18n dictionary\n */\nnew Editorjs({\n  // ...\n  tools: {\n    image: SimpleImage,\n  },\n  i18n: {\n    messages: {\n      tools: {\n        image: {\n          'Upload an image': 'Загрузить изображение',\n        }\n      }\n    }\n  },\n})"}},{"type":"header","data":{"text":"Example for Block Tunes","level":3}},{"type":"code","data":{"code":"class SpoilerTune {\n  constructor({ api }) {\n    this.api = api;\n  }\n\n  render() {\n    const button = document.createElement('button');\n\n    button.textContent = this.api.i18n.t('Hide content');\n\n    return button; \n  }\n}\n\n/**\n * Editor.js initialization\n * Example of passing i18n dictionary\n */\nnew Editorjs({\n  // ...\n  tools: {\n    spoiler: SpoilerTune,\n  },\n  tunes: ['spoiler']\n  i18n: {\n    messages: {\n      blockTunes: {\n        spoiler: {\n          'Hide content': 'Содержание скрыто',\n        }\n      }\n    }\n  },\n})"}}],"version":"2.19.0"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"HLQx4oOwJXDmk6At","title":"Block Tunes API","uri":"block-tunes-api","body":{"time":1722093115615,"blocks":[{"id":"iIk4VI-8Kk","type":"header","data":{"text":"Block Tunes API","level":2}},{"id":"IbX1imEe6F","type":"paragraph","data":{"text":"Similar with&nbsp;<a href=\"/tools-api\">Tools</a>&nbsp;represented Blocks, you can create Block Tunes and connect it to particular Tool or for all the Tools."}},{"id":"FwMYpfg-Ve","type":"paragraph","data":{"text":"Block Tunes allows you to set any additional options to Blocks. For example, with corresponded Block Tunes you can mark Block as «spoiler», give it an anchor, set a background, and so on."}},{"id":"k4eUyFEBgl","type":"delimiter","data":{}},{"id":"UgsJXJvaKO","type":"paragraph","data":{"text":"In this article will be explained all available options for Block Tunes creation."}},{"id":"nsPIvtwz7u","type":"warning","data":{"title":"Note","message":"Each Block Tune must have at least&nbsp;<code class=\"inline-code\">isTune</code>&nbsp;static getter and the&nbsp;<code class=\"inline-code\">render()</code>&nbsp;method."}},{"id":"cWOxP22Njw","type":"header","data":{"text":"Constructor","level":2}},{"id":"DgInl9cWdj","type":"paragraph","data":{"text":"Block Tune constructor accepts object with following properties:"}},{"id":"G0uE4VH4TJ","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">api</code>","Editor's API object"],["<code class=\"inline-code\">data</code>","Tune's saved data"],["<code class=\"inline-code\">config</code>","User-provided configuration"],["<code class=\"inline-code\">block</code>","Block API object of Block tune is related to"]]}},{"id":"2uefevdU75","type":"header","data":{"text":"Public methods","level":2}},{"id":"16WEPBp2q4","type":"table","data":{"withHeadings":false,"content":[["<a href=\"#render\"><code class=\"inline-code\">render</code></a>","<b><i>Required</i></b>","Use this method to define how your tune will be rendered inside Block Tunes menu."],["<a href=\"#save\"><code class=\"inline-code\">save</code></a>","<i>Optional</i>","Method for saving Tune's state. Will be called on Editor's save"],["<a href=\"#wrap\"><code class=\"inline-code\">wrap</code></a>","<i>Optional</i>","Method for wrapping Block's content element. Called on Block rendering. You can save created wrapped and toggle its styles later."]]}},{"id":"pYAk7BzD4o","type":"header","data":{"text":"Static methods and properties","level":2}},{"id":"LGd6YHFfgQ","type":"table","data":{"withHeadings":false,"content":[["<a href=\"#static-get-istune\"><code class=\"inline-code\">get isTune</code></a>","<b><i>Required</i></b>","Specifies Tool as Block Tune"],["<a href=\"#prepare\"><code class=\"inline-code\">prepare</code></a>","<i>Optional</i>","Method to make any preparations required for Tune"],["<a href=\"#reset\"><code class=\"inline-code\">reset</code></a>","<i>Optional</i>","Opposite to <code class=\"inline-code\">prepare</code>. Fired on Editor destroy to clear any Tune state"]]}},{"id":"APgBgKAttY","type":"header","data":{"text":"render()","level":2}},{"id":"HivdlXNjiQ","type":"paragraph","data":{"text":"Method allows to define tune’s appearance inside Block Tunes menu. Can either return <a href=\"https://editorjs.io/menu-config\">MenuConfig</a> or single HTML element with a button."}},{"id":"ehqfytLbT6","type":"header","data":{"text":"Parameters","level":3}},{"id":"6w2oQQJZs9","type":"paragraph","data":{"text":"This method has no arguments."}},{"id":"-Tx7ikQeZ1","type":"header","data":{"text":"Return value","level":3}},{"id":"vrMHJZuK0g","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/menu-config\"><code class=\"inline-code\">MenuConfig</code></a>","Configuration of the tune's appearance inside Block Tunes menu"],["<code class=\"inline-code\">Button</code>","<b>Advanced.</b> HTML Element with button for Block settings area"]]}},{"id":"LOXrFISPcF","type":"header","data":{"text":"Example #1: MenuConfig return value","level":3}},{"id":"ijfaoMqq9a","type":"code","data":{"code":"class MyBlockTune {\n  constructor({ api }) {\n    this.api = api;\n  }\n\n  render() {\n    return {\n      icon: '<svg>...</svg>',\n      label: 'H',\n      onActivate: () => {\n        // do smth\n      }\n    };\n  }\n}"}},{"id":"n-vKc3ZVAv","type":"header","data":{"text":"Example #2: Button return value","level":3}},{"id":"q9upbd2AJQ","type":"code","data":{"code":"class MyBlockTune {\n  constructor({ api }) {\n    this.api = api;\n  }\n\n  render() {\n    const button = document.createElement('button');\n\n    button.classList.add(this.api.styles.button);\n    button.textContent = 'H';\n\n    return button; \n  }\n}"}},{"id":"8YfwNWXSpJ","type":"header","data":{"text":"save()","level":2}},{"id":"zgaSr3c5-b","type":"paragraph","data":{"text":"If your Tune has some state to save, this method can return it"}},{"id":"UUidxaz2bJ","type":"header","data":{"text":"Parameters","level":3}},{"id":"pm8qmsqvFg","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"eWr34EOoo2","type":"header","data":{"text":"Return value","level":3}},{"id":"pdMxv0sUT-","type":"paragraph","data":{"text":"<code class=\"inline-code\">any</code>"}},{"id":"mlAuejtPbS","type":"header","data":{"text":"Example","level":3}},{"id":"d42kiTbDvq","type":"code","data":{"code":"class MyBlockTune {\n\n  ...\n\n  save() {\n    return {\n      prop: 'value'\n    };\n  }\n}"}},{"id":"MlvCDQYIck","type":"header","data":{"text":"wrap()","level":2}},{"id":"ErdpksSsxO","type":"paragraph","data":{"text":"This method is called on Block render and allows you to wrap Block's content to modify it's styles"}},{"id":"j-OlazjE-7","type":"header","data":{"text":"Parameters","level":3}},{"id":"8VGsUkIKH6","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">blockContent</code>","HTML Element with Block's content"]]}},{"id":"HVJ6mG7vCQ","type":"header","data":{"text":"Return value","level":3}},{"id":"Fdnv-6D-Px","type":"paragraph","data":{"text":"<code class=\"inline-code\">HTMLElement</code>"}},{"id":"ooC87thl7o","type":"header","data":{"text":"Example","level":2}},{"id":"JXa1hbc7zu","type":"code","data":{"code":"class MyBlockTune {\n\n  ...\n\n  wrap(blockContent) {\n    const myWrapper = document.createElement('div');\n\n    myWrapper.append(blockContent);\n\n    myWrapper.style.fontSize = '0.9em';\n\n    return myWrapper;\n  }\n}"}},{"id":"W0BD1aOY6k","type":"header","data":{"text":"static get isTune()","level":2}},{"id":"FrDGyqhmRs","type":"paragraph","data":{"text":"To mark Tool as Block Tune this static getter should return&nbsp;<code class=\"inline-code\">true</code>."}},{"id":"wD4DpjN83e","type":"header","data":{"text":"Return value","level":3}},{"id":"DsZ8StG1BG","type":"paragraph","data":{"text":"<code class=\"inline-code\">true</code>"}},{"id":"oVK0n_hV40","type":"header","data":{"text":"Example","level":3}},{"id":"ZVCNIjOxEl","type":"code","data":{"code":"class MyBlockTune {\n  static get isTune() {\n    return true;\n  }\n}"}},{"id":"i6-lIqMqkd","type":"header","data":{"text":"static prepare()","level":2}},{"id":"NmkpfM7G79","type":"paragraph","data":{"text":"Method to prepare Tune resources, for example load external scripts or styles"}},{"id":"Z9w0uHVPAk","type":"header","data":{"text":"Parameters","level":3}},{"id":"tp3ieJM7G6","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">config</code>","User-provided configuration"]]}},{"id":"VTVf1zcmHf","type":"header","data":{"text":"Return value","level":3}},{"id":"KV0cHmXW1Y","type":"paragraph","data":{"text":"<code class=\"inline-code\">void</code> or <code class=\"inline-code\">Promise&lt;void&gt;</code>"}},{"id":"JsYgRjKseZ","type":"header","data":{"text":"static reset()","level":2}},{"id":"MVO2ThfFDS","type":"paragraph","data":{"text":"Method to clean everything after Editor's destroy"}},{"id":"Kfn1aTSBcZ","type":"header","data":{"text":"Parameters","level":3}},{"id":"Lfoe4Kbz66","type":"paragraph","data":{"text":"Method has no parameters"}},{"id":"UCgOcX_Qbp","type":"header","data":{"text":"Return value","level":3}},{"id":"ktHyG93-Bu","type":"paragraph","data":{"text":"<code class=\"inline-code\">void</code> or <code class=\"inline-code\">Promise&lt;void&gt;</code>"}}],"version":"2.25.0"},"parent":"0"}
{"_id":"IJEVlpyGmg9niZKA","title":"Destroyer","uri":"destroyer","body":{"time":1554045381357,"blocks":[{"type":"header","data":{"text":"Destroyer","level":2}},{"type":"paragraph","data":{"text":"You can destroy Editor.js instance by calling a <code class=\"inline-code\">destroy</code> method."}},{"type":"code","data":{"code":"/**\n* Create an instance\n*/\nconst editor = new EditorJS();\n\n/**\n* Destroy editor.\n*/\neditor.destroy();"}},{"type":"paragraph","data":{"text":"All editor UI will be removed, all listeners binded with <a href=\"https://editorjs.io/listeners\"><code class=\"inline-code\">Listeners API</code></a> will be cleared and other Editor.js staff will be&nbsp;deallocated."}}],"version":"2.12.3"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"IkwwEracFcDRlxAN","title":"Internationalization","uri":"i18n","body":{"time":1757958690657,"blocks":[{"id":"8mIBpZnZAd","type":"header","data":{"text":"Internationalization","level":2}},{"id":"6M3bk_A-Sc","type":"paragraph","data":{"text":"Since version 2.18 Editor.js provides an API for Internationalization that allows localizing all UI texts of editor's core and plugins."}},{"id":"2XlPacDYB0","type":"paragraph","data":{"text":"To enable your own localization you should pass a <a href=\"https://github.com/codex-team/editor.js/blob/release/2.18/types/configs/i18n-dictionary.d.ts\"><code class=\"inline-code\">messages</code></a> dictionary with the&nbsp;<code class=\"inline-code\">i18n</code> option of <a href=\"/configuration\">Editor Config</a>. This dictionary should contain four sections:"}},{"id":"vl2jL9on-U","type":"paragraph","data":{"text":"- <code class=\"inline-code\">ui</code> — translations of internal UI texts"}},{"id":"RAt5-ZVYHt","type":"paragraph","data":{"text":"- <code class=\"inline-code\">toolNames</code> — translations of names for tools you use."}},{"id":"GcJjXdaxTh","type":"paragraph","data":{"text":"- <code class=\"inline-code\">tools</code> — translations of UI texts for tools you use."}},{"id":"7Yqq4rkeXm","type":"paragraph","data":{"text":"- <code class=\"inline-code\">blockTunes</code> — translations of Block Tunes you use."}},{"id":"7KBo4oH4kO","type":"paragraph","data":{"text":"At the <code class=\"inline-code\">ui</code> section there are translations for the internal editor.js UI elements. You can create or find/download a dictionary for your language."}},{"id":"g3DDAPLYKt","type":"paragraph","data":{"text":"As long as tools list is a user-specific thing (we do not know which tools you use and under which names), so we can't provide a ready-to-use tool names dictionary. There is a <code class=\"inline-code\">toolNames</code> section for that reason. Put translations for the names of your tools there."}},{"id":"kNkrOw-L0O","type":"paragraph","data":{"text":"Also, the UI of the tools you use is also invisible to editor.js core.&nbsp;To pass translations for specific tools (which supports I18n API), there are <code class=\"inline-code\">tools</code> and <code class=\"inline-code\">blockTunes</code> section. Pass dictionaries for specific plugins through them."}},{"id":"960XQ3vzYb","type":"header","data":{"text":"Example","level":3}},{"id":"KVzVa_uo9Z","type":"code","data":{"code":"const editor = new EditorJS({\n  /**\n   * Tools list\n   */\n  tools: {\n    header: Header,\n    image: SimpleImage,\n    list: EditorjsList,\n    quote: Quote,\n    warning: Warning,\n    marker: Marker,\n    code: CodeTool,\n    delimiter: Delimiter,\n    inlineCode: InlineCode,\n    linkTool: LinkTool,\n    embed: Embed,\n    table: Table\n  },\n\n  /**\n   * Internationalzation config\n   */\n  i18n: {\n    /**\n     * @type {I18nDictionary}\n     */\n    messages: {\n      /**\n       * Other below: translation of different UI components of the editor.js core\n       */\n      ui: {\n          \"blockTunes\": {\n            \"toggler\": {\n              \"Click to tune\": \"Нажмите, чтобы настроить\",\n              \"or drag to move\": \"или перетащите\"\n            },\n          },\n          \"inlineToolbar\": {\n            \"converter\": {\n              \"Convert to\": \"Конвертировать в\"\n            }\n          },\n          \"toolbar\": {\n            \"toolbox\": {\n              \"Add\": \"Добавить\",\n            }\n          },\n          \"popover\": {\n            \"Filter\": \"Поиск\",\n            \"Nothing found\": \"Ничего не найдено\",\n            /**\n             * Translation of \"Convert To\"  at the Block Tunes Popover\n             */\n            \"Convert to\": \"Конвертировать в\",\n          }\n      },\n  \n      /**\n       * Section for translation Tool Names: both block and inline tools\n       */\n      toolNames: {\n        \"Text\": \"Параграф\",\n        \"Heading\": \"Заголовок\",\n        \"Ordered List\": \"Нумерованный список\",\n        \"Unordered List\": \"Маркированный список\",\n        \"Warning\": \"Примечание\",\n        \"Checklist\": \"Чеклист\",\n        \"Quote\": \"Цитата\",\n        \"Code\": \"Код\",\n        \"Delimiter\": \"Разделитель\",\n        \"Raw HTML\": \"HTML-фрагмент\",\n        \"Table\": \"Таблица\",\n        \"Link\": \"Ссылка\",\n        \"Marker\": \"Маркер\",\n        \"Bold\": \"Полужирный\",\n        \"Italic\": \"Курсив\",\n        \"InlineCode\": \"Моноширинный\",\n        \"Image\": \"Картинка\",\n      },\n  \n      /**\n       * Section for passing translations to the external tools classes\n       */\n      tools: {\n          /**\n           * Each subsection is the i18n dictionary that will be passed to the corresponded plugin\n           * The name of a plugin should be equal the name you specify in the 'tool' section for that plugin\n           */\n          \"warning\": { // <-- 'Warning' tool will accept this dictionary section\n            \"Title\": \"Название\",\n            \"Message\": \"Сообщение\",\n          },\n\n          /**\n           * Link is the internal Inline Tool\n           */\n          \"link\": {\n            \"Add a link\": \"Вставьте ссылку\"\n          },\n          /**\n           * The \"stub\" is an internal block tool, used to fit blocks that does not have the corresponded plugin\n           */\n          \"stub\": {\n            'The block can not be displayed correctly.': 'Блок не может быть отображен'\n          },\n          \"image\": {\n            \"Caption\": \"Подпись\",\n            \"Select an Image\": \"Выберите файл\",\n            \"With border\": \"Добавить рамку\",\n            \"Stretch image\": \"Растянуть\",\n            \"With background\": \"Добавить подложку\",\n          },\n          \"code\": {\n            \"Enter a code\": \"Код\",\n          },\n          \"linkTool\": {\n            \"Link\": \"Ссылка\",\n            \"Couldn't fetch the link data\": \"Не удалось получить данные\",\n            \"Couldn't get this link data, try the other one\": \"Не удалось получить данные по ссылке, попробуйте другую\",\n            \"Wrong response format from the server\": \"Неполадки на сервере\",\n          },\n          \"header\": {\n            \"Heading 1\": \"Заголовок 1\",\n            \"Heading 2\": \"Заголовок 2\",\n            \"Heading 3\": \"Заголовок 3\",\n            \"Heading 4\": \"Заголовок 4\",\n            \"Heading 5\": \"Заголовок 5\",\n            \"Heading 6\": \"Заголовок 6\",\n          },\n          \"paragraph\": {\n            \"Enter something\": \"Введите текст\"\n          },\n          \"list\": {\n            \"Ordered\": \"Нумерованный\",\n            \"Unordered\": \"Маркированный\",\n            \"Checklist\": \"Чеклист\",\n          },\n          /**\n           * Translation of \"Convert To\"  at the Inline Toolbar hint\n           */\n          \"convertTo\": {\n            \"Convert to\": \"Конвертировать в\"\n          },\n      },\n  \n      /**\n       * Section allows to translate Block Tunes\n       */\n      blockTunes: {\n        /**\n         * Each subsection is the i18n dictionary that will be passed to the corresponded Block Tune plugin\n         * The name of a plugin should be equal the name you specify in the 'tunes' section for that plugin\n         *\n         * Also, there are few internal block tunes: \"delete\", \"moveUp\" and \"moveDown\"\n         */\n        \"delete\": {\n          \"Delete\": \"Удалить\",\n          \"Click to delete\": \"Подтвердить удаление\"\n        },\n        \"moveUp\": {\n          \"Move up\": \"Переместить вверх\"\n        },\n        \"moveDown\": {\n          \"Move down\": \"Переместить вниз\"\n        }\n      },\n    }\n  },\n});"}},{"id":"4ig_8Ade8V","type":"paragraph","data":{"text":"See <a href=\"https://github.com/codex-team/editor.js/blob/next/example/example-i18n.html\">example-i18n.html</a> for full working example."}},{"id":"zC5MkO5_9r","type":"header","data":{"text":"RTL support","level":2}},{"id":"uiJ8aeOSMQ","type":"paragraph","data":{"text":"Editor.js also provides a support of right-to-left mode. It could be enabled by passing the <code class=\"inline-code\">direction</code> rule to the <code class=\"inline-code\">i18n</code> config."}},{"id":"faQOTsyz3Q","type":"code","data":{"code":"const editor = new EditorJS({\n  i18n: {\n    /**\n     * Text direction\n     */\n     direction: 'rtl',\n  },\n});"}},{"id":"BfmH-ZBqP9","type":"paragraph","data":{"text":"In this mode all Texts will be directed with RTL and all the UI elements orders will be mirrored as well as arrow navigation rules.&nbsp;"}},{"id":"lr3-shfX85","type":"image","data":{"file":{"url":"/uploads/e58f94570bc6529f1e94e9ca3698bf78.png","size":96469,"mime":"image/png"},"caption":"","withBorder":true,"stretched":false,"withBackground":false}}],"version":"2.25.0"},"parent":"tNfI7Y8IaRlvvCcF"}
{"_id":"KA1zEoSV2bOeZc90","title":"Fill Block with saved data","uri":"fill-block-with-saved-data","body":{"time":1591339968530,"blocks":[{"type":"header","data":{"text":"Fill Block with saved data","level":2}},{"type":"paragraph","data":{"text":"In the&nbsp;<a href=\"/the-first-plugin\">previous guide</a>, we have learned how to create a basic Tool class with minimal required&nbsp;methods.&nbsp;In this part, we consider how to render previously saved data."}},{"type":"header","data":{"text":"Accepting saved data","level":2}},{"type":"paragraph","data":{"text":"When user will edit previously saved article, Editor will get saved data by the&nbsp;<code class=\"inline-code\">data</code>&nbsp;<a href=\"/configuration#passing-saved-data\">property</a>. Then the Editor will render Blocks one-by-one and pass them their data."}},{"type":"paragraph","data":{"text":"Let's add a saved data we got in the&nbsp;<a href=\"/the-first-plugin#testing-a-save-method\">previous part</a> to initialization at the example.html:"}},{"type":"code","data":{"code":"<script>\n    const editor = new EditorJS({\n      autofocus: true,\n      tools: {\n        image: SimpleImage\n      },\n      data: {\n        time: 1552744582955,\n        blocks: [\n          {\n            type: \"image\",\n            data: {\n              url: \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n            }\n          }\n        ],\n        version: \"2.11.10\"\n      }\n    });\n\n    // ... save-buttons stuff\n</script>"}},{"type":"paragraph","data":{"text":"We should provide a mechanism for showing saved data by our Tool. It is quite simple: <mark class=\"cdx-marker\">data will be passed to the class's constructor</mark>, so we can save it at the property, for example <code class=\"inline-code\">this.data</code> and access later by any method, including <code class=\"inline-code\">render</code>:"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox static getter\n\n  constructor({data}){\n    this.data = data;\n  }\n\n  render(){\n    const input = document.createElement('input');\n    input.value = this.data && this.data.url ? this.data.url : '';\n    return input;\n  }\n\n  // ... save method\n}"}},{"type":"paragraph","data":{"text":"If you open the&nbsp;<i>example.html</i>, you will see our Image Block after Editor initialization. The saved URL will be set at the input of the Block."}},{"type":"paragraph","data":{"text":"Before we go further, let's improve our UI: add a wrapper and some CSS styles."}},{"type":"header","data":{"text":"Improving a render","level":2}},{"type":"paragraph","data":{"text":"We will create a wrapper where all Tool's elements will be placed, add a placeholder and CSS class for Tool. Don't forget to modify the&nbsp;<code class=\"inline-code\">save</code> method: <i>Block content</i> will be a <code class=\"inline-code\">wrapper</code> instead of <code class=\"inline-code\">input</code>, so we need to get an <code class=\"inline-code\">input</code> by ourselves. Now our class looks like this."}},{"type":"code","data":{"code":"class SimpleImage {\n  static get toolbox() {\n    return {\n      title: 'Image',\n      icon: '<svg width=\"17\" height=\"15\" viewBox=\"0 0 336 276\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M291 150V79c0-19-15-34-34-34H79c-19 0-34 15-34 34v42l67-44 81 72 56-29 42 30zm0 52l-43-30-56 30-81-67-66 39v23c0 19 15 34 34 34h178c17 0 31-13 34-29zM79 0h178c44 0 79 35 79 79v118c0 44-35 79-79 79H79c-44 0-79-35-79-79V79C0 35 35 0 79 0z\"/></svg>'\n    };\n  }\n\n  constructor({data}){\n    this.data = data;\n  }\n\n  render(){\n    const wrapper = document.createElement('div');\n    const input = document.createElement('input');\n\n    wrapper.classList.add('simple-image');\n    wrapper.appendChild(input);\n\n    input.placeholder = 'Paste an image URL...';\n    input.value = this.data && this.data.url ? this.data.url : '';\n\n    return wrapper;\n  }\n\n  save(blockContent){\n    const input = blockContent.querySelector('input');\n\n    return {\n      url: input.value\n    }\n  }\n}"}},{"type":"warning","data":{"title":"Note.","message":"We've just hardcoded the placeholder text. It's better to wrap it with the&nbsp;<code class=\"inline-code\">t()</code>&nbsp;of the&nbsp;<a href=\"https://editorjs.io/i18n-api\">I18nAPI</a> method to allow users of your tool to localize the UI."}},{"type":"paragraph","data":{"text":"In the <code class=\"inline-code\">simple-image.css</code> we can add some styles:"}},{"type":"code","data":{"code":".simple-image {\n    padding: 20px 0;\n}\n\n.simple-image input {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #e4e4e4;\n    border-radius: 3px;\n    outline: none;\n    font-size: 14px;\n}"}},{"type":"paragraph","data":{"text":"And the final result from this point is the Editor that shows filled Block."}},{"type":"image","data":{"file":{"url":"/uploads/9d8eddb69466969ee7a8d25d5055c034.png","size":85441,"mime":"image/png"},"caption":"Saved data is visible in input. In empty block we can see a placeholder.","withBorder":false,"stretched":false,"withBackground":false}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"In the next chapter, we will learn <a href=\"/saved-data-validation\">how to validate Block data</a> on saving. That will allow Editor to skip empty Blocks in output JSON."}}],"version":"2.16.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"PFT76UpXwvW5jvIx","title":"Access Editor's API","uri":"access-api","body":{"time":1553961643925,"blocks":[{"type":"header","data":{"text":"Access Editor's API","level":2}},{"type":"paragraph","data":{"text":"In the <a href=\"/making-a-block-settings\">previous chapter</a> we have stopped on «Stretch Block» tune. It should increase a Block's Content to the full Editor width. Especially for this case, Editor.js provide a simple API method <a href=\"/blocks#stretchblock\"><code class=\"inline-code\">block.stretchBlock</code></a>."}},{"type":"paragraph","data":{"text":"In this guide we will learn how to work with the <a href=\"/api\">API</a>."}},{"type":"header","data":{"text":"Calling an API","level":2}},{"type":"paragraph","data":{"text":"Editor passes an API object to the Tools constructor via <code class=\"inline-code\">api</code> parameter. We can store it somewhere, for example in <code class=\"inline-code\">this.api</code> property that can be visible from any method."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  // ... other methods\n}"}},{"type":"header","data":{"text":"Using a <code class=\"inline-code\">blocks.stretchBlock</code> method","level":2}},{"type":"paragraph","data":{"text":"To make Block stretched we can call a mentioned <a href=\"/blocks#stretchblock\"><code class=\"inline-code\">stretchBlock</code></a> method. This method accepts a Block <code class=\"inline-code\">index</code> and a <code class=\"inline-code\">status</code>. We can get index of our Block with <a href=\"/blocks#getcurrentblockindex\"><code class=\"inline-code\">getCurrentBlockIndex</code></a> method."}},{"type":"paragraph","data":{"text":"Let's modify our <code class=\"inline-code\">_acceptTuneView</code> with calling an API."}},{"type":"code","data":{"code":"/**\n * Add specified class corresponds with activated tunes\n * @private\n */\n_acceptTuneView() {\n  this.settings.forEach( tune => {\n    this.wrapper.classList.toggle(tune.name, !!this.data[tune.name]);\n\n    if (tune.name === 'stretched') {\n      this.api.blocks.stretchBlock(this.api.blocks.getCurrentBlockIndex(), !!this.data.stretched);\n    }\n  });\n}"}},{"type":"paragraph","data":{"text":"Try to toggle «Stretch Block» tune now, it should works as wanted."}},{"type":"image","data":{"file":{"url":"/uploads/e1e6082b03a2f01e4590fc9947ec633a.mp4","size":998388,"mime":"video/mp4"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Using a Styles API","level":2}},{"type":"paragraph","data":{"text":"Remember CSS classes that we use in renderSettings method?&nbsp;"}},{"type":"code","data":{"code":"renderSettings(){\n  const wrapper = document.createElement('div');\n\n  this.settings.forEach( tune => {\n    let button = document.createElement('div');\n\n    button.classList.add('cdx-settings-button');\n    button.classList.toggle('cdx-settings-button--active', this.data[tune.name]);\n    button.innerHTML = tune.icon;\n    wrapper.appendChild(button);\n\n    button.addEventListener('click', () => {\n      this._toggleTune(tune.name);\n      button.classList.toggle('cdx-settings-button--active');\n    });\n\n  });\n\n  return wrapper;\n}"}},{"type":"paragraph","data":{"text":"It is a base elements classes provided by Editor.js. <mark class=\"cdx-marker\">The reason of using such classes is to make a UI design more consistent between different plugins.&nbsp;</mark>"}},{"type":"paragraph","data":{"text":"Supported CSS classes for common elements described in <a href=\"/styles\">Styles API</a>. Let's use them:"}},{"type":"code","data":{"code":"renderSettings(){\n  const wrapper = document.createElement('div');\n\n  this.settings.forEach( tune => {\n    let button = document.createElement('div');\n\n-   button.classList.add('cdx-settings-button');\n-   button.classList.toggle('cdx-settings-button--active', this.data[tune.name]);\n+   button.classList.add(this.api.styles.settingsButton);\n+   button.classList.toggle(this.api.styles.settingsButtonActive, this.data[tune.name]);\n    button.innerHTML = tune.icon;\n    wrapper.appendChild(button);\n\n    button.addEventListener('click', () => {\n      this._toggleTune(tune.name);\n-     button.classList.toggle('cdx-settings-button--active');\n+     button.classList.toggle(this.api.styles.settingsButtonActive);\n    });\n\n  });\n\n  return wrapper;\n}"}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"See more available methods in <a href=\"https://editorjs.io/api\">API section</a>. In <a href=\"/paste-substitutions\">next chapter</a> we learn how to render our Block by paste HTML or files.&nbsp;"}}],"version":"2.12.3"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"PJ43gXh7eIrrtWIH","title":"BlockAPI","uri":"blockapi","body":{"time":1650380371454,"blocks":[{"type":"header","data":{"text":"BlockAPI","level":2}},{"type":"paragraph","data":{"text":"BlockAPI provides methods and properties to work with Block instance. You can access BlockAPI object inside Tool or using `getBlockByIndex` method."}},{"type":"code","data":{"code":"class MyTool {\n  constructor({ block }) {\n    this.block = block;\n  }\n\n  getBlockHolder() {\n    return this.block.holder;\n  }\n}\n\n...\n\nconst editor = new EditorJS();\n\nconst block = editor.getBlockByIndex(0);\n\nconst holder = block.holder;"}},{"type":"header","data":{"text":"Getters","level":3}},{"type":"table","data":{"content":[["<code class=\"inline-code\">name: string</code>","Tool's name"],["<code class=\"inline-code\">config: ToolConfig</code>","Tool's config passed on Editor's initialisation"],["<code class=\"inline-code\">holder: HTMLElement</code>","Block's content holder HTMLDivElement"],["<code class=\"inline-code\">isEmpty: boolean</code>","Indicates if Block's content is empty"],["<code class=\"inline-code\">selected: boolean</code>","Indicates if Block is selected"],["<code class=\"inline-code\">stretched: boolean</code>","Indicates if Block is stretched"]]}},{"type":"header","data":{"text":"Setters","level":3}},{"type":"table","data":{"content":[["<code class=\"inline-code\">stretched(isStretched: boolean)</code>","Changes Block stretched state"]]}},{"type":"header","data":{"text":"Methods","level":3}},{"type":"table","data":{"content":[["<code class=\"inline-code\">call(methodName: string, param?: object): void</code>","Method to call Tool's instance methods (eg. <code class=\"inline-code\">save</code>, <code class=\"inline-code\">validate</code>, <code class=\"inline-code\">render</code>, etc.)&nbsp;"],["<code class=\"inline-code\">save(): Promise&lt;void|SavedData&gt;</code>","Returns Promise which resolves to saved Block data with meta"],["<code class=\"inline-code\">validate(data: BlockToolData): Promise&lt;boolean&gt;</code>","Calls Tool's validate method and returns Promise which resolves to boolean value. Equivalent to <code class=\"inline-code\">call('validate', data)</code>"],["<code class=\"inline-code\">dispatchChange()</code>","Allows to say Editor that Block has been changed. Used to manually trigger the Editor's <code class=\"inline-code\">onChange</code> callback.&nbsp;"]]}},{"type":"header","data":{"text":"dispatchChange()","level":2}},{"type":"paragraph","data":{"text":"Allows to say Editor that Block was changed. Used to manually trigger the Editor's 'onChange' callback"}},{"type":"paragraph","data":{"text":"Can be useful for Block changes invisible to the Editor's core."}},{"type":"code","data":{"code":"class MyBlockTool {\n  constructor({ data, block }){\n    this.data\n    this.blockAPI = block\n  }\n\n  changeSomeDataProperty() {\n    this.data['some-property'] = 'some-value'\n\n    // Tell Editor to know that block was changed\n    this.blockAPI.dispatchChange()\n  } \n}"}}],"version":"2.19.0"},"parent":"Q1jQZFClCTSRdImb"}
{"_id":"PTXNsU1Sttro8Nna","title":"Sanitize saved data&nbsp;","uri":"sanitize-saved-data","body":{"time":1591442441150,"blocks":[{"type":"header","data":{"text":"Sanitize saved data&nbsp;","level":2}},{"type":"paragraph","data":{"text":"Some of the Tool's fields can contain any HTML code, for example, our Caption field with Inline Toolbar enabled. It's good to be sure that saved HTML content includes only allowed tags and attributes — only created by Inline Toolbar in our case."}},{"type":"paragraph","data":{"text":"Editor.js has a build-in Sanitizer module. There are two ways to use it."}},{"type":"header","data":{"text":"Manually","level":2}},{"type":"paragraph","data":{"text":"Call <a href=\"/sanitizer#clean\"><code class=\"inline-code\">sanitizer.clean()</code></a> API method for fields that can contain HTML on saving. This method accepts two arguments: string to sanitize and a config described rules for sanitizing."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... other methods\n\n  save(blockContent){\n    const image = blockContent.querySelector('img');\n    const caption = blockContent.querySelector('[contenteditable]');\n+   const sanitizerConfig = {\n+     b: true, \n+     a: {\n+       href: true\n+     },\n+     i: true\n+   };\n\n    return Object.assign(this.data, {\n      url: image.src,\n-     caption: caption.innerHTML || ''\n+     caption: this.api.sanitizer.clean(caption.innerHTML || '', sanitizerConfig)\n    });\n  }\n\n  // ... other methods\n}"}},{"type":"paragraph","data":{"text":"In this example, we will clean every tag except <code class=\"inline-code\">b</code>, <code class=\"inline-code\">a</code> and <code class=\"inline-code\">i</code>.&nbsp;"}},{"type":"warning","data":{"title":"","message":"Read more about available sanitizer rules&nbsp;<a href=\"/sanitizer#sanitizer-rules-configuration\">here</a>."}},{"type":"header","data":{"text":"Automatic","level":2}},{"type":"paragraph","data":{"text":"There is a second way to use the sanitizer for our Tool.&nbsp;If you implement the <a href=\"/tools-api#sanitize\"><code class=\"inline-code\">sanitize</code></a>&nbsp;static getter with the sanitizer config, Editor.js will automatically clean your saved data."}},{"type":"paragraph","data":{"text":"Useful thing is that <mark class=\"cdx-marker\">sanitizer config will be automatically extended by enabled Inline Tools tags</mark>."}},{"type":"paragraph","data":{"text":"Clean up manual sanitizing lines that we've added at the <code class=\"inline-code\">save</code> method in the previous code example. Then, add the&nbsp;<code class=\"inline-code\">sanitize</code> static getter."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... static get toolbox\n  // ... static get pasteConfig\n\n  /**\n   * Automatic sanitize config\n   */\n  static get sanitize(){\n    return {\n      url: false, // disallow HTML\n      caption: {} // only tags from Inline Toolbar \n    }\n  }\n\n  // ... constructor\n  // ... render\n  // ... _createImage\n\n  save(blockContent){\n    const image = blockContent.querySelector('img');\n    const caption = blockContent.querySelector('[contenteditable]');\n\n    return Object.assign(this.data, {\n      url: image.src,\n      caption: caption.innerHTML || ''\n    });\n  }\n\n  // ... validate\n  // ... renderSettings\n  // ... _toggleTune\n  // ... _acceptTuneView\n  // ... onPaste\n}"}},{"type":"paragraph","data":{"text":"We pass <code class=\"inline-code\">false</code> as config&nbsp;for the&nbsp;<code class=\"inline-code\">url</code>&nbsp;field because it can't contain HTML code. For the&nbsp;<code class=\"inline-code\">caption</code> field we pass the&nbsp;<code class=\"inline-code\">{}</code>-rule which means that field can contain HTML only made by Inline Toolbar.&nbsp;"}},{"type":"paragraph","data":{"text":"To check how it works, try to use Inline Toolbar in the <code class=\"inline-code\">caption</code> field. Then add some unwanted tags, for example, <code class=\"inline-code\">div</code> manually via browser web-inspector to the caption content editable element. "}},{"type":"code","data":{"code":"<div contenteditable=\"true\">\n  Here is <div> a </div>  <i>caption</i> field\n</div>"}},{"type":"paragraph","data":{"text":"Then press Save and take a look at the output. There should be only tags from Inline Toolbar. Divs should be sanitized."}},{"type":"code","data":{"code":"{\n    \"time\": 1553964811649,\n    \"blocks\": [\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\",\n                \"caption\": \"Here is a <i>caption</i> field\",\n                \"withBorder\": false,\n                \"withBackground\": false,\n                \"stretched\": false\n            }\n        }\n    ],\n    \"version\": \"2.12.3\"\n}"}},{"type":"paragraph","data":{"text":"In the <a href=\"/provide-custom-configuration\">next chapter</a> we will learn how to provide a way for our Tool users to pass some own configuration for our Tool."}}],"version":"2.16.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"Q1jQZFClCTSRdImb","title":"Tools API","uri":"tools-api","body":{"time":1722093084407,"blocks":[{"id":"TpKHVrZu26","type":"header","data":{"text":"Tools API","level":2}},{"id":"RpCVZfJmBS","type":"paragraph","data":{"text":"This article describes all available options for Tools creation. See «<a href=\"/creating-a-block-tool\">Creating a Block Tool</a>» or «<a href=\"/creating-an-inline-tool\">Creating an Inline Tool</a>» guide series for usage examples and more detailed explanations."}},{"id":"Sb4hqyit7o","type":"header","data":{"text":"Class constructor","level":2}},{"id":"mbpFoKUPxh","type":"paragraph","data":{"text":"Each Tool can be implemented by a class. It's constructor accepts three useful arguments:"}},{"id":"mWWotyzFU8","type":"code","data":{"code":"class MyTool {\n  constructor({data, api, config, readOnly, block}){\n    // ... use or store arguments as you want\n  }\n}"}},{"id":"JXrCrKrHPE","type":"table","data":{"withHeadings":false,"content":[["<a href=\"/fill-block-with-saved-data\"><code class=\"inline-code\">data</code></a>","Previously saved data. Can be used to update UI state on article editing."],["<a href=\"/api\"><code class=\"inline-code\">api</code></a>","Editor.js Core API object"],["<a href=\"/provide-custom-configuration\"><code class=\"inline-code\">config</code></a>","User configuration object that passed through the initial Editor configuration."],["<code class=\"inline-code\">readOnly</code>","The flag determines whether the read-only mode enabled or not. You should disable data modifications ability and change the UI as well in this mode."],["<a href=\"https://editorjs.io/blockapi\"><code class=\"inline-code\">block</code></a>","BlockAPI object with methods to work with Block instance"]]}},{"id":"OsqahIdYft","type":"header","data":{"text":"Public methods","level":2}},{"id":"OQGrJupL5v","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/tools-api#render\"><code class=\"inline-code\">render</code></a>","<i><b>Required</b></i>","Creates UI of a Block"],["<a href=\"https://editorjs.io/tools-api#save\"><code class=\"inline-code\">save</code></a>","<b><i>Required</i></b>","Extracts Block data from the UI"],["<a href=\"https://editorjs.io/tools-api#validate\"><code class=\"inline-code\">validate</code></a>","<i>Optional</i>","Validates Block data after saving. If returns <code class=\"inline-code\">false</code>, Block will be skipped on Editor saving."],["<a href=\"https://editorjs.io/tools-api#rendersettings\"><code class=\"inline-code\">renderSettings</code></a>","<i>Optional</i>","Returns configuration for the tunes that will be displayed in Block Tunes menu"],["<a href=\"https://editorjs.io/tools-api#destroy\"><code class=\"inline-code\">destroy</code></a>","<i>Optional</i>","Contain logic for clear Tools stuff: cache, variables, events. Called when Editor instance is destroying."],["<a href=\"https://editorjs.io/tools-api#onpaste\"><code class=\"inline-code\">onPaste</code></a>","<i>Optional</i>","Handle content pasted by ways that described by <code class=\"inline-code\">pasteConfig</code> static getter."],["<a href=\"https://editorjs.io/tools-api#merge\"><code class=\"inline-code\">merge</code></a>","<i>Optional</i>","Method specifies how to merge two similar Blocks"]]}},{"id":"z6okMRMhA2","type":"header","data":{"text":"Static getters","level":2}},{"id":"q0v3hR38tF","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/tools-api#pasteconfig\"><code class=\"inline-code\">pasteConfig</code></a>","Allows your Tool to substitute pasted HTML tags, files or URLs."],["<a href=\"https://editorjs.io/tools-api#sanitize\"><code class=\"inline-code\">sanitize</code></a>","Automatic sanitize configuration. Allows to clean unwanted HTML tags or attributes from files with Inline Toolbar."],["<a href=\"https://editorjs.io/tools-api#toolbox\"><code class=\"inline-code\">toolbox</code></a>","<mark class=\"cdx-marker\">Required if Tools should be added to the Toolbox.</mark> Describe an <code class=\"inline-code\">icon</code> and <code class=\"inline-code\">title</code> here."],["<a href=\"https://editorjs.io/tools-api#shortcut\"><code class=\"inline-code\">shortcut</code></a>","Shortcut that fires render method and inserts new Block"],["<a href=\"https://editorjs.io/tools-api#conversionconfig\"><code class=\"inline-code\">conversionConfig</code></a>","Config allows Tool to specify how it can be converted into/from another Tool."],["<a href=\"https://editorjs.io/tools-api#enablelinebreaks\"><code class=\"inline-code\">enableLineBreaks</code></a>","With this option, Editor.js won't handle Enter keydowns.&nbsp;Can be helpful for Tools like&nbsp;<a href=\"https://github.com/editor-js/code\">Code</a>&nbsp;where line breaks should be handled by default behavior."],["<a href=\"#isreadonlysupported\"><code class=\"inline-code\">isReadOnlySupported</code></a><code class=\"inline-code\"></code>","This flag tells core that current tool supports the read-only mode."]]}},{"id":"htaJHAZzgv","type":"header","data":{"text":"Lifecycle hooks","level":2}},{"id":"GgG6uBjNoq","type":"paragraph","data":{"text":"Define these public methods to handle any state of Block's lifecycle"}},{"id":"wD3wh3YRS2","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">rendered</code>","Called after Block contents is added to the page"],["<code class=\"inline-code\">updated</code>","Called each time Block contents is updated"],["<code class=\"inline-code\">removed</code>","Called after Block contents is removed from the page but before Block instance deleted"],["<code class=\"inline-code\">moved(event: MoveEvent)</code>","Called after Block is moved by move tunes (or through API). <code class=\"inline-code\">MoveEvent</code> extends <code class=\"inline-code\">CustomEvent</code> interface, its <code class=\"inline-code\">details</code> field contains the object with <code class=\"inline-code\">fromIndex</code> and <code class=\"inline-code\">toIndex</code> properties."]]}},{"id":"A63Kw0f4kp","type":"delimiter","data":{}},{"id":"z3Qc-qShtY","type":"header","data":{"text":"render()","level":2}},{"id":"kMA3ajCDKx","type":"paragraph","data":{"text":"Create a Tool UI here. Should return single HTML Element that contains all your interface."}},{"id":"ZfPHER01Vp","type":"header","data":{"text":"Parametres","level":4}},{"id":"C2wApMlnno","type":"paragraph","data":{"text":"This method has no arguments."}},{"id":"yQW-8RlwCC","type":"header","data":{"text":"Return value","level":4}},{"id":"OG2jGgYOth","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Element</code>","Tool's UI wrapper"]]}},{"id":"kQPwp0gr-Y","type":"header","data":{"text":"Example","level":4}},{"id":"JwJUf256E8","type":"code","data":{"code":"class MyTool {\n  render(){\n    const wrapper = document.createElement('div');\n    \n    wrapper.contentEditable = true;\n    \n    return wrapper;\n  }\n}"}},{"id":"vd1dS4Srty","type":"paragraph","data":{"text":"Don't forget to fill the UI with previously saved data passed to class constructor."}},{"id":"jI-wfq2aG4","type":"header","data":{"text":"save()","level":2}},{"id":"GMw-Ey0J98","type":"paragraph","data":{"text":"<i>Only for Block Tools.</i>"}},{"id":"w1wlDRSYbd","type":"paragraph","data":{"text":"Inversely to the <code class=\"inline-code\">render</code> method, it should extract actual data from the UI and return a Promise returned data of the Block."}},{"id":"QjTLXeLZyc","type":"header","data":{"text":"Parametres","level":4}},{"id":"rsdIMHfdev","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Element</code>","Element created by <code class=\"inline-code\">render</code> method."]]}},{"id":"vWG1mGA2DC","type":"header","data":{"text":"Return value","level":4}},{"id":"ceMChrSpXI","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Promise.&lt;Object&gt;</code> or <code class=\"inline-code\">Object</code>","Block data to save."]]}},{"id":"CH8KXrHM4j","type":"header","data":{"text":"Example","level":4}},{"id":"fNTxl8NAGg","type":"code","data":{"code":"class MyTool {\n  // ... other methods\n\n  /**\n   * Return Block Data\n   * @param {Element} blockContent - element returned by Render method\n   * @return {object} \n   */\n  save(blockContent) {\n    return {\n     text: blockContent.innerHTML;\n    }\n  }\n}"}},{"id":"dWyj9udhpN","type":"header","data":{"text":"validate()","level":2}},{"id":"luTKX-YPLS","type":"paragraph","data":{"text":"<i>Optional method.</i>"}},{"id":"zTwpmGJXgL","type":"paragraph","data":{"text":"Validates saved data to skip invalid (for example, empty) Blocks."}},{"id":"WR5nslSDmY","type":"header","data":{"text":"Parametres","level":4}},{"id":"H1OrWQM-qV","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Object</code>","Data returned by <code class=\"inline-code\">save</code> method."]]}},{"id":"Smz4OI6Lf4","type":"header","data":{"text":"Return value","level":4}},{"id":"jV5BhbsyWs","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Boolean</code>","Validation result. Return <code class=\"inline-code\">false</code> to skip Block or <code class=\"inline-code\">true</code> if data is correct."]]}},{"id":"NoL0iWE4g5","type":"header","data":{"text":"Example","level":4}},{"id":"KzedZ8cTJV","type":"code","data":{"code":"class MyTool {\n  // ... other methods\n\n  /**\n   * Validates data\n   * @param {object} savedData - object returned by 'save' method\n   */\n  validate(savedData) {\n    if (savedData.text.trim() === \"\") {\n       return false;\n    }\n\n    return true;\n  }\n}"}},{"id":"EpwNvb7Sj6","type":"header","data":{"text":"renderSettings()","level":2}},{"id":"RT1S3zSkho","type":"paragraph","data":{"text":"Method allows to define block tunes. Can either return MenuConfig or single HTML element with block tunes UI elements."}},{"id":"nJqlAaL22b","type":"header","data":{"text":"Parametres","level":4}},{"id":"5lOgPzGIis","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"sv8AJwAZLi","type":"header","data":{"text":"Return value","level":4}},{"id":"todw_OVHAc","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\"><a href=\"https://editorjs.io/menu-config\">MenuConfig</a></code>","Configuration of tunes appearance inside Block Tunes menu"],["<code class=\"inline-code\">Element</code>","<b>Advanced.</b> Single element that contains a Block Settings UI elements."]]}},{"id":"iCN9GdCp6T","type":"warning","data":{"title":"Note","message":"Custom HTML return value format is only recommended for corner cases when it's not possible to define tune with <code class=\"inline-code\">MenuConfig</code>. In other cases use&nbsp;simple config format."}},{"id":"dI4RtOxoiy","type":"header","data":{"text":"Example #1:&nbsp;TunesMenuConfig return value","level":4}},{"id":"aFc5NIz9Y-","type":"code","data":{"code":"class SimpleImage {\n  // ... other methods\n\n  renderSettings(){\n    return [\n      {\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z\"/></svg>`,\n        label: 'With border'\n      },\n      {\n        icon: `<svg width=\"17\" height=\"10\" viewBox=\"0 0 17 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z\"/></svg>`,\n        label: 'Stretched'\n      },\n      {\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z\"/></svg>`,\n        label: 'With background'\n      }\n    ];\n  }\n}"}},{"id":"Pzt6haxRBb","type":"header","data":{"text":"Example #2: Element return value","level":4}},{"id":"-Dzv4d-4Li","type":"code","data":{"code":"class SimpleImage {\n  // ... other methods\n\n  renderSettings(){\n    const settings = [\n      {\n        name: 'withBorder',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z\"/></svg>`\n      },\n      {\n        name: 'stretched',\n        icon: `<svg width=\"17\" height=\"10\" viewBox=\"0 0 17 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z\"/></svg>`\n      },\n      {\n        name: 'withBackground',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z\"/></svg>`\n      }\n    ];\n    const wrapper = document.createElement('div');\n\n    settings.forEach( tune => {\n      let button = document.createElement('div');\n\n      button.classList.add('cdx-settings-button');\n      button.innerHTML = tune.icon;\n      wrapper.appendChild(button);\n    });\n\n    return wrapper;\n  }\n}"}},{"id":"Oq8dGHVuYo","type":"header","data":{"text":"destroy","level":2}},{"id":"RmBBvU_m1n","type":"paragraph","data":{"text":"Method will be fired when Editor's instance is destroying with <a href=\"/destroyer\"><code class=\"inline-code\">destroy</code></a> API method. Clear your Tool's stuff here: remove event listeners, clear nodes cache and null variables and properties."}},{"id":"BZ-ftMAt97","type":"header","data":{"text":"Parametres","level":4}},{"id":"lp8GxZxI22","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"g-CXnW2a84","type":"header","data":{"text":"Return value","level":4}},{"id":"BXKrgBQR_N","type":"paragraph","data":{"text":"This method should not return anything."}},{"id":"4imIZ2YR01","type":"header","data":{"text":"Example","level":4}},{"id":"jMJFjpn80X","type":"code","data":{"code":"class SimpleImage {\n  // ...\n  destroy() {\n    this.input.removeEventListener('keydown', this.keydown);\n    this.input = null;\n  }\n}"}},{"id":"uJlOU1ymU2","type":"header","data":{"text":"onPaste","level":2}},{"id":"MjEnTXCo_k","type":"paragraph","data":{"text":"After you set a <a href=\"#pasteconfig\"><code class=\"inline-code\">pasteConfig</code></a>, for each of paste substitutions (tags, files, and patterns) you need just one method&nbsp;— <code class=\"inline-code\">onPaste</code><a href=\"#onpase\"></a>. It accepts <code class=\"inline-code\">CustomEvent</code> object as argument which can have three types: <code class=\"inline-code\">tag</code>, <code class=\"inline-code\">file</code>, and <code class=\"inline-code\">pattern</code>. Each event provides info about pasted content in <code class=\"inline-code\">detail</code>&nbsp;property."}},{"id":"ThXWxJf3e9","type":"list","data":{"style":"ordered","items":["<code class=\"inline-code\">Tag</code>&nbsp;event contains pasted HTML element in&nbsp;<code class=\"inline-code\">detail.data</code>&nbsp;property.","<code class=\"inline-code\">File</code> event contains pasted file object in <code class=\"inline-code\">detail.file</code> property.<br>","<code class=\"inline-code\">Pattern</code> event contains pasted string in <code class=\"inline-code\">detail.data</code> property and pattern name in <code class=\"inline-code\">detail.key</code>."]}},{"id":"OoRZgC2Xdh","type":"header","data":{"text":"Parametres","level":4}},{"id":"k_vL-KoiXd","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">CustomEvent</code>","Custom paste event with <code class=\"inline-code\">detail</code> property."]]}},{"id":"cROxJbXPE4","type":"header","data":{"text":"Return value","level":4}},{"id":"ywtBoIn-y4","type":"paragraph","data":{"text":"This method should not return anything."}},{"id":"xyfYFsumCJ","type":"header","data":{"text":"Example","level":4}},{"id":"cvona6I--9","type":"code","data":{"code":"class ImageTool {\n  \n  // ... other Tool methods\n\n  static get pasteConfig() {\n    return {\n      tags: ['IMG'],\n      files: {\n        mimeTypes: ['image/*'],\n        extensions: ['gif', 'jpg', 'png'] // Or you can specify extensions \n      },\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png)$/i\n      }\n    }\n  }\n\n  onPaste(event) {\n    switch(event.type) {\n      case 'tag':\n        const element = event.detail.data; // this is <img> element\n\n        this.data = {\n          url: element.src\n        };\n        break;\n        \n      case 'pattern':\n        const url = event.detail.data;\n        const key = event.detail.key; // equals 'image'\n\n        this.data = {\n          url: url\n        }\n        break;\n\n      case 'file':\n        /* We need to read file here as base64 string */\n        const file = event.detail.file;\n        const reader = new FileReader();\n        \n        reader.onload = (loadEvent) => {\n          this.data = {\n            url: loadEvent.target.result;\n          };\n        };\n\n        reader.readAsDataURL(file);\n        break;\n    }\n  }\n\n  // ... other Tool methods\n}"}},{"id":"T4Z205oaHJ","type":"header","data":{"text":"merge","level":2}},{"id":"DJMdztCc6r","type":"paragraph","data":{"text":"Method that specifies how to merge <mark class=\"cdx-marker\">two&nbsp;similar Blocks</mark>, for example on <code class=\"inline-code\">Backspace</code> keypress. It accepts data object in same format as the <a href=\"#render\"><code class=\"inline-code\">Render</code></a>&nbsp;and it should provide behaviour how to combine new data with the currently stored value."}},{"id":"Ctgv-WLvzS","type":"header","data":{"text":"Parametres","level":4}},{"id":"517Yd2dDdI","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Object</code>","Block data in same format that returned by <code class=\"inline-code\">save</code> method"]]}},{"id":"rkHv4v4Efz","type":"header","data":{"text":"Return value","level":4}},{"id":"juogT3N-Ko","type":"paragraph","data":{"text":"This method should not return anything."}},{"id":"qnvmEGGwNQ","type":"header","data":{"text":"Example","level":4}},{"id":"awO36Q1rQQ","type":"code","data":{"code":"class Header {\n  // ... other methods\n\n  /**\n  * @param {{text: string, level: number}} data - Header Tool Data\n  */\n  merge(data) {\n    this.data.text += data.text;\n    this.wrapper.innerHTML += data.text;\n  }\n}"}},{"id":"CUtrY9TWrW","type":"delimiter","data":{}},{"id":"waB0bawpFc","type":"header","data":{"text":"pasteConfig","level":2}},{"id":"vkktOhLPQP","type":"paragraph","data":{"text":"Static getter <code class=\"inline-code\">pasteConfig</code> shoud return object with paste substitutions configuration:"}},{"id":"ykdivt9dLX","type":"list","data":{"style":"ordered","items":["<code class=\"inline-code\">tags</code>&nbsp;— array of tags to substitute","<code class=\"inline-code\">files</code>&nbsp;— object with mimeTypes and extensions arrays","<code class=\"inline-code\">patterns</code>&nbsp;— object where key is your pattern name and RegExp pattern as value"]}},{"id":"6zMvihzTXf","type":"header","data":{"text":"Return value","level":4}},{"id":"kWRdTpt3dK","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">{tags: string[], files: { mimeTypes: string[], extensions: string[] }, patterns: { [string]: RegEx }}</code>","Paste configuration."]]}},{"id":"xo0TBKnRRU","type":"header","data":{"text":"Example","level":4}},{"id":"2xsZ34Hwxi","type":"paragraph","data":{"text":"For example for&nbsp;<i>Image Tool</i>&nbsp;we need to substitute img tags, handle files with image/* MIME-type and handle URLs to images:"}},{"id":"gkOQhkmbci","type":"code","data":{"code":"class ImageTool {\n  \n  // ... other Tool methods\n\n  static get pasteConfig() {\n    return {\n      tags: ['IMG'],\n      files: {\n        mimeTypes: ['image/*'],\n        extensions: ['gif', 'jpg', 'png'] // Or you can specify extensions \n      },\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png)$/i\n      }\n    }\n  }\n\n  // ... other Tool methods\n}"}},{"id":"8udK0b2YPB","type":"paragraph","data":{"text":"Then you need to specify <a href=\"#onpaste\">onPaste</a> handler to implement logic how to make your Tool from pasted content. See more information about paste substitution <a href=\"/paste-substitutions\">here</a>."}},{"id":"YAqPnXCyfd","type":"header","data":{"text":"sanitize","level":2}},{"id":"r9c6kd9gWU","type":"paragraph","data":{"text":"Object that defines rules for automatic&nbsp;<a href=\"https://editorjs.io/sanitizer\">Sanitizing</a>.&nbsp;"}},{"id":"-sTXqA_BpZ","type":"header","data":{"text":"Return value","level":4}},{"id":"3sagwQtzSH","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Object</code>","Sanitizer configuration rules for each of saved field."]]}},{"id":"xKZe6I6oYc","type":"header","data":{"text":"Example","level":4}},{"id":"NLwmTM-z9A","type":"code","data":{"code":"class SimpleImage {\n  // ... \n  static get sanitize() {\n    return {\n      url: false, // disallow HTML\n      caption: {\n        b: true, // leave <b>\n        a: {\n          href: true\n        }, // leave <a> with attribute href\n      }\n    }\n  }\n}\n"}},{"id":"SWQhkzKEIL","type":"warning","data":{"title":"","message":"Read more about available sanitizer rules&nbsp;<a href=\"/sanitizer#sanitizer-rules-configuration\">here</a>."}},{"id":"3E9LUSOo80","type":"header","data":{"text":"toolbox","level":2}},{"id":"c2zfAhJ-Xm","type":"paragraph","data":{"text":"Defines <code class=\"inline-code\">icon</code>&nbsp;and <code class=\"inline-code\">title</code>&nbsp;of the Tool's button inside the Toolbox.&nbsp;<mark class=\"cdx-marker\">This getter is required for Block Tools that should be rendered in the Toolbox.</mark>&nbsp;"}},{"id":"QZHAgyTGV_","type":"header","data":{"text":"Return value","level":4}},{"id":"dLW7F0X226","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">{icon: string, title: string}</code>","Icon and Title for the Toolbox"],["<code class=\"inline-code\">{icon: string, title: string, data: any}[]</code>","In multiple entries case returns array of each entry configuration. Note the <code class=\"inline-code\">data</code> field — it should contain data overrides that will be passed to the Block constructor. The&nbsp;<code class=\"inline-code\">data</code>&nbsp;object should fit the structure of the Block’s output data or be a part of it."]]}},{"id":"smwxYYzNoK","type":"header","data":{"text":"Example #1","level":4}},{"id":"GRWTdnay_u","type":"code","data":{"code":"class SimpleImage {\n  // ... \n  static get toolbox() {\n    return {\n      icon: '<i class=\"my-tool-icon\"></i>',\n      title: 'Simple-Image'\n    }\n  }\n}"}},{"id":"vhnMAZ5DS9","type":"header","data":{"text":"Example #2","level":4}},{"id":"RSoCLCol5q","type":"paragraph","data":{"text":"To render several variants for one Tool in the Toolbox, <code class=\"inline-code\">toolbox</code>&nbsp;getter should return an array:"}},{"id":"T72xNvXZej","type":"code","data":{"code":"class Tool {\n  // ...\n  static get toolbox() {\n    return [\n      {\n        icon: '<svg> ... </svg>', // icon for H1,\n        title: 'Heading 1',\n        data: {\n          level: 1,\n        },\n      },\n      {\n        icon: '<svg> ... </svg>', // icon for H2,\n        title: 'Heading 2',\n        data: {\n          level: 2,\n        },\n      },\n      {\n        icon: '<svg> ... </svg>', // icon for H3,\n        title: 'Heading 3',\n        data: {\n          level: 3,\n        },\n      },\n    ];\n  }\n  // ...\n}"}},{"id":"5OLTW4IQs8","type":"paragraph","data":{"text":"Such toolbox configuration will make the Tool appear in the Toolbox multiple times which will look as follows"}},{"id":"LIXHrg9Kh1","type":"image","data":{"file":{"url":"/uploads/bd013d5b4b438fa7dccc8c31701d35a4.jpeg","size":76643,"mime":"image/jpeg"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"id":"dRA_HRUucT","type":"warning","data":{"title":"Tip.","message":"The <code class=\"inline-code\">icon</code> property can contain SVG code of icon."}},{"id":"Vird3TgT2w","type":"header","data":{"text":"shortcut","level":2}},{"id":"P1lIWrtfuE","type":"paragraph","data":{"text":"Shortcut to apply Tool's render and inserting behaviour"}},{"id":"8aZeL8_hwt","type":"header","data":{"text":"Return value","level":4}},{"id":"ke70kF-3Ei","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">String</code>","Shortcut for Tool inserting. Format described <a href=\"https://github.com/codex-team/codex.shortcuts\">here</a>."]]}},{"id":"_v8B005aa7","type":"header","data":{"text":"Example","level":4}},{"id":"7bYyzcMdSQ","type":"code","data":{"code":"class SimpleImage {\n  // ... \n  static get shortcut() {\n    return 'CMD+SHIFT+I';\n  }\n}"}},{"id":"flx0TshAlf","type":"header","data":{"text":"conversionConfig","level":2}},{"id":"wMjguURmyc","type":"paragraph","data":{"text":"Editor.js has a Conversion Toolbar that allows user to convert one Block to another."}},{"id":"eYAsav3-qw","type":"image","data":{"file":{"url":"/uploads/291d93d0c007da01e0d167162671c80c.jpeg","size":413384,"mime":"image/jpeg"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"id":"xtrawgx4IC","type":"list","data":{"style":"ordered","items":["You can add ability to your Tool to be converted. Specify «export» property of <code class=\"inline-code\">conversionConfig</code>","You can add ability to convert other Tools to your Tool. Specify «import» property of <code class=\"inline-code\">conversionConfig</code>"]}},{"id":"nycT85QkP1","type":"warning","data":{"title":"Note.","message":"Conversion Toolbar will be shown only near Blocks that specified an «export» rule, when user selected almost entire block's content. This Toolbar will contain only Tools that specified an «import» rule."}},{"id":"7NbaBHNakE","type":"header","data":{"text":"Example","level":4}},{"id":"wuai9wkHTl","type":"code","data":{"code":"class Header {\n  constructor(){\n    this.data = {\n       text: '',\n       level: 2\n    }\n  }\n\n  /**\n   * Rules specified how our Tool can be converted to/from other Tool.\n   */\n  static get conversionConfig() {\n    return {\n      export: 'text', // this property of tool data will be used as string to pass to other tool\n      import: 'text' // to this property imported string will be passed\n    };\n  }\n}"}},{"id":"hhbQ7Z5Kcz","type":"header","data":{"text":"Your Tool -&gt; other Tool","level":3}},{"id":"MvAjHjJfRq","type":"paragraph","data":{"text":"The «export» field specifies how to represent your Tool's data as a string to pass it to other tool."}},{"id":"iGHWEfFHRy","type":"paragraph","data":{"text":"It can be a <code class=\"inline-code\">String</code>&nbsp;or a <code class=\"inline-code\">Function</code>"}},{"id":"8Z7vD64oNd","type":"paragraph","data":{"text":"<code class=\"inline-code\">String</code> means a key of your Tool data object that should be used as string to export."}},{"id":"Gg65d8IuXs","type":"paragraph","data":{"text":"<code class=\"inline-code\">Function</code> is a method that accepts your Tool data and compose a string to export from it. See example below:"}},{"id":"ZQSb_qHsNQ","type":"code","data":{"code":"class ListTool {\n  constructor(){\n    this.data = {\n      items: [\n        'Fisrt item',\n        'Second item',\n        'Third item'\n      ],\n      type: 'ordered'\n    }\n  }\n  \n  static get conversionConfig() {\n    return {\n      export: (data) => {\n        return data.items.join('.'); // in this example, all list items will be concatenated to an export string\n      },\n      // ... import rule\n    };\n  }\n}"}},{"id":"M_GZ3qWyVE","type":"header","data":{"text":"Other Tool -&gt; your Tool","level":3}},{"id":"h2IIwk62OX","type":"paragraph","data":{"text":"he «import» rule specifies how to create your Tool's data object from the string created by original block."}},{"id":"Xnh_iZbSJf","type":"paragraph","data":{"text":"It can be a <code class=\"inline-code\">String</code> or a <code class=\"inline-code\">Function</code>"}},{"id":"oLJMX8S6SP","type":"paragraph","data":{"text":"<code class=\"inline-code\">String</code> means the key in tool data that will be filled by an exported string. "}},{"id":"E0YXmeBjRB","type":"paragraph","data":{"text":"For example,&nbsp;<code><code class=\"inline-code\">import: 'text'</code></code>&nbsp;means that <code class=\"inline-code\">constructor</code> of your block will accept a&nbsp;<code><code class=\"inline-code\">data</code></code>&nbsp;object with&nbsp;<code><code class=\"inline-code\">text</code></code>&nbsp;property filled with string composed by original block."}},{"id":"6D0-Eo7pwA","type":"paragraph","data":{"text":"<code class=\"inline-code\">Function</code> allows you to specify own logic, how a string should be converted to your tool data. For example:"}},{"id":"3ScqHyUzGt","type":"code","data":{"code":"class ListTool {\n  constructor(data){\n    this.data = data || {\n      items: [],\n      type: 'unordered'\n    }\n  }\n  \n  static get conversionConfig() {\n    return {\n      // ... export rule \n      \n      /**\n       * In this example, List Tool creates items by splitting original text by a dot symbol. \n       */\n      import: (string) => {\n        const items = string.split('.');\n\n        return {\n          items: items.filter( (text) => text.trim() !== ''),\n          type: 'unordered'\n        };\n      }\n    };\n  }\n}"}},{"id":"IadOU4XmO0","type":"header","data":{"text":"enableLineBreaks","level":2}},{"id":"m7MdMtyvXg","type":"paragraph","data":{"text":"With this option, Editor.js won't handle Enter keydowns. Can be helpful for Tools like <a href=\"https://github.com/editor-js/code\">Code</a>&nbsp;where line breaks should be handled by default behavior."}},{"id":"ib9CXtI5_Q","type":"header","data":{"text":"Return value","level":4}},{"id":"6FN8QBja_T","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Boolean</code>","If <code class=\"inline-code\">true</code>, Editor won't handle Enter keydowns for this tool&nbsp;"]]}},{"id":"sdfiX34UKA","type":"header","data":{"text":"Example","level":4}},{"id":"3uCYpiEFsQ","type":"code","data":{"code":"/**\n * Code Tool for the Editor.js allows to include code examples in your articles.\n */\nclass CodeTool {\n  /**\n   * Allow pressing Enter inside the CodeTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return true;\n  }\n\n  // ... tool's code\n}"}},{"id":"hjdeZ2rRtG","type":"header","data":{"text":"isReadOnlySupported","level":2}},{"id":"q-H2s5hbGb","type":"paragraph","data":{"text":"Use this flag to tell the editor that your tool can be rendered in the read-only mode"}},{"id":"-kWlWT0l9D","type":"header","data":{"text":"Return value","level":4}},{"id":"rugw_vBKHH","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Boolean</code>","If <code class=\"inline-code\">true</code>, editor.js can be rendered with the read-only mode with your tool"]]}},{"id":"I5EDRlfWUI","type":"header","data":{"text":"Example","level":4}},{"id":"fOc3wZWW53","type":"code","data":{"code":"/**\n * Code Tool for the Editor.js allows to include code examples in your articles.\n */\nclass CodeTool {\n  /**\n   * Notify core that the read-only mode is supported\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get isReadOnlySupported() {\n    return true;\n  }\n\n  // ... tool's code\n}"}},{"id":"v91QzufG0V","type":"warning","data":{"title":"Tip","message":"Your tool will accept the&nbsp;<code class=\"inline-code\">readOnly</code> option along with other constructor parameters. You need to disable edition and support read-only UI by yourself."}}],"version":"2.25.0"},"parent":"0"}
{"_id":"Q76rBgBHvjFpgsTX","title":"Styles","uri":"styles","body":{"time":1669746117016,"blocks":[{"type":"header","data":{"text":"Styles","level":2}},{"type":"paragraph","data":{"text":"Editor.js provides a set of CSS classes for common UI elements. They can be used to make the design of different Tools more consistent."}},{"type":"warning","data":{"title":"Example","message":"See <a href=\"https://editorjs.io/access-api#using-a-styles-api\">how to use the Styles API</a>"}},{"type":"header","data":{"text":"Base styles","level":3}},{"type":"table","data":{"content":[["<a href=\"#block\"><code class=\"inline-code\">block</code></a>","<code class=\"inline-code\">cdx-block</code>"]]}},{"type":"header","data":{"text":"Inline Tools styles","level":3}},{"type":"table","data":{"content":[["<a href=\"#inlinetoolbutton\"><code class=\"inline-code\">inlineToolButton</code></a>","<code class=\"inline-code\">ce-inline-tool</code>"],["<a href=\"#inlinetoolbuttonactive\"><code class=\"inline-code\">inlineToolButtonActive</code></a>","<code class=\"inline-code\">ce-inline-tool--active</code>"]]}},{"type":"header","data":{"text":"UI elements","level":3}},{"type":"table","data":{"content":[["<a href=\"#input\"><code class=\"inline-code\">input</code></a>","<code class=\"inline-code\">cdx-input</code>"],["<a href=\"#loader\"><code class=\"inline-code\">loader</code></a>","<code class=\"inline-code\">cdx-loader</code>"],["<a href=\"#button\"><code class=\"inline-code\">button</code></a>","<code class=\"inline-code\">cdx-button</code>"]]}},{"type":"delimiter","data":{}},{"type":"header","data":{"text":"block","level":2}},{"type":"paragraph","data":{"text":"Base class for Block Tool wrapper. Provides common margins and paddings between Blocks."}},{"type":"code","data":{"code":"'cdx-block'"}},{"type":"header","data":{"text":"inlineToolButton","level":2}},{"type":"paragraph","data":{"text":"Style of buttons for the Inline Toolbar."}},{"type":"code","data":{"code":"'ce-inline-tool'"}},{"type":"image","data":{"file":{"url":"/uploads/21b5417a593425f14b791987d142f57f.png","size":297536,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"inlineToolButtonActive","level":2}},{"type":"paragraph","data":{"text":"Modifier for the active state of Inline Toolbar Button."}},{"type":"code","data":{"code":"'ce-inline-tool--active'"}},{"type":"image","data":{"file":{"url":"/uploads/f9b0e66f08e9215f0d028bd42c1b46ef.png","size":273096,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"input","level":2}},{"type":"paragraph","data":{"text":"A common style for text inputs."}},{"type":"code","data":{"code":"'cdx-input'"}},{"type":"image","data":{"file":{"url":"/uploads/71f4f77e39350b80854ff67feb28b276.png","size":15761,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"You can set a placeholder for <code class=\"inline-code\">contenteditable</code> element by adding a <code class=\"inline-code\">data-placeholder</code> attribute:"}},{"type":"code","data":{"code":"<div contenteditable class=\"cdx-input\" data-placeholder=\"Custom placeholder\">\n</div>"}},{"type":"header","data":{"text":"loader","level":2}},{"type":"paragraph","data":{"text":"Add this class to some element to show an animated loader placed over the element."}},{"type":"code","data":{"code":"'cdx-loader'"}},{"type":"image","data":{"file":{"url":"/uploads/8282305b8af8244bd1fafb1c6283c045.mp4","size":10284,"mime":"video/mp4"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"button","level":2}},{"type":"paragraph","data":{"text":"A common style for buttons."}},{"type":"code","data":{"code":"'cdx-button'"}},{"type":"image","data":{"file":{"url":"/uploads/7c0b4c2cd41ac000eb8d0f2ed1b03745.png","size":14399,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"code","data":{"code":"<div class=\"cdx-button\">\n  Button text\n</div>"}}],"version":"2.19.0"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"QIrSr5O3ctSFkSpK","title":"Changing a view","uri":"changing-a-view","body":{"time":1553102890835,"blocks":[{"type":"header","data":{"text":"Changing a view","level":2}},{"type":"paragraph","data":{"text":"It's time to make our Tool more visually appealing. When user pastes an Image URL to the input, we will update Block's view and shows the Image."}},{"type":"header","data":{"text":"Accessing main element&nbsp;","level":2}},{"type":"paragraph","data":{"text":"At first, let's save a main Block wrapper to <code class=\"inline-code\">this.wrapper</code> property to access it later:"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox static getter\n\n  constructor({data}){\n    this.data = data;\n    this.wrapper = undefined;\n  }\n\n  render(){\n    this.wrapper = document.createElement('div');\n    const input = document.createElement('input');\n\n    this.wrapper.classList.add('simple-image');\n    this.wrapper.appendChild(input);\n\n    input.placeholder = 'Paste an image URL...';\n    input.value = this.data && this.data.url ? this.data.url : '';\n\n    return this.wrapper;\n  }\n\n  // ... save\n\n  // ... validate\n}"}},{"type":"header","data":{"text":"Change view by paste","level":2}},{"type":"paragraph","data":{"text":"Next, add a paste handler to the input.&nbsp;"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox \n\n  // ... constructor\n\n  render(){\n    this.wrapper = document.createElement('div');\n    const input = document.createElement('input');\n\n    this.wrapper.classList.add('simple-image');\n    this.wrapper.appendChild(input);\n\n    input.placeholder = 'Paste an image URL...';\n    input.value = this.data && this.data.url ? this.data.url : '';\n\n    input.addEventListener('paste', (event) => {\n      this._createImage(event.clipboardData.getData('text'));\n    });\n\n    return this.wrapper;\n  }\n\n  _createImage(url){\n    console.log(url);\n  }\n\n  // ... save\n\n  // ... validate\n}"}},{"type":"paragraph","data":{"text":"In <code class=\"inline-code\">_createImage</code> method we will show Image and Caption elements. Underscore prefix is used for better determination of private method in our example."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n\n  // ... constructor\n\n  // ... render\n\n  _createImage(url){\n    const image = document.createElement('img');\n    const caption = document.createElement('input');\n\n    image.src = url;\n    caption.placeholder = 'Caption...';\n\n    this.wrapper.innerHTML = '';\n    this.wrapper.appendChild(image);\n    this.wrapper.appendChild(caption);\n  }\n\n  // ... save\n\n  // ... validate\n}"}},{"type":"paragraph","data":{"text":"and add some styles them"}},{"type":"code","data":{"code":".simple-image img {\n    max-width: 100%;\n    margin-bottom: 15px;\n}"}},{"type":"paragraph","data":{"text":"Now try to paste image URL to the input. If everything is fine, you will see an image and a caption field."}},{"type":"image","data":{"file":{"url":"/uploads/f866a34f3ffa3a9405e2bb198caba8fc.png","size":2435193,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Change save method","level":2}},{"type":"paragraph","data":{"text":"Previously, on saving we extract an URL from the input. But for now, we does not have an input after pasting, so we need to get URL from the image source. Also, add a caption field to the our Block's data:"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n\n  // ... constructor\n\n  // ... render\n\n  // ... _createImage\n\n  save(blockContent){\n    const image = blockContent.querySelector('img');\n    const caption = blockContent.querySelector('input');\n\n    return {\n      url: image.src,\n      caption: caption.value\n    }\n  }\n\n  // ... validate\n}"}},{"type":"paragraph","data":{"text":"Press «Save» on the demo page and take a look at the output JSON. There should be a correct image <code class=\"inline-code\">url</code> and a <code class=\"inline-code\">caption</code> field:"}},{"type":"code","data":{"code":"{\n    \"time\": 1552754304939,\n    \"blocks\": [\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\",\n                \"caption\": \"\"\n            }\n        }\n    ],\n    \"version\": \"2.11.10\"\n}"}},{"type":"header","data":{"text":"Render image from saved data&nbsp;","level":2}},{"type":"paragraph","data":{"text":"Last thing we need is to render an image and a caption when Editor will be <a href=\"/fill-block-with-saved-data\">initialised with previously saved data</a>. Little modifications of <code class=\"inline-code\">render</code> method will help us:"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n\n  // ... constructor\n\n  render(){\n    this.wrapper = document.createElement('div');\n    this.wrapper.classList.add('simple-image');\n\n+   if (this.data && this.data.url){\n+     this._createImage(this.data.url, this.data.caption);\n+     return this.wrapper;\n+   }\n\n    const input = document.createElement('input');\n\n    input.placeholder = 'Paste an image URL...';\n    input.addEventListener('paste', (event) => {\n      this._createImage(event.clipboardData.getData('text'));\n    });\n\n    this.wrapper.appendChild(input);\n\n    return this.wrapper;\n  }\n\n- _createImage(url){\n+ _createImage(url, captionText){\n    const image = document.createElement('img');\n    const caption = document.createElement('input');\n\n    image.src = url;\n    caption.placeholder = 'Caption...';\n+   caption.value = captionText || '';\n\n    this.wrapper.innerHTML = '';\n    this.wrapper.appendChild(image);\n    this.wrapper.appendChild(caption);\n  }\n\n  // ... save\n\n  // ... validate\n}"}},{"type":"paragraph","data":{"text":"Also, we pass a <code class=\"inline-code\">captionText</code> parameter to the <code class=\"inline-code\">_createImage</code> method for showing saved caption."}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"In <a href=\"/enable-inline-toolbar\">next part</a> we will learn how to enable Inline Formatting Toolbar for Caption field.&nbsp;"}},{"type":"image","data":{"file":{"url":"/uploads/3eeb18b4565b1802affb773735835bdc.png","size":383090,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}}],"version":"2.12.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"SXkElcfRPOe9ip7l","title":"Inline Tools API","uri":"inline-tools-api-1","body":{"time":1757958458211,"blocks":[{"id":"yRV2qAQiEM","type":"header","data":{"text":"Inline Tools API","level":2}},{"id":"Z97YW9FM34","type":"paragraph","data":{"text":"In this article  will be explained all available options for Inline Tools creation."}},{"id":"UFlYaO2Qcx","type":"header","data":{"text":"Public methods","level":1}},{"id":"TEd91vg2Yb","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/inline-tools-api-1#render\"><code class=\"inline-code\">render</code></a>","<i><b>Required</b></i>","create UI of button"],["<a href=\"https://editorjs.io/inline-tools-api-1#surround\"><code class=\"inline-code\">surround</code></a>","<b><i>Required</i></b>","works with selected range"],["<a href=\"https://editorjs.io/inline-tools-api-1#checkstate\"><code class=\"inline-code\">checkState</code></a>","<b><i>Required</i></b>","get Tool's activated state by selected range"],["<a href=\"https://editorjs.io/inline-tools-api-1#renderactions\"><code class=\"inline-code\">renderActions</code></a>","<i>Optional</i>","create additional element below the buttons"],["<a href=\"https://editorjs.io/inline-tools-api-1#clear\"><code class=\"inline-code\">clear</code></a>","<i>Optional</i>","clear Tool's stuff on opening/closing of Inline Toolbar"]]}},{"id":"mqNCKMLWfJ","type":"header","data":{"text":"Static getters","level":1}},{"id":"zafT2ISHOC","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/inline-tools-api-1#isinline\"><code class=\"inline-code\">isInline</code></a>","<b><i>Required</i></b>","specifies Tool as Inline Toolbar Tool"],["<a href=\"https://editorjs.io/inline-tools-api-1#sanitize\"><code class=\"inline-code\">sanitize</code></a>","<i>Optional</i>","sanitizer rules"],["<a href=\"https://editorjs.io/inline-tools-api-1#title\"><code class=\"inline-code\">title</code></a>","<i>Optional</i>","Allows to define Tool's title that can be used in Helper Tooltip appearing on hover"],["<a href=\"#shortcut\"><code class=\"inline-code\">shortcut</code></a>","Optional","Allows to define a shortcut for tool"]]}},{"id":"LpnRvcE3uF","type":"header","data":{"text":"render()","level":2}},{"id":"Q2-YgLQBbe","type":"paragraph","data":{"text":"Create Tool`s button for Inline Toolbar. Can either return&nbsp;<a href=\"https://editorjs.io/menu-config\">MenuConfig</a>&nbsp;or single HTML element with a button."}},{"id":"9ggyCurRlU","type":"header","data":{"text":"Parameters","level":3}},{"id":"E5WEDElSk4","type":"paragraph","data":{"text":"This method has no arguments."}},{"id":"JGv2l3gsLR","type":"header","data":{"text":"Return value","level":3}},{"id":"ZDCh-lQQii","type":"table","data":{"withHeadings":false,"content":[["<a href=\"/menu-config\"><code class=\"inline-code\">MenuConfig</code></a>","Configuration of the tune's appearance inside Inline Toolbar menu."],["<code class=\"inline-code\">Button</code>","<b>Advanced</b>. HTML Element with button for Inline Toolbar."]]}},{"id":"4fRHOD7PuG","type":"warning","data":{"title":"Note","message":"Custom HTML return value format is only recommended for corner cases when it's not possible to define Inline Tool with&nbsp;<a href=\"/menu-config\"><code class=\"inline-code\">MenuConfig</code></a>. In other cases use&nbsp;simple config format."}},{"id":"ScrdRKadRb","type":"header","data":{"text":"Example #1: MenuConfig return value","level":3}},{"id":"wavVr_se6T","type":"code","data":{"code":"class MyInlineTool {\n  render () {\n    return {\n      icon: '<svg>...</svg>',\n      onActivate: () => {\n        // Handle click\n      }\n    }\n  }\n}"}},{"id":"o63JVj73vb","type":"header","data":{"text":"Example #2: HTMLElement return value","level":3}},{"id":"7XBMv4fHod","type":"code","data":{"code":"class MyInlineTool {\n  render () {\n    const button = document.createElement('button');\n   \n    button.type = 'button';\n    button.innerHTML = '<svg>...</svg>';\n\n    return button;\n  }\n}"}},{"id":"kwtkLE4aZb","type":"header","data":{"text":"surround()","level":2}},{"id":"W3xSxBc-hW","type":"paragraph","data":{"text":"This method is called when Tool button is pressed and accepts <code class=\"inline-code\">Range</code> object with selected fragment as an argument."}},{"id":"RwKMFcNSDH","type":"header","data":{"text":"Parameters","level":3}},{"id":"X45Idu8x9H","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Range</code>","Range object with selected fragment"]]}},{"id":"bdaCXhXD9C","type":"header","data":{"text":"Return value","level":3}},{"id":"UdaMMfNKUB","type":"paragraph","data":{"text":"<code class=\"inline-code\">Void</code>"}},{"id":"wEbEdSw-3r","type":"header","data":{"text":"Example","level":3}},{"id":"6zzQra71hi","type":"code","data":{"code":"class MyInlineTool {\n  /* ... */\n\n  surround(range) {\n    /* Do something with the passed Range */\n  } \n}"}},{"id":"_RVqj8m3zH","type":"header","data":{"text":"checkState()","level":2}},{"id":"sXGEGn1XgR","type":"paragraph","data":{"text":"This method is called when Inline Toolbar is opened to update button`s state."}},{"id":"K6vr9dvGo2","type":"warning","data":{"title":"Deprecation notice","message":"This method is no longer recommended to use. Consider using <a href=\"/menu-config\">MenuConfig</a> and <code class=\"inline-code\">isActive</code> instead. See <a href=\"https://github.com/codex-team/editor.js/blob/next/src/components/inline-tools/inline-tool-bold.ts#L52\">example</a>."}},{"id":"HODMBW-0MD","type":"header","data":{"text":"Parameters","level":3}},{"id":"QDMmHWy4Cw","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Selection</code>","Selected fragment"]]}},{"id":"rZ4-9CllBr","type":"header","data":{"text":"Return value","level":3}},{"id":"CP4dckhU3G","type":"paragraph","data":{"text":"<code class=\"inline-code\">Boolean</code> — return <code class=\"inline-code\">true</code> if tool is active, <code class=\"inline-code\">false</code> otherwise"}},{"id":"a6LmMeq8Nc","type":"header","data":{"text":"Example","level":2}},{"id":"q9ZQbn7Mfq","type":"code","data":{"code":"class MyInlineTool {\n  /* ... */\n\n  checkState(selection) {\n    /* Check if selection contains your inline tool */\n\n    if (containsTool) {\n      this.button.classList.add('active');\n      return true;  \n    }\n    \n    this.button.classList.remove('active');  \n    return false;\n  }"}},{"id":"oLljSsq2_p","type":"header","data":{"text":"renderActions()","level":2}},{"id":"Au591VYIM9","type":"paragraph","data":{"text":"Returns additional elements to interact with the user."}},{"id":"33l8eui91W","type":"header","data":{"text":"Parameters","level":3}},{"id":"TRDmMDvVGZ","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"fKFAAA65KE","type":"header","data":{"text":"Return value","level":3}},{"id":"KpkJZQJKE8","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Element</code>","HTML Element with additional interface"]]}},{"id":"UtSKoSINgI","type":"header","data":{"text":"Example","level":3}},{"id":"S5_KGdgXqs","type":"code","data":{"code":"class MyInlineTool {\n  /* ... */\n\n  renderActions() {\n    const input = document.createElement('input');\n\n    return input;\n  }\n}"}},{"id":"044DvXdx0I","type":"header","data":{"text":"clear()","level":2}},{"id":"1cJzPQkykH","type":"paragraph","data":{"text":"This method is called when Inline Toolbar is closed. You can use it to reset some internal Tool`s states."}},{"id":"318rjsaZdt","type":"header","data":{"text":"Parameters","level":3}},{"id":"pWUaocbYqR","type":"paragraph","data":{"text":"This method has no parameters"}},{"id":"z0zBA-fd1k","type":"header","data":{"text":"Return value","level":3}},{"id":"fH1X8s3hnG","type":"paragraph","data":{"text":"<code class=\"inline-code\">Void</code>"}},{"id":"5ILY_61cT5","type":"header","data":{"text":"Example","level":3}},{"id":"SaibmH_miu","type":"code","data":{"code":"class MyInlineTool {\n  /* ... */\n\n  clear() {\n    this.internalState = null;\n  }\n}"}},{"id":"HNRSaMUmhY","type":"delimiter","data":{}},{"id":"d7Op48fOkd","type":"header","data":{"text":"isInline()","level":2}},{"id":"gQsJf9lwIK","type":"paragraph","data":{"text":"To mark Tool as inline this static getter should return <code class=\"inline-code\">true</code>."}},{"id":"OlzjhXZ0Of","type":"header","data":{"text":"Return value","level":3}},{"id":"10qGcpv1Ox","type":"paragraph","data":{"text":"<code class=\"inline-code\">true</code>"}},{"id":"4JTseA9vEP","type":"header","data":{"text":"Example","level":3}},{"id":"azooANaw1G","type":"code","data":{"code":"class MyInlineTool {\n  static get isInline() {\n    return true;\n  }\n\n  /* ... */\n}"}},{"id":"0OeewaTIiM","type":"header","data":{"text":"sanitize()","level":2}},{"id":"oasYx9-kuQ","type":"paragraph","data":{"text":"To avoid your Inline Tool to be sanitized you need to provide sanitize configuration for it. It will be merged with Block Tool configuration where your Tool is allowed to use."}},{"id":"43FBDm0ZzF","type":"header","data":{"text":"Return value","level":3}},{"id":"k1oWudSnvE","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Object</code>","Sanitizer configuration rules."]]}},{"id":"AJiovl5R6n","type":"header","data":{"text":"Example","level":3}},{"id":"5f09xTgAua","type":"code","data":{"code":"class MyInlineTool {\n  static get sanitize() {\n    return {\n      a: {\n        href: true,\n        target: '_blank',\n        ref: 'nofollow'\n      }\n    }\n  }\n\n  /* ... */\n}"}},{"id":"JLOoy2Fku5","type":"header","data":{"text":"title()","level":2}},{"id":"DOwZBPHmKu","type":"paragraph","data":{"text":"You can pass your Tool's title via&nbsp;<code><code class=\"inline-code\">title</code></code>&nbsp;static getter. It can be used, for example, in the Tooltip with icon description that appears by hover."}},{"id":"_Kzu5Lw-eG","type":"image","data":{"file":{"url":"/uploads/87407851a6a7b346dc4bf94ba993b4d6.jpeg","size":27986,"mime":"image/jpeg"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"id":"QPtePjDOfM","type":"code","data":{"code":"export default class BoldInlineTool implements InlineTool {\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   */\n  public static isInline = true;\n\n  /**\n   * Title for hover-tooltip\n   */\n  public static title: string = 'Bold';\n\n  // ... other methods\n}"}},{"id":"Y1yaAjT5O7","type":"paragraph","data":{"text":"(The example above is written on TypeScript. You can use native JS as well)"}},{"id":"sdRfba5SsH","type":"header","data":{"text":"shortcut()","level":2}},{"id":"2W2lcxeJE3","type":"paragraph","data":{"text":"Provides keyboard shortcut for your Tool"}},{"id":"cAGeYxmbyH","type":"header","data":{"text":"Return value","level":3}},{"id":"DMbPklcYRJ","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">String</code>","Shortcut for Tool. Format described&nbsp;<a href=\"https://github.com/codex-team/codex.shortcuts\">here</a>.&nbsp;&nbsp;"]]}},{"id":"hryIDfQjll","type":"header","data":{"text":"Example","level":3}},{"id":"hCIFuiwFVN","type":"code","data":{"code":"class MyInlineTool {\n  static get shortcut() {\n    return 'CMD+K';\n  }\n\n  /* ... */\n}"}}],"version":"2.25.0"},"parent":"0"}
{"_id":"XIfTsWsoUFNLXgEV","title":"Creating an Inline Tool","uri":"creating-an-inline-tool","body":{"time":1588150601694,"blocks":[{"type":"header","data":{"text":"Creating an Inline Tool","level":2}},{"type":"paragraph","data":{"text":"Inline Tools allow you to make your text more informative. The simpliest examples of them are bold, italic, and underline modifiers which are commonly used. "}},{"type":"paragraph","data":{"text":"With the Editor.js API you can create any Inline Tool you need. In the next few guides you'll find step-by-step <mark class=\"cdx-marker\">tutorial on how to create simple Marker Tool</mark> for highlighting selected text fragments."}},{"type":"image","data":{"file":{"url":"/uploads/8d38b725a6276b7167846c1f3f726111.mp4","size":742148,"mime":"video/mp4"},"caption":"Example of Marker Tool work","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"<a href=\"/inline-tool-basics\">Get started</a> »"}}],"version":"2.16.0"},"parent":"0"}
{"_id":"XQrOe3hCwykQGgD9","title":"Saver","uri":"saver","body":{"time":1560362443580,"blocks":[{"type":"header","data":{"text":"Saver","level":2}},{"type":"paragraph","data":{"text":"Module provides methods that works with saver"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/saver#save\">save</a>&nbsp;— returns saved data"}},{"type":"header","data":{"text":"Save","level":2}},{"type":"paragraph","data":{"text":"Reduces each Block sequently and calls Block <code class=\"inline-code\">save</code> method. Returns Promise with data"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"paragraph","data":{"text":"This method has no arguments"}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">Promise&lt;OutputData&gt;</code>","Returns output data via Promise"]]}},{"type":"code","data":{"code":"save(): Promise<OutputData>"}},{"type":"paragraph","data":{"text":"See a «<a href=\"/saving-data#output-data-format\">Saving data</a>» chapter for usage example and output format information."}},{"type":"warning","data":{"title":"Note.","message":"Method has a <a href=\"https://editorjs.io/api#shorthands\">shorthand</a>"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  save() {\n    const savedData = this.api.saver.save(); // ...\n  }\n  // ... other methods\n}"}}],"version":"2.12.4"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"YHrUeeWkbYo0ZIxO","title":"Saved data validation","uri":"saved-data-validation","body":{"time":1553961527686,"blocks":[{"type":"header","data":{"text":"Saved data validation","level":2}},{"type":"paragraph","data":{"text":"Let see what happens if we create several Blocks of Simple Image, left them empty and save the Editor:"}},{"type":"image","data":{"file":{"url":"/uploads/0650c531a7d5133f7b740baa846a7b75.png","size":84597,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"saved data will be following:"}},{"type":"code","data":{"code":"{\n    \"time\": 1552751755369,\n    \"blocks\": [\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n            }\n        },\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"\"\n            }\n        },\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"\"\n            }\n        }\n    ],\n    \"version\": \"2.11.10\"\n}"}},{"type":"paragraph","data":{"text":"To skip empty or wrongly filled Blocks we can provide <a href=\"/tools-api#validate\"><code class=\"inline-code\">validate</code></a> method. It will accept the saved Block's data returned by our <code class=\"inline-code\">save</code> method, check it for correctness and returns a <code class=\"inline-code\">boolean</code> value of validation result."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox static getter\n\n  // ... constructor\n\n  // ... render\n\n  save(blockContent){\n    const input = blockContent.querySelector('input');\n\n    return {\n      url: input.value\n    }\n  }\n\n  validate(savedData){\n    if (!savedData.url.trim()){\n      return false;\n    }\n\n    return true;\n  }\n}"}},{"type":"paragraph","data":{"text":"lets see what we got with saving now:"}},{"type":"code","data":{"code":"{\n    \"time\": 1552751783125,\n    \"blocks\": [\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n            }\n        }\n    ],\n    \"version\": \"2.11.10\"\n}"}},{"type":"paragraph","data":{"text":"As you can see, all empty Image Blocks was skipped due to our validation method. You can add any validation logic here."}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"In the next guide we will consider <a href=\"/changing-a-view\">how to change a Block view</a>: when user pastes an URL, we will show the Image and Caption elements"}}],"version":"2.12.3"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"cRyHNMRouIsKBfdo","title":"Selection","uri":"selection","body":{"time":1722088211536,"blocks":[{"id":"DK5BtNg13_","type":"header","data":{"text":"Selection","level":2}},{"id":"a69GgoLz6E","type":"paragraph","data":{"text":"This module provides several helpful methods working with browser selection."}},{"id":"bM1WFtVvMm","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/selection#findparenttag\">findParentTag</a> — looks ahead from selection and finds passed tag with class name"}},{"id":"hX3GmmD0XZ","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/selection#expandtotag\">expandToTag</a> — expands selection to the passed tag"}},{"id":"yqW9xn4EhN","type":"paragraph","data":{"text":"<a href=\"/selection#save\">save</a>&nbsp;– saves selection for later restoring"}},{"id":"pi8hfMRa3C","type":"paragraph","data":{"text":"<a href=\"/selection#restore\">restore</a>&nbsp;– restores previously saved selection"}},{"id":"EXc4g_XASc","type":"paragraph","data":{"text":"<a href=\"/selection#setfakebackground\">setFakeBackground</a>&nbsp;– imitates real selection by painting text's background blue"}},{"id":"QO_0jlYUu4","type":"paragraph","data":{"text":"<a href=\"/selection#removefakebackground\">removeFakeBackground</a> – removes blue selection imitation"}},{"id":"cdSFNHEw19","type":"header","data":{"text":"findParentTag","level":2}},{"id":"QrbXIT64Z2","type":"paragraph","data":{"text":"Finds parent tag with passed class name"}},{"id":"5WOa0tqqpK","type":"header","data":{"text":"Parameters","level":4}},{"id":"zTmKfeMLKJ","type":"table","data":{"withHeadings":false,"content":[["String","tag's name that will be found"],["String","tag's class name must match this argument"]]}},{"id":"owhTzD8X8a","type":"header","data":{"text":"Return value","level":4}},{"id":"9K2vrCyVbY","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">?HTMLElement</code>","found HTML element or null if not found"]]}},{"id":"dWiU9AuCeR","type":"code","data":{"code":"findParentTag(tagName: string, className?: string): HTMLElement|null"}},{"id":"ja72i-0lJE","type":"header","data":{"text":"Example","level":4}},{"id":"o4nUxWy-F7","type":"code","data":{"code":"class MyInlineTool {\n  constructor({api}) {\n    this.api = api;\n  }\n\n  surround(range) {\n    if (range) {\n      const parentAnchor = this.selection.findParentTag('A');\n      if (parentAnchor) {\n        // found closest 'A' tag that wraps current selection\n        // do something\n      }\n    }\n  }\n}"}},{"id":"3A8WQtWjwY","type":"header","data":{"text":"expandToTag","level":2}},{"id":"nDNOyqf2yK","type":"paragraph","data":{"text":"Wraps current selection with passed tag"}},{"id":"deED0ydYPR","type":"header","data":{"text":"Parameters","level":4}},{"id":"Oa7Z2EEAX7","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">HTMLElement</code>","HTML element that will wrap the selection"]]}},{"id":"BY1KgmF_Ub","type":"header","data":{"text":"Return value","level":4}},{"id":"94Tgi3jCx2","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"857KSdn-D2","type":"code","data":{"code":"expandToTag(node: HTMLElement): void"}},{"id":"NpkSy6Fscp","type":"header","data":{"text":"Example","level":4}},{"id":"8gM0orRUXc","type":"code","data":{"code":"class MyInlineTool {\n  constructor({api}) {\n    this.api = api;\n  }\n\n  surround(range) {\n    if (range) {\n      const parentAnchor = this.api.selection.findParentTag('A');\n      if (parentAnchor) {\n        // found closest 'A' tag that wraps current selection\n        this.api.selection.expandToTag(parentAnchor);\n      }\n    }\n  }\n}"}},{"id":"AnC0QEf34G","type":"header","data":{"text":"save","level":2}},{"id":"8wXGqF96wF","type":"paragraph","data":{"text":"Allows to save selection to be able to temporally move focus away and restore it later. Might be useful for creating inline tools. To keep the appearance of the selection while it is saved, use&nbsp; with&nbsp;<a href=\"/selection#setfakebackground\"><code class=\"inline-code\">setFakeBackground()</code></a>.&nbsp;"}},{"id":"eWkLlInw2G","type":"header","data":{"text":"Parameters","level":4}},{"id":"azUkUwOdr5","type":"paragraph","data":{"text":"None"}},{"id":"i19h5YnPOP","type":"header","data":{"text":"Return value","level":4}},{"id":"RqdCgPPhNp","type":"paragraph","data":{"text":"<code class=\"inline-code\">void</code>"}},{"id":"5SK5ZUmka6","type":"header","data":{"text":"restore","level":2}},{"id":"-X_XjI0otS","type":"paragraph","data":{"text":"Restores previously saved selection"}},{"id":"O-EIOpj0O1","type":"header","data":{"text":"Parameters","level":4}},{"id":"hX7MRGwHEG","type":"paragraph","data":{"text":"None"}},{"id":"J-cTXm6YVt","type":"header","data":{"text":"Return value","level":4}},{"id":"2TarnhtrUT","type":"paragraph","data":{"text":"<code class=\"inline-code\">void</code>"}},{"id":"cH4OAmtrT1","type":"header","data":{"text":"setFakeBackground","level":2}},{"id":"iC_y50CJLb","type":"paragraph","data":{"text":"Imitates the real selection by creating a blue background behind the text. This can be useful for creating inline tools, as it allows the selection to persist when the focus moves from the text to the tool's controls."}},{"id":"-lkufWEV7y","type":"header","data":{"text":"Parameters","level":4}},{"id":"D7IS6gK-Kk","type":"paragraph","data":{"text":"None"}},{"id":"SlCy9GyTI_","type":"header","data":{"text":"Return value","level":4}},{"id":"czM5qIKJxx","type":"paragraph","data":{"text":"<code class=\"inline-code\">void</code>"}},{"id":"f7Gc4GLfoV","type":"header","data":{"text":"removeFakeBackground","level":2}},{"id":"FRTOxmJGge","type":"paragraph","data":{"text":"Removes blue background behind the text that imitates selection"}},{"id":"Y3EGJZ1u8I","type":"header","data":{"text":"Parameters","level":4}},{"id":"70BOAvfcfO","type":"paragraph","data":{"text":"None"}},{"id":"lxTLVe9u_w","type":"header","data":{"text":"Return value","level":4}},{"id":"6iR6LI_uVZ","type":"paragraph","data":{"text":"<code class=\"inline-code\">void</code>"}},{"id":"M3XWoOSXzm","type":"header","data":{"text":"Example","level":4}},{"id":"-0R465caA0","type":"code","data":{"code":"/**\n * Example of inline tool with nested menu\n */\nclass ConvertToInlineTool {\n  /**\n   * Specifies Tool as Inline Tool\n   */\n  public static isInline = true;\n\n  /**\n   * API for working with Selection\n   */\n  private readonly selectionAPI: Selection;\n\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api }: { api: API }) {\n    this.selectionAPI = api.selection;\n  }\n\n  /**\n   * Returns tools Toolbar appearance config\n   */\n  public render(): MenuConfig {\n    return {\n        icon: '<svg>...</svg>',\n        children: {\n          items: [...], /* Nested menu items */\n          onOpen: () => {\n            /* Save selection once nested menu opens */\n            this.selectionAPI.setFakeBackground();\n            this.selectionAPI.save();\n          },\n          onClose: () => {\n            /* Restore selection once nested menu closes */\n            this.selectionAPI.restore();\n            this.selectionAPI.removeFakeBackground();\n          }\n        }\n    };\n  }\n\n}"}}],"version":"2.25.0"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"cVLERV6MeV27yzkN","title":"Listeners","uri":"listeners","body":{"time":1554191439352,"blocks":[{"type":"header","data":{"text":"Listeners","level":2}},{"type":"paragraph","data":{"text":"Module with methods that wraps native EventListener"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/listeners#on\">on</a> —&nbsp;add DOM event listener"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/listeners#off\">off</a> — remove DOM event listener"}},{"type":"header","data":{"text":"On","level":2}},{"type":"paragraph","data":{"text":"sets up native EventListener and saves to the Listeners storage"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">HTMLElement</code>","event listener HTML element"],["<code class=\"inline-code\">String</code>","event type (click, keyup etc)"],["<code class=\"inline-code\">Function</code>","event callback"],["<code class=\"inline-code\">Boolean</code>","use capturing"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"paragraph","data":{"text":"Method does not return anything"}},{"type":"code","data":{"code":"on(element: HTMLElement, eventType: string, handler: () => void, useCapture?: boolean): void"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    this.button = document.createElement('div');\n  }\n\n  myMethod() {\n    this.api.listeners.on(this.button, 'click', () => {\n       console.log('Button clicked!');\n    }, false);\n  }\n}"}},{"type":"header","data":{"text":"Off","level":2}},{"type":"paragraph","data":{"text":"disables EventListener and removes from Listeners storage"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">HTMLElement</code>","event listener HTML element"],["<code class=\"inline-code\">String</code>","event type (click, keydown etc)"],["<code class=\"inline-code\">Function</code>","event callback"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"paragraph","data":{"text":"Method does not return anything"}},{"type":"code","data":{"code":"off(element: HTMLElement, eventType: string, handler: () => void): void"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    this.button = document.createElement('div');\n  }\n\n  myMethod() {\n    this.api.listeners.on(this.button, 'click', () => {\n       console.log('Button clicked!');\n    }, false);\n  }\n\n  destroy() {\n    this.api.listeners.off(this.button, 'click', () => {\n       console.log('Button clicked!');\n    }, false);\n  }\n}"}}],"version":"2.12.3"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"d3ng1I1wG8h3YyhU","title":"Making a Block Settings","uri":"making-a-block-settings","body":{"time":1670861009354,"blocks":[{"type":"header","data":{"text":"Making a Block Settings","level":2}},{"type":"paragraph","data":{"text":"For now, we have a main functionality done. Time to add some advanced features."}},{"type":"paragraph","data":{"text":"In Editor.js each Block has a menu with actions on the right side. By default, there are such actions as moving Block up or down, Block removing etc. Block Tool have an ability to add own settings and actions to this menu."}},{"type":"paragraph","data":{"text":"In this guide we will add a three settings to our Simple Image Tool:&nbsp;"}},{"type":"list","data":{"style":"ordered","items":["Add border to image","Stretch image to full-width of container","Add background to image"]}},{"type":"image","data":{"file":{"url":"/uploads/98a4aefe9784d81d353564fa855663c7.png","size":2785209,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Using a <code class=\"inline-code\">renderSettings</code> method","level":2}},{"type":"paragraph","data":{"text":"All you need to know for doing a Block settings is a <a href=\"/tools-api#rendersettings\"><code class=\"inline-code\">renderSettings</code></a> method. It will called when user clicks on the Block Actions menu."}},{"type":"paragraph","data":{"text":"We need to create our actions elements and add a handlers to them. It can be a buttons, inputs and other controls."}},{"type":"paragraph","data":{"text":"Let's add a three buttons to Block Actions menu with <code class=\"inline-code\">renderSettings</code> method. This method should return a single element — a wrapper."}},{"type":"code","data":{"code":"class SimpleImage {\n  constructor(){\n    this.data = data;\n    this.wrapper = undefined;\n  }\n\n  // ... previously added methods\n\n  renderSettings(){\n    const settings = [\n      {\n        name: 'withBorder',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z\"/></svg>`\n      },\n      {\n        name: 'stretched',\n        icon: `<svg width=\"17\" height=\"10\" viewBox=\"0 0 17 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z\"/></svg>`\n      },\n      {\n        name: 'withBackground',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z\"/></svg>`\n      }\n    ];\n    const wrapper = document.createElement('div');\n\n    settings.forEach( tune => {\n      let button = document.createElement('div');\n\n      button.classList.add('cdx-settings-button');\n      button.innerHTML = tune.icon;\n      wrapper.appendChild(button);\n    });\n\n    return wrapper;\n  }\n}"}},{"type":"paragraph","data":{"text":"Try to open Block Settings menu — you should see three our buttons:"}},{"type":"image","data":{"file":{"url":"/uploads/eb4ba4112e7bb9ebab4fc8136fd6ea2c.png","size":320796,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"Before we go next, let's move the <code class=\"inline-code\">settings</code> list to the class's constructor (or getter) — we should be able to access them from other methods."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n\n  constructor({data}){\n    this.data = data;\n    this.wrapper = undefined;\n    this.settings = [\n      {\n        name: 'withBorder',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z\"/></svg>`\n      },\n      {\n        name: 'stretched',\n        icon: `<svg width=\"17\" height=\"10\" viewBox=\"0 0 17 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z\"/></svg>`\n      },\n      {\n        name: 'withBackground',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z\"/></svg>`\n      }\n    ];\n  }\n\n  // ... render\n\n  // ... _createImage\n\n  // ... save\n\n  // ... validate\n\n  renderSettings(){\n    const wrapper = document.createElement('div');\n\n    this.settings.forEach( tune => {\n      let button = document.createElement('div');\n\n      button.classList.add('cdx-settings-button');\n      button.innerHTML = tune.icon;\n      wrapper.appendChild(button);\n    });\n\n    return wrapper;\n  }\n}"}},{"type":"header","data":{"text":"Add handlers","level":2}},{"type":"paragraph","data":{"text":"As mentioned above, <mark class=\"cdx-marker\">you can create any UI elements&nbsp;in <code class=\"inline-code\">renderSettings</code>. So  adding handlers for them is in your area of responsibility</mark>.&nbsp;"}},{"type":"paragraph","data":{"text":"Let's add a click listeners for our buttons. It will toggle an «<i>active</i>» CSS modifier and fire a callback."}},{"type":"code","data":{"code":" renderSettings(){\n    const wrapper = document.createElement('div');\n\n    this.settings.forEach( tune => {\n      let button = document.createElement('div');\n\n      button.classList.add('cdx-settings-button');\n      button.innerHTML = tune.icon;\n      wrapper.appendChild(button);\n\n      button.addEventListener('click', () => {\n        this._toggleTune(tune.name);\n        button.classList.toggle('cdx-settings-button--active');\n      });\n    });\n\n    return wrapper;\n  }\n\n  /**\n   * @private\n   * Click on the Settings Button\n   * @param {string} tune — tune name from this.settings\n   */\n  _toggleTune(tune) {\n    console.log('Image tune clicked', tune);\n  }"}},{"type":"warning","data":{"title":"Note.","message":"You can write your own CSS classes and styles to create buttons. In this example, we use base CSS classes for Block Tunes provided by Editor.js. In the next chapter, we will get them by <a href=\"/styles\">Styles API</a>."}},{"type":"warning","data":{"title":"Update","message":"Since version 2.26, you can use the <a href=\"/menu-config\">Menu Config</a> — a simple object specifying how the Tune button should look. Just pass <code class=\"inline-code\">icon</code>, <code class=\"inline-code\">label</code>, and <code class=\"inline-code\">onActivate</code> callbacks instead of rendering the HTML element and binding events on it manually."}},{"type":"header","data":{"text":"Changing a state","level":2}},{"type":"paragraph","data":{"text":"It's time to decide where Image settings will be stored. Because it is similar with <code class=\"inline-code\">url</code> and <code class=\"inline-code\">caption</code> we will place it in <code class=\"inline-code\">this.data</code> and return with Tool's&nbsp;<code class=\"inline-code\">save</code> method."}},{"type":"paragraph","data":{"text":"Modify class's constructor, toggleTune and save method:&nbsp;"}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n\n  constructor({data}){\n-   this.data = data;\n+   this.data = {\n+     url: data.url || '',\n+     caption: data.caption || '',\n+     withBorder: data.withBorder !== undefined ? data.withBorder : false,\n+     withBackground: data.withBackground !== undefined ? data.withBackground : false,\n+     stretched: data.stretched !== undefined ? data.stretched : false,\n+   };\n\n    this.wrapper = undefined;\n    this.settings = [\n      {\n        name: 'withBorder',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z\"/></svg>`\n      },\n      {\n        name: 'stretched',\n        icon: `<svg width=\"17\" height=\"10\" viewBox=\"0 0 17 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z\"/></svg>`\n      },\n      {\n        name: 'withBackground',\n        icon: `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z\"/></svg>`\n      }\n    ];\n  }\n\n  // ... render\n  // ... _createImage\n\n  save(blockContent){\n    const image = blockContent.querySelector('img');\n    const caption = blockContent.querySelector('input');\n\n-   return {\n+   return Object.assign(this.data, {\n      url: image.src,\n      caption: caption.value\n-   }\n+   });\n  }\n\n  // ... validate\n  // ... renderSettings\n\n  /**\n   * @private\n   * Click on the Settings Button\n   * @param {string} tune — tune name from this.settings\n   */\n  _toggleTune(tune) {\n-   console.log('Image tune clicked', tune);\n+   this.data[tune] = !this.data[tune];\n  }\n}"}},{"type":"paragraph","data":{"text":"Now you can try to toggle some action, for example «Stretch to full-width» and click on «Save» button. In output JSON you will see default and toggled options state:"}},{"type":"code","data":{"code":"{\n    \"time\": 1552931826639,\n    \"blocks\": [\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\",\n                \"caption\": \"Here is a caption field\",\n                \"withBorder\": false,\n                \"withBackground\": false,\n                \"stretched\": true\n            }\n        }\n    ],\n    \"version\": \"2.11.10\"\n}"}},{"type":"header","data":{"text":"Changing a view","level":2}},{"type":"paragraph","data":{"text":"For now, our settings can be toggled and saved, but UI does not react to this changes. Lets add a method that will update a view corresponding with options. And call this method from <code class=\"inline-code\">_toggleTune</code> and from <code class=\"inline-code\">_createImage</code>."}},{"type":"code","data":{"code":"class SimpleImage {\n  // ... toolbox\n  // ... constructor\n  // ... render\n\n  _createImage(url, captionText){\n    const image = document.createElement('img');\n    const caption = document.createElement('input');\n\n    image.src = url;\n    caption.placeholder = 'Caption...';\n    caption.value = captionText || '';\n\n    this.wrapper.innerHTML = '';\n    this.wrapper.appendChild(image);\n    this.wrapper.appendChild(caption);\n\n    this._acceptTuneView();\n  }\n\n  // ... save\n  // ... validate\n  // ... renderSettings\n\n  /**\n   * @private\n   * Click on the Settings Button\n   * @param {string} tune — tune name from this.settings\n   */\n  _toggleTune(tune) {\n    this.data[tune] = !this.data[tune];\n    this._acceptTuneView();\n  }\n\n  /**\n   * Add specified class corresponds with activated tunes\n   * @private\n   */\n  _acceptTuneView() {\n    this.settings.forEach( tune => {\n      this.wrapper.classList.toggle(tune.name, !!this.data[tune.name]);\n    });\n  }\n}"}},{"type":"paragraph","data":{"text":"Then, add a few CSS styles:"}},{"type":"code","data":{"code":".simple-image.withBorder img {\n    border: 1px solid #e8e8eb;\n}\n\n.simple-image.withBackground {\n    background: #eff2f5;\n    padding: 10px;\n}\n\n.simple-image.withBackground img {\n    display: block;\n    max-width: 60%;\n    margin: 0 auto 15px;\n}"}},{"type":"paragraph","data":{"text":"UI will react to the settings toggling now:"}},{"type":"image","data":{"file":{"url":"/uploads/f4b4dba9decda6ead970f27264369acb.png","size":1096645,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Toggle initial buttons state","level":2}},{"type":"paragraph","data":{"text":"Let's suppose we open previously saved article. Settings of Image Block should be accepted by&nbsp;<code class=\"inline-code\">renderSettings</code> method to toggle buttons state."}},{"type":"paragraph","data":{"text":"To check it, update initial Editor data at the example.html. For example, set&nbsp;<code class=\"inline-code\">withBackground</code>&nbsp;option as <code class=\"inline-code\">true</code>."}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  autofocus: true,\n  tools: {\n    image: SimpleImage\n  },\n  data: {\n    time: 1552744582955,\n    blocks: [\n      {\n        type: \"image\",\n        data: {\n          url: \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\",\n          caption: 'Here is a caption field',\n          withBorder: false,\n          withBackground: true,\n          stretched: false\n        }\n      }\n    ],\n    version: \"2.11.10\"\n  }\n});"}},{"type":"paragraph","data":{"text":"If you open Block settings now, you will see that all buttons is deactivated. We need to add an «active» CSS modifier to buttons if they have corresponded tune enabled:"}},{"type":"code","data":{"code":"renderSettings(){\n  const wrapper = document.createElement('div');\n\n  this.settings.forEach( tune => {\n    let button = document.createElement('div');\n\n    button.classList.add('cdx-settings-button');\n+   button.classList.toggle('cdx-settings-button--active', this.data[tune.name]);\n    button.innerHTML = tune.icon;\n    wrapper.appendChild(button);\n\n    button.addEventListener('click', () => {\n      this._toggleTune(tune.name);\n      button.classList.toggle('cdx-settings-button--active');\n    });\n\n  });\n\n  return wrapper;\n}"}},{"type":"paragraph","data":{"text":"Now buttons will be highlighted depending on the tune state."}},{"type":"header","data":{"text":"Make block stretched","level":2}},{"type":"paragraph","data":{"text":"As you can note, we wrote styles only for «<i>With background</i>» and «<i>With border</i>» tunes. To create «Stretch image» handler we need to increase base width of Block content. There is an Core API method for this."}},{"type":"paragraph","data":{"text":"In <a href=\"/access-api\">next chapter</a> we will learn how to use Core API by plugins."}},{"type":"paragraph","data":{"text":"<br>"}}],"version":"2.19.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"eiJBcLTfiCadhzXW","title":"Toolbar","uri":"toolbar","body":{"time":1554189539376,"blocks":[{"type":"header","data":{"text":"Toolbar","level":2}},{"type":"paragraph","data":{"text":"Module with useful methods managing Editor.js Toolbar"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/toolbar#open\">open</a> — shows Toolbar"}},{"type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/toolbar#close\">close</a> — hides Toolbar"}},{"type":"header","data":{"text":"Open","level":2}},{"type":"paragraph","data":{"text":"Show Toolbar"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"paragraph","data":{"text":"This method has no arguments"}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"paragraph","data":{"text":"Method does not return anything"}},{"type":"code","data":{"code":"open(): void"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  openToolbar() {\n    this.api.toolbar.open();\n\n    // then do something else\n  }\n  // ... other methods\n}"}},{"type":"header","data":{"text":"Close","level":2}},{"type":"paragraph","data":{"text":"Closes Toolbar"}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"paragraph","data":{"text":"This method has no arguments"}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"paragraph","data":{"text":"Method does not return anything"}},{"type":"code","data":{"code":"close(): void"}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  closeToolbar() {\n    this.api.toolbar.close();\n\n    // then do something else\n  }\n  // ... other methods\n}"}}],"version":"2.12.3"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"fILfPwQpsiV2159e","title":"Getting started","uri":"getting-started","body":{"time":1618131508861,"blocks":[{"type":"header","data":{"text":"Getting started","level":2}},{"type":"paragraph","data":{"text":"To get started using Editor.js, follow these steps:"}},{"type":"list","data":{"style":"ordered","items":["Install Editor.js&nbsp;","Configure and initialise the Editor","Install and connect Tools"]}},{"type":"header","data":{"text":"Installation","level":2}},{"type":"paragraph","data":{"text":"Choose the most usable method of getting Editor.js for you."}},{"type":"list","data":{"style":"ordered","items":["Node package","Source from CDN","Local file from project"]}},{"type":"header","data":{"text":"Node.js package","level":4}},{"type":"paragraph","data":{"text":"Install the package via NPM&nbsp;or Yarn"}},{"type":"code","data":{"code":"npm i @editorjs/editorjs --save"}},{"type":"code","data":{"code":"yarn add @editorjs/editorjs"}},{"type":"paragraph","data":{"text":"Include module in your application"}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs';"}},{"type":"header","data":{"text":"Load from CDN","level":4}},{"type":"paragraph","data":{"text":"You can load specific version of package from&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/@editorjs/editorjs\" rel=\"nofollow\">jsDelivr CDN</a>."}},{"type":"code","data":{"code":"<script src=\"https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest\"></script>"}},{"type":"header","data":{"text":"Manually load file to your project","level":4}},{"type":"paragraph","data":{"text":"Copy&nbsp;<a href=\"https://github.com/codex-team/editor.js/releases\">editor.js</a>&nbsp;file to your project and load it."}},{"type":"code","data":{"code":"<script src=\"editor.js\"></script>"}},{"type":"header","data":{"text":"Configuration","level":2}},{"type":"paragraph","data":{"text":"You can init Editor.js with zero-configuration option"}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs';\n\n\nconst editor = new EditorJS();"}},{"type":"paragraph","data":{"text":"It equals the simplest config with one required option — <code class=\"inline-code\">holder</code>&nbsp;in default value — «<i>editorjs</i>»&nbsp;"}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs';\n\n\nconst editor = new EditorJS('editorjs');"}},{"type":"paragraph","data":{"text":"that equals"}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs';\n\n\nconst editor = new EditorJS({\n  /**\n   * Id of Element that should contain Editor instance\n   */\n  holder: 'editorjs'\n});"}},{"type":"paragraph","data":{"text":"See <a href=\"/configuration\">Configuration</a> page for the further tunings."}},{"type":"header","data":{"text":"Tools installation","level":2}},{"type":"paragraph","data":{"text":"As described in&nbsp;<a href=\"/base-concepts\">Base Concepts</a>, each Block in Editor.js is provided by a Plugin.&nbsp;There are simple external scripts with their own logic.&nbsp;"}},{"type":"paragraph","data":{"text":"There is the only Paragraph block already included in Editor.js. Probably you want to use several Block Tools that should be installed and connected."}},{"type":"paragraph","data":{"text":"You can find some available Blocks&nbsp;<a href=\"https://github.com/editor-js\">here</a>. Select the Blocks you need and follow the installation guide in their README.md files."}},{"type":"list","data":{"style":"ordered","items":["<a href=\"https://github.com/editor-js/header\">Header</a>","<a href=\"https://github.com/editor-js/link\">Link embeds</a>","<a href=\"https://github.com/editor-js/raw\">Raw HTML blocks</a>","<a href=\"https://github.com/editor-js/simple-image\">Simple Image</a>&nbsp;(without backend requirement)","<a href=\"https://github.com/editor-js/image\">Image</a>","<a href=\"https://github.com/editor-js/checklist\">Checklist</a>","<a href=\"https://github.com/editor-js/list\">List</a>","<a href=\"https://github.com/editor-js/embed\">Embeds</a>","<a href=\"https://github.com/editor-js/quote\">Quote</a>"]}},{"type":"paragraph","data":{"text":"And some&nbsp;<a href=\"https://github.com/editor-js\">others</a>."}},{"type":"paragraph","data":{"text":"After Tools installation, you should connect them to the Editor via the configuration object."}},{"type":"header","data":{"text":"Tools connection","level":2}},{"type":"paragraph","data":{"text":"At first, take a look on the simplest config we just created"}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs'; \n\nconst editor = new EditorJS({ \n  /** \n   * Id of Element that should contain the Editor \n   */ \n  holder: 'editorjs', \n})"}},{"type":"paragraph","data":{"text":"Let's add some more Tools to our page with the&nbsp;<code class=\"inline-code\">tools</code>&nbsp;property. Tools` scripts should be installed as explained above."}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs'; \nimport Header from '@editorjs/header'; \nimport List from '@editorjs/list'; \n\nconst editor = new EditorJS({ \n  /** \n   * Id of Element that should contain the Editor \n   */ \n  holder: 'editorjs', \n  \n  /** \n   * Available Tools list. \n   * Pass Tool's class or Settings object for each Tool you want to use \n   */ \n  tools: { \n    header: Header, \n    list: List \n  }, \n})"}},{"type":"paragraph","data":{"text":"in this case, we connect Tools` Plugins without any options.&nbsp;<br>"}},{"type":"warning","data":{"title":"Note.","message":"The keys of&nbsp;<code class=\"inline-code\">tools</code>&nbsp;objects will be added as&nbsp;<code class=\"inline-code\">type</code>&nbsp;fields to the Saved Data."}},{"type":"paragraph","data":{"text":"You can specify some settings of connected Tools:"}},{"type":"code","data":{"code":"import EditorJS from '@editorjs/editorjs'; \nimport Header from '@editorjs/header'; \nimport List from '@editorjs/list'; \n\nconst editor = new EditorJS({ \n  /** \n   * Id of Element that should contain the Editor \n   */ \n  holder: 'editorjs', \n\n  /** \n   * Available Tools list. \n   * Pass Tool's class or Settings object for each Tool you want to use \n   */ \n  tools: { \n    header: {\n      class: Header, \n      inlineToolbar: ['link'] \n    }, \n    list: { \n      class: List, \n      inlineToolbar: true \n    } \n  }, \n})"}},{"type":"paragraph","data":{"text":"In the example above, we configure available Inline Toolbar settings: Header tool will have the only Link at the Inline Formatting Toolbar (aka Inline Toolbar), and List Tools will have all available Inline Tools at the Inline Toolbar"}},{"type":"warning","data":{"title":"Note.","message":"If you use TypeScript you need to explicitly specify that <code class=\"inline-code\">typeof Tool</code> implements <code class=\"inline-code\">BlockToolConstructable</code> or <code class=\"inline-code\">InlineToolConstructable</code>"}},{"type":"header","data":{"text":"Available tools options","level":2}},{"type":"table","data":{"content":[["<code class=\"inline-code\">class</code>","Tool class"],["<code class=\"inline-code\">config</code>","Tool specific configuration passed to Tool constructor"],["<code class=\"inline-code\">inlineToolbar</code>","<a href=\"https://editorjs.io/enable-inline-toolbar#enable-inline-toolbar\">controls</a>&nbsp;which Inline Tool should be available in your Block Tool. Accepts boolean value or array of Inline Tools names&nbsp;&nbsp;"],["<code class=\"inline-code\">shortcut</code>","shortcut for Tool. You can read more about the format&nbsp;<a href=\"https://github.com/codex-team/codex.shortcuts\">here</a>"],["<code class=\"inline-code\">toolbox</code>","option to rewrite Tool`s internal toolbox icon and title. The format is the same as&nbsp;<a href=\"https://editorjs.io/the-first-plugin#displaying-at-the-toolbox\">here</a>&nbsp;&nbsp;"]]}}],"version":"2.19.0"},"parent":"tNfI7Y8IaRlvvCcF"}
{"_id":"g3BXbVdAuPZO9Cs0","title":"Menu Config","uri":"menu-config","body":{"time":1722092237335,"blocks":[{"id":"ELzqvpzznN","type":"header","data":{"text":"Menu Config","level":2}},{"id":"XC4OY2yUkH","type":"image","data":{"file":{"url":"/uploads/b6f67765578fa6e65d1bc6a7526425ee.jpeg","size":155945,"mime":"image/jpeg"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"id":"2aASKCzsM_","type":"paragraph","data":{"text":"Menu configuration format. Is used for defining Block Tunes Menu items via Block Tool's <a href=\"https://editorjs.io/tools-api#rendersettings\"><code class=\"inline-code\">renderSettings()</code></a>, Block Tune's <a href=\"https://editorjs.io/block-tunes-api#render\"><code class=\"inline-code\">render()</code></a>&nbsp;and Inline Tool's <a href=\"/inline-tools-api-1#render\"><code class=\"inline-code\">render()</code></a>. Can be represented as a single item or an array of items of the following structure:"}},{"id":"zw1RgKKLfI","type":"header","data":{"text":"MenuConfigItem","level":2}},{"id":"ey6QU2jEOZ","type":"table","data":{"withHeadings":false,"content":[["icon","<code class=\"inline-code\">string</code>","<i>Optional</i>","String with tune's icon svg"],["title","<code class=\"inline-code\">string</code>","<i>Optional</i>","Tune title text"],["type","<code class=\"inline-code\">'default'</code> | <code class=\"inline-code\">'separator'</code> | <code class=\"inline-code\">'html'</code>","<i>Optional</i>","Menu Config item type.&nbsp;<code class=\"inline-code\">'default'</code> by default"],["element","<code class=\"inline-code\">HTMLElement</code>","<i>Optional</i>","HTMLElement to be rendered inside MenuItem. Is used only with <code class=\"inline-code\">type: 'html'</code>"],["hint","<a href=\"/menu-config#hintparams\"><code class=\"inline-code\">HintParams</code></a>","<i>Optional</i>","Hint data to be displayed on item hover"],["onActivate","<code class=\"inline-code\">() =&gt; void</code>","<i>Optional</i>","Function to be called once tune activated by the user"],["isActive","<code class=\"inline-code\">boolean</code> | <code class=\"inline-code\">() =&gt; boolean</code>","<i>Optional</i>","True if tune should be marked as active"],["isDisabled","<code class=\"inline-code\">boolean</code>","<i>Optional</i>","True if tune should be disabled"],["closeOnActivate","<code class=\"inline-code\">boolean</code>","<i>Optional</i>","True if Block Tunes menu should close once the tune is activated. By default, the menu will stay visible after the tune activation"],["toggle","<code class=\"inline-code\">boolean</code> | <code class=\"inline-code\">string</code>","<i>Optional</i>","True if tune should act like a toggle (become highlighted on activation).&nbsp; Alternatively, can be set to toggle group name, which will make the tune behave like radio button. <a href=\"https://codex.so/toggle-groups\">See example</a>"],["confirmation","<a href=\"/menu-config#menuconfigitem\"><code class=\"inline-code\">MenuConfigItem</code></a>","<i>Optional</i>","Allows to ask for user confirmation before item activation. Contains settings of the item to be displayed at the place of clicked item. If <code class=\"inline-code\">confirmation</code> setting is set on the tune, it should not contain <code class=\"inline-code\">onActivate</code> callback."],["children","<a href=\"/menu-config#children\"><code class=\"inline-code\">Children</code></a>","<i>Optional</i>","Data of the children items. Children items are the ones that open near trigger item on click/hover in separate popover.&nbsp;"]]}},{"id":"d31r7XfZ0P","type":"header","data":{"text":"HintParams","level":2}},{"id":"AKJDXaKx3b","type":"table","data":{"withHeadings":false,"content":[["title","<code class=\"inline-code\">string</code>","<i>Required</i>","Title text"],["description","<code class=\"inline-code\">string</code>","<i>Optional</i>","Secondary text to be displayed below the title"],["alignment","<code class=\"inline-code\">'start' </code>| <code class=\"inline-code\">'center'</code>","<i>Optional</i>","Horizontal alignment of the hint content. Default is <code class=\"inline-code\">'start'</code>"]]}},{"id":"CGPOc4jeQM","type":"header","data":{"text":"Children","level":2}},{"id":"lVHeSAQ41D","type":"table","data":{"withHeadings":false,"content":[["items","<a href=\"/menu-config#menuconfigitem\"><code class=\"inline-code\">MenuConfigItem[]</code></a>","<i>Required</i>","List of children items"]]}},{"id":"UCpleoRpr9","type":"header","data":{"text":"Example #1: single default MenuConfigItem","level":3}},{"id":"fExcXWa8S7","type":"code","data":{"code":"{\n  icon: '<svg>...</svg>',\n  title: 'Item Title',\n  onActivate: () => {\n    // Handle item activation, for example:\n    document.execCommand(this.commandName);\n  },\n  isActive: () => {\n    // Check if item is currently active, for example:\n    return document.queryCommandState(this.commandName)\n  }\n}"}},{"id":"3CZDA75kEt","type":"header","data":{"text":"Example #2: several items with separator between","level":3}},{"id":"qCxsH_-KhM","type":"code","data":{"code":"[\n  {\n    icon: '<svg>...</svg>',\n    title: 'Item 1 Title',\n    onActivate: () => { ... }\n  },{\n    type: 'separator'\n  },{\n    icon: '<svg>...</svg>',\n    title: 'Item 2 Title',\n    onActivate: () => { ... }    \n  }\n]"}},{"id":"phmlmvuIST","type":"header","data":{"text":"Example #3: single html&nbsp;MenuConfigItem","level":3}},{"id":"zQMsQjjy-v","type":"code","data":{"code":"\n{\n  type: 'html',\n  element: document.createElement('div')\n}"}},{"id":"0cfjnRWbwk","type":"header","data":{"text":"Example #4: MenuConfigItem with children","level":3}},{"id":"kcyLZC0ytx","type":"code","data":{"code":"{\n  icon: '<svg>...</svg>',\n  title: 'Parent Item Title',\n  children: {\n    items: [\n      {\n        icon: '<svg>...</svg>',\n        title: 'Child Item Icon 1',\n        onActivate: () => { ... }\n      },\n      {\n        icon: '<svg>...</svg>',\n        title: 'Child Item Icon 2',\n        onActivate: () => { ... }\n      }\n    ]\n  }\n}"}},{"id":"bmQsAlODGQ","type":"header","data":{"text":"Example #5: MenuConfigItem with confirmation","level":3}},{"id":"HtPru8u00G","type":"code","data":{"code":"{\n  icon: '<svg>...</svg>',\n  title: 'Delete',\n  confirmation: {\n    icon: '<svg>...</svg>',\n    title: 'Are you sure you want to delete?',\n    onActivate: () => { ... }\n  },\n}"}}],"version":"2.25.0"},"parent":"Q1jQZFClCTSRdImb"}
{"_id":"h9anuT6WKVmu2HaI","title":"Home","uri":"home","body":{"time":1551466352420,"blocks":[{"type":"header","data":{"text":"Home","level":2}}],"version":"2.8.1"},"parent":"udmrAMUvcgyVqv5B"}
{"_id":"jubIvSHukNWrlosF","title":"Interaction with the user","uri":"inline-tool-user-interaction","body":{"time":1551286901752,"blocks":[{"type":"header","data":{"text":"Interaction with the user","level":2}},{"type":"paragraph","data":{"text":"Our Marker Tool is ready to use. However, we can add some more features. For example, you want to choose a highlight color when you use Marker. For that we will use HTML <code class=\"inline-code\">input</code> element with type <code class=\"inline-code\">color</code>.&nbsp; To add input to the Inline Toolbar we need <code class=\"inline-code\">renderActions</code> method which returns some layout we want to add:"}},{"type":"code","data":{"code":"renderActions() {\n    this.colorPicker = document.createElement('input');\n    this.colorPicker.type = 'color';\n    this.colorPicker.value = '#f5f1cc';\n    this.colorPicker.hidden = true;\n\n    return this.colorPicker;\n}"}},{"type":"paragraph","data":{"text":"Now when marker button is pressed just show this input. When highlight is removed — hide it:"}},{"type":"code","data":{"code":"showActions(mark) {\n    this.colorPicker.value = mark.style.backgroundColor || '#f5f1cc';\n\n    this.colorPicker.onchange = () => {\n        mark.style.backgroundColor = this.colorPicker.value;\n    };\n    this.colorPicker.hidden = false;\n}\n\nhideActions() {\n    this.colorPicker.onchange = null;\n    this.colorPicker.hidden = true;\n}\n\ncheckState() {\n    const mark = this.api.selection.findParentTag(this.tag);\n\n    this.state = !!mark;\n\n    if (this.state) {\n        this.showActions(mark);\n    } else {\n        this.hideActions();\n    }\n}"}},{"type":"paragraph","data":{"text":"Unfortunately that wouldn't work as expected because <code class=\"inline-code\">mark.style.backgroundColor</code> returns the value of color in normalized <code class=\"inline-code\">rgb()</code> format. To handle it we need one more helping method to convert the rgb value to hex:"}},{"type":"code","data":{"code":"showActions(mark) {\n    const {backgroundColor} = mark.style;\n\n    this.colorPicker.value = backgroundColor ? this.convertToHex(backgroundColor) : '#f5f1cc';\n\n    this.colorPicker.onchange = () => {\n        mark.style.backgroundColor = this.colorPicker.value;\n    };\n    this.colorPicker.hidden = false;\n}\n\nconvertToHex(color) {\n    const rgb = color.match(/(\\d+)/g);\n    \n    let hexr = parseInt(rgb[0]).toString(16);\n    let hexg = parseInt(rgb[1]).toString(16);\n    let hexb = parseInt(rgb[2]).toString(16);\n    \n    hexr = hexr.length === 1 ? '0' + hexr : hexr;\n    hexg = hexg.length === 1 ? '0' + hexg : hexg;\n    hexb = hexb.length === 1 ? '0' + hexb : hexb;\n    \n    return '#' + hexr + hexg + hexb;\n}"}},{"type":"paragraph","data":{"text":"That's it! Now you can choose the color of marker. With <code class=\"inline-code\">renderActions</code> method you can insert into Inline Toolbar any inputs or hints for the user (e.g. input for the link)."}},{"type":"paragraph","data":{"text":"Here the full code of Marker Tool with color picker:"}},{"type":"code","data":{"code":"class MarkerTool {\n\n  static get isInline() {\n    return true;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(state) {\n    this._state = state;\n\n    this.button.classList.toggle(this.api.styles.inlineToolButtonActive, state);\n  }\n\n  constructor({api}) {\n    this.api = api;\n    this.button = null;\n    this._state = false;\n\n    this.tag = 'MARK';\n    this.class = 'cdx-marker';\n  }\n\n  render() {\n    this.button = document.createElement('button');\n    this.button.type = 'button';\n    this.button.innerHTML = '<svg width=\"20\" height=\"18\"><path d=\"M10.458 12.04l2.919 1.686-.781 1.417-.984-.03-.974 1.687H8.674l1.49-2.583-.508-.775.802-1.401zm.546-.952l3.624-6.327a1.597 1.597 0 0 1 2.182-.59 1.632 1.632 0 0 1 .615 2.201l-3.519 6.391-2.902-1.675zm-7.73 3.467h3.465a1.123 1.123 0 1 1 0 2.247H3.273a1.123 1.123 0 1 1 0-2.247z\"/></svg>';\n    this.button.classList.add(this.api.styles.inlineToolButton);\n\n    return this.button;\n  }\n\n  surround(range) {\n    if (this.state) {\n      this.unwrap(range);\n      return;\n    }\n\n    this.wrap(range);\n  }\n\n  wrap(range) {\n    const selectedText = range.extractContents();\n    const mark = document.createElement(this.tag);\n\n    mark.classList.add(this.class);\n    mark.appendChild(selectedText);\n    range.insertNode(mark);\n\n    this.api.selection.expandToTag(mark);\n  }\n\n  unwrap(range) {\n    const mark = this.api.selection.findParentTag(this.tag, this.class);\n    const text = range.extractContents();\n\n    mark.remove();\n\n    range.insertNode(text);\n  }\n\n\n  checkState() {\n    const mark = this.api.selection.findParentTag(this.tag);\n\n    this.state = !!mark;\n  \n    if (this.state) {\n      this.showActions(mark);\n    } else {\n      this.hideActions();\n    }\n  }\n\n  renderActions() {\n    this.colorPicker = document.createElement('input');\n    this.colorPicker.type = 'color';\n    this.colorPicker.value = '#f5f1cc';\n    this.colorPicker.hidden = true;\n\n    return this.colorPicker;\n  }\n\n  showActions(mark) {\n    const {backgroundColor} = mark.style;\n    this.colorPicker.value = backgroundColor ? this.convertToHex(backgroundColor) : '#f5f1cc';\n\n    this.colorPicker.onchange = () => {\n      mark.style.backgroundColor = this.colorPicker.value;\n    };\n    this.colorPicker.hidden = false;\n  }\n\n  hideActions() {\n    this.colorPicker.onchange = null;\n    this.colorPicker.hidden = true;\n  }\n\n  convertToHex(color) {\n    const rgb = color.match(/(\\d+)/g);\n\n    let hexr = parseInt(rgb[0]).toString(16);\n    let hexg = parseInt(rgb[1]).toString(16);\n    let hexb = parseInt(rgb[2]).toString(16);\n\n    hexr = hexr.length === 1 ? '0' + hexr : hexr;\n    hexg = hexg.length === 1 ? '0' + hexg : hexg;\n    hexb = hexb.length === 1 ? '0' + hexb : hexb;\n\n    return '#' + hexr + hexg + hexb;\n  }\n}"}},{"type":"paragraph","data":{"text":"In the <a href=\"/inline-tool-advanced-methods\">next article</a> you can learn about some advanced methods for Inline Tools."}}],"version":"2.8.1"},"parent":"XIfTsWsoUFNLXgEV"}
{"_id":"kSWsM7nwP27PdfV0","title":"Core API","uri":"api","body":{"time":1584298742101,"blocks":[{"type":"header","data":{"text":"Core API","level":2}},{"type":"paragraph","data":{"text":"This page lists the reference documentation for Editor.js API's. You can access it both from the Editor instance or from the Plugins constructor:"}},{"type":"code","data":{"code":"const editor = EditorJS()\n\neditor.blocks.clear()"}},{"type":"code","data":{"code":"class MyTool {\n  constructor({ api }){\n     this.api = api\n     this.api.blocks.clear()\n  }\n}"}},{"type":"header","data":{"text":"Blocks","level":2}},{"type":"paragraph","data":{"text":"Methods for creating, inserting and removing Blocks"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/blocks#clear\"><code class=\"inline-code\">clear</code></a>","removes all Blocks and creates new empty initial Block"],["<a href=\"https://editorjs.io/blocks#render\"><code class=\"inline-code\">render</code></a>","creates UI of inserting Block"],["<a href=\"https://editorjs.io/blocks#delete\"><code class=\"inline-code\">delete</code></a>","removes Block by index"],["<a href=\"https://editorjs.io/blocks#swap\"><code class=\"inline-code\">swap</code></a>","<i>deprecated&nbsp;</i>swaps two Blocks by indexes"],["<a href=\"https://editorjs.io/blocks#move\"><code class=\"inline-code\">move</code></a>","move Block to passed index"],["<a href=\"https://editorjs.io/blocks#getblockbyindex\"><code class=\"inline-code\">getBlockByIndex</code></a>","returns Block HTML content by index"],["<a href=\"https://editorjs.io/blocks#getcurrentblockindex\"><code class=\"inline-code\">getCurrentBlockIndex</code></a>","returns focused Block index"],["<a href=\"https://editorjs.io/blocks#getblockscount\"><code class=\"inline-code\">getBlocksCount</code></a>","returns count of Blocks"],["<a href=\"https://editorjs.io/blocks#stretchblock\"><code class=\"inline-code\">stretchBlock</code></a>","stretches Block's content"],["<a href=\"https://editorjs.io/blocks#insert\"><code class=\"inline-code\">insert</code></a>","inserts new Block after focused Block"]]}},{"type":"header","data":{"text":"Selection","level":2}},{"type":"paragraph","data":{"text":"Methods for getting information about Selection inside the Editor.js workspace"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/selection#findparenttag\"><code class=\"inline-code\">findParentTag</code></a>","looks ahead from selection and finds passed tag with class name"],["<a href=\"https://editorjs.io/selection#expandtotag\"><code class=\"inline-code\">expandToTag</code></a>","expands selection to the passed tag"]]}},{"type":"header","data":{"text":"Toolbar","level":2}},{"type":"paragraph","data":{"text":"Methods for Toolbar manipulation"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/toolbar#open\"><code class=\"inline-code\">open</code></a>","shows Toolbar"],["<a href=\"https://editorjs.io/toolbar#close\"><code class=\"inline-code\">close</code></a>","hides Toolbar"]]}},{"type":"header","data":{"text":"Sanitizer","level":2}},{"type":"paragraph","data":{"text":"Methods for cleaning data"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/sanitizer#clean\"><code class=\"inline-code\">clean</code></a>","method cleans up taint string with passed rules&nbsp;"]]}},{"type":"header","data":{"text":"Caret","level":2}},{"type":"paragraph","data":{"text":"Methods for caret manipulations inside the Editor.js workspace"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/caret#settofirstblock\"><code class=\"inline-code\">setToFirstBlock</code></a>","sets caret to the first Block"],["<a href=\"https://editorjs.io/caret#settolastblock\"><code class=\"inline-code\">setToLastBlock</code></a>","sets caret to the last Block"],["<a href=\"https://editorjs.io/caret#settopreviousblock\"><code class=\"inline-code\">setToPreviousBlock</code></a>","sets caret to the previous Block"],["<a href=\"https://editorjs.io/caret#settonextblock\"><code class=\"inline-code\">setToNextBlock</code></a>","sets caret to the next Block"],["<a href=\"https://editorjs.io/caret#settoblock\"><code class=\"inline-code\">setToBlock</code></a>","sets caret to the Block"],["<a href=\"https://editorjs.io/caret#focus\"><code class=\"inline-code\">focus</code></a>","focus Editor"]]}},{"type":"header","data":{"text":"Listeners","level":2}},{"type":"paragraph","data":{"text":"Methods that wraps native JavaScript addEventListener"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/listeners#on\"><code class=\"inline-code\">on</code></a>","add DOM event listener"],["<a href=\"https://editorjs.io/listeners#off\"><code class=\"inline-code\">off</code></a>","remove DOM event listener"]]}},{"type":"header","data":{"text":"Saver","level":2}},{"type":"paragraph","data":{"text":"Methods for saving data"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/saver#save\"><code class=\"inline-code\">save</code></a>","returns saved data"]]}},{"type":"header","data":{"text":"Shorthands","level":2}},{"type":"paragraph","data":{"text":"Editor`s instance has «shorthands» for some of API methods. You can call them directly:"}},{"type":"code","data":{"code":"const editor = new EditorJS();\n\neditor.clear();"}},{"type":"table","data":{"content":[["<a href=\"https://editorjs.io/saver#save\"><code class=\"inline-code\">save</code></a>","shorthand for <code class=\"inline-code\">saver.save</code> method"],["<a href=\"https://editorjs.io/blocks#clear\"><code class=\"inline-code\">clear</code></a>","shorthand for <code class=\"inline-code\">blocks.clear</code> method"],["<a href=\"https://editorjs.io/blocks#render\"><code class=\"inline-code\">render</code></a>","shorthand for <code class=\"inline-code\">blocks.render</code> method"],["<a href=\"https://editorjs.io/caret#focus\"><code class=\"inline-code\">focus</code></a>","shorthand for <code class=\"inline-code\">caret.focus</code> method"]]}}],"version":"2.16.0"},"parent":"0"}
{"_id":"n2G6dJT4ldNw9o23","title":"Tooltip API","uri":"tooltip-api","body":{"time":1575482553426,"blocks":[{"type":"header","data":{"text":"Tooltip API","level":2}},{"type":"paragraph","data":{"text":"These methods allow you to show Tooltip helper near own elements. Parameters are the same as in <a href=\"https://github.com/codex-team/codex.tooltips\">CodeX Tooltips</a> library."}},{"type":"image","data":{"file":{"url":"/uploads/33a9f9bb7ecbcd8a9f793f923b8d8e2a.png","size":32436,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"table","data":{"content":[["<a href=\"/tooltip-api#show\"><code class=\"inline-code\">show</code></a>","The method shows a tooltip with custom content on the passed element."],["<a href=\"/tooltip-api#hide\"><code class=\"inline-code\">hide</code></a>","Method hides the Tooltip."],["<a href=\"/tooltip-api#onhover\"><code class=\"inline-code\">onHover</code></a>","Decorator for showing tooltip near some element by&nbsp;<code class=\"inline-code\">mouseenter</code>&nbsp;and hide by&nbsp;<code class=\"inline-code\">mouseleave</code>."]]}},{"type":"header","data":{"text":"show()","level":2}},{"type":"paragraph","data":{"text":"The method shows a tooltip with custom content on the passed element."}},{"type":"code","data":{"code":"this.api.tooltip.show(element, content, options);"}},{"type":"header","data":{"text":"Parametres","level":3}},{"type":"table","data":{"content":[["<code class=\"inline-code\">element</code>","<i>HTMLElement</i>","Tooltip will be showed near this element"],["<code class=\"inline-code\">content</code>","<i>String</i> or <i>Node</i>","Content that will be appended to the Tooltip"],["<code class=\"inline-code\">options</code>","<i>Object</i>","Some displaying options, see below"]]}},{"type":"paragraph","data":{"text":"Available showing options"}},{"type":"header","data":{"text":"Options","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">placement</code>","<code><code class=\"inline-code\">top</code></code>,&nbsp;<code><code class=\"inline-code\">bottom</code></code>,&nbsp;<code><code class=\"inline-code\">left</code></code>,&nbsp;<code><code class=\"inline-code\">right</code></code>","Where to place the tooltip. Default value is <code class=\"inline-code\">bottom</code>"],["<code class=\"inline-code\">marginTop</code>","<i>Number</i>","Offset above the tooltip with&nbsp;<code><code class=\"inline-code\">top</code></code>&nbsp;placement"],["<code class=\"inline-code\">marginBottom</code>","<i>Number</i>","Offset below the tooltip with&nbsp;<code><code class=\"inline-code\">bottom</code></code>&nbsp;placement"],["<code class=\"inline-code\">marginLeft</code>","<i>Number</i>","Offset at left from the tooltip with&nbsp;<code><code class=\"inline-code\">left</code></code>&nbsp;placement"],["<code class=\"inline-code\">marginRight</code>","<i>Number</i>","Offset at right from the tooltip with&nbsp;<code><code class=\"inline-code\">right</code></code>&nbsp;placement"],["<code class=\"inline-code\">delay</code>","<i>Number</i>","Delay before showing, in ms. Default is&nbsp;<code><code class=\"inline-code\">70</code></code>"],["<code class=\"inline-code\">hidingDelay</code>","<i>Number</i>","Delay before hiding, in ms. Default is&nbsp;<code><code class=\"inline-code\">0</code></code>"]]}},{"type":"header","data":{"text":"Return value","level":3}},{"type":"paragraph","data":{"text":"This method does not return anything."}},{"type":"header","data":{"text":"hide()","level":2}},{"type":"paragraph","data":{"text":"Method hides the Tooltip."}},{"type":"header","data":{"text":"Parametres","level":3}},{"type":"paragraph","data":{"text":"There are no parametres."}},{"type":"header","data":{"text":"Return value","level":3}},{"type":"paragraph","data":{"text":"This method does not return anything."}},{"type":"header","data":{"text":"onHover()","level":2}},{"type":"paragraph","data":{"text":"Decorator for showing tooltip near some element by <code class=\"inline-code\">mouseenter</code> and hide by <code class=\"inline-code\">mouseleave</code>."}},{"type":"code","data":{"code":"this.api.tooltip.onHover(element, content, options);"}},{"type":"header","data":{"text":"Parametres","level":3}},{"type":"paragraph","data":{"text":"Parameters are the same as in <a href=\"/tooltip-api#show\"><code class=\"inline-code\">show()</code></a> method"}},{"type":"header","data":{"text":"Return value","level":3}},{"type":"paragraph","data":{"text":"This method does not return anything."}}],"version":"2.16.0"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"orlFFDITY1oURrPc","title":"Blocks","uri":"blocks","body":{"time":1724086005517,"blocks":[{"id":"RiZ6abYWIo","type":"header","data":{"text":"Blocks","level":2}},{"id":"cWaU9OOygG","type":"paragraph","data":{"text":"Provides methods that allows manipulate with Blocks"}},{"id":"IXjIgqrm3n","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#clear\">clear</a>&nbsp;— removes all Blocks and creates new empty initial type Block"}},{"id":"gSBQmu4dNB","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#render\">render</a>&nbsp;— render with new content data"}},{"id":"LEEJZkVjML","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#delete\">delete</a>&nbsp;— removes Block by index"}},{"id":"dxPiZPlZIn","type":"paragraph","data":{"text":"s<a href=\"https://editorjs.io/blocks#swap\">wap</a>&nbsp;— <i>deprecated</i> swaps two Blocks with passed indexes"}},{"id":"QUr_IHHNyA","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#move\">move</a>&nbsp;— move a block from position to another"}},{"id":"aoA7v3226e","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#getbyid\">getById</a> — returns Block API for Block instance by Block Id"}},{"id":"DJYtVJzuC9","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#getblockbyindex\">getBlockByIndex</a>&nbsp;— returns Block API for Block instance by index"}},{"id":"c1Vxt5PDbO","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#getcurrentblockindex\">getCurrentBlockIndex</a> — returns focused Block index"}},{"id":"8l-meNyLJw","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#getblockscount\">getBlocksCount</a>&nbsp;— returns number of rendered Blocks"}},{"id":"jUmW27Srt7","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#stretchblock\">stretchBlock</a>&nbsp;— stretch Block's content"}},{"id":"4MOEQvF1Xx","type":"paragraph","data":{"text":"<a href=\"https://editorjs.io/blocks#insert\">insert</a>&nbsp;— inserts new Block"}},{"id":"YzeN-ra6H-","type":"paragraph","data":{"text":"<a href=\"#update\">update</a> — updates Block data by its id"}},{"id":"lvI7f18kwu","type":"paragraph","data":{"text":"<a href=\"#composeblockdata\">composeBlockData</a> — Creates data of an empty block with a passed type"}},{"id":"ef6tN8zPeZ","type":"paragraph","data":{"text":"<a href=\"#getblockbyelement\">getBlockByElement</a> — Returns Block API object by any child html element"}},{"id":"H84VZo66pj","type":"header","data":{"text":"Clear","level":2}},{"id":"rk9lWOfnwX","type":"paragraph","data":{"text":"Clears Editor's content. Method removes all Blocks and inserts new initial empty Block"}},{"id":"eR7mQjgGzJ","type":"header","data":{"text":"Parameters","level":4}},{"id":"7SfEflK2xA","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"ZVJbNVFXqC","type":"header","data":{"text":"Return value","level":4}},{"id":"vcFkocaMoc","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"zvnYYub5RR","type":"code","data":{"code":"clear(): void"}},{"id":"a3dHdNsKmC","type":"header","data":{"text":"Example","level":4}},{"id":"3Ogf9gwae_","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  myMethod() {\n    this.api.blocks.clear(); // remove all Blocks\n  }\n  // ... other methods\n}"}},{"id":"gEk31Z03cT","type":"warning","data":{"title":"Note.","message":"Method has a <a href=\"https://editorjs.io/api#shorthands\">shorthand</a>"}},{"id":"CWVyMS_EvT","type":"header","data":{"text":"Render","level":2}},{"id":"_019kRNiy8","type":"paragraph","data":{"text":"Method removes all Blocks and fills with new passed JSON data"}},{"id":"kasBcjMe0T","type":"header","data":{"text":"Parameters","level":4}},{"id":"_xlOuXuO4O","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">OutputData</code>","Data that have the same format as output data of Editor.js"]]}},{"id":"ZI6pYIMsmO","type":"header","data":{"text":"Return value","level":4}},{"id":"DRvsDpQzm2","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Promise&lt;void&gt;</code>","Returns nothing but allows to continue sequence"]]}},{"id":"GhKEAd4QpB","type":"code","data":{"code":"render(data: OutputData): Promise<void> "}},{"id":"tePln6UsLx","type":"header","data":{"text":"Example","level":4}},{"id":"YLJXFBBm8h","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  refreshContent() {\n    this.api.blocks.render({\n      blocks: [\n        {\n          type: \"image\",\n          data: {\n            url: \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n          }\n        },\n        {\n          type: \"header\",\n          data: {\n             text: \"New header\",\n             level: 2\n          }\n        }\n      ]\n    });\n  }\n  // ... other methods\n}"}},{"id":"M3GoIcIvi0","type":"warning","data":{"title":"Note.","message":"Method has a <a href=\"https://editorjs.io/api#shorthands\">shorthand</a>"}},{"id":"O4AJx_ca5C","type":"header","data":{"text":"Delete","level":2}},{"id":"o8Kupxe2xQ","type":"paragraph","data":{"text":"Method removes Block with index. If index is not passed, current Block will be removed"}},{"id":"gT0PLrlpRu","type":"header","data":{"text":"Parameters","level":4}},{"id":"Am2KQDS7WY","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","index of Block that needs to be deleted"]]}},{"id":"zhS438q_ky","type":"header","data":{"text":"Return value","level":4}},{"id":"kMryvYkagG","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"M3NYFjiqU6","type":"code","data":{"code":"delete(index?: number): void"}},{"id":"S2Zpyj47OE","type":"paragraph","data":{"text":"Note that Blocks&nbsp;below will be shifted up"}},{"id":"Uwi6NPv-3q","type":"header","data":{"text":"Example","level":4}},{"id":"UHVm0rdITb","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  deleteSomeBlock() {\n    this.api.blocks.delete(2); // delete 3rd Block\n  }\n  // ... other methods\n}"}},{"id":"jBIJ-D1Pa1","type":"header","data":{"text":"Swap","level":2}},{"id":"Z2kzsedSYG","type":"warning","data":{"title":"Deprecated","message":"Please use <a href=\"https://editorjs.io/blocks#move\">move</a>&nbsp;instead"}},{"id":"pUJK_EZivd","type":"paragraph","data":{"text":"Method swaps two Blocks"}},{"id":"Jqk4jhoo2p","type":"header","data":{"text":"Parameters","level":4}},{"id":"KPKNmtDzdm","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","First Block index"],["<code class=\"inline-code\">Number</code>","Second Block index"]]}},{"id":"XAhqfDhQPt","type":"header","data":{"text":"Return value","level":4}},{"id":"tIc_4LTP_Q","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"hVtid8CyOc","type":"code","data":{"code":"swap(fromIndex: number, toIndex: number): void"}},{"id":"K53ctGrt7e","type":"header","data":{"text":"Example","level":4}},{"id":"yiKArlYSuj","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  changeBlockPositions() {\n    this.api.blocks.swap(1, 2); // swap 1 and 2 Blocks\n  }\n  // ... other methods\n}"}},{"id":"CX4c45v30i","type":"header","data":{"text":"move","level":2}},{"id":"_0BVhiQMpK","type":"paragraph","data":{"text":"The method moves block from the passed index to another one.&nbsp;"}},{"id":"zmgPlrn9DQ","type":"warning","data":{"title":"Note","message":"The first argument is the <code class=\"inline-code\">toIndex</code>, and the second is <code class=\"inline-code\">from</code>"}},{"id":"x-bN8zyPYv","type":"header","data":{"text":"Parameters","level":4}},{"id":"SzgnaP021v","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","Destination index"],["<code class=\"inline-code\">Number</code>","Index of Block to move. By default, it's the index of the current block."]]}},{"id":"oKVGTgIuwK","type":"header","data":{"text":"Return value","level":4}},{"id":"Jxvikikz0v","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"tPYdJztFAp","type":"code","data":{"code":"move(toIndex: number, fromIndex?: number): void"}},{"id":"PPRNY3cXTo","type":"header","data":{"text":"Example","level":4}},{"id":"OcxtAslFAK","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  moveBlockToTop() {\n    this.api.blocks.move(0); // move current Block to the fisrt place\n  }\n  // ... other methods\n}"}},{"id":"BXQRX2qVnQ","type":"header","data":{"text":"getById","level":2}},{"id":"9sMTeP6its","type":"paragraph","data":{"text":"Returns BlockAPI object by Block id"}},{"id":"JTMMDLLvBy","type":"header","data":{"text":"Parameters","level":4}},{"id":"4prJOwVFZ9","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">String</code>","Id of Block that will be returned"]]}},{"id":"FuUr41U4hi","type":"header","data":{"text":"Return value","level":4}},{"id":"aUltGLovqa","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/blockapi\"><code class=\"inline-code\">BlockAPI</code></a>","Block API object for Block instance"]]}},{"id":"zbnzmSaU33","type":"code","data":{"code":"getById(id: string): BlockAPI"}},{"id":"GKEoJ6ZdLQ","type":"header","data":{"text":"Example","level":4}},{"id":"gQFUdrmf16","type":"code","data":{"code":"const editor = new EditorJS({\n // ... configuration\n})\n\neditor.blocks.getById('1sYMhUrznu'); // get Block with id \"1sYMhUrznu\"\n"}},{"id":"DZPLPdAvov","type":"header","data":{"text":"getBlockByIndex","level":2}},{"id":"MncgNTW9B6","type":"paragraph","data":{"text":"Method returns Block HTML content by index"}},{"id":"N4XH-yFtbR","type":"header","data":{"text":"Parameters","level":4}},{"id":"UnD-Q3-0LW","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","Index of Block that will be returned"]]}},{"id":"JDaEhyk-12","type":"header","data":{"text":"Return value","level":4}},{"id":"8RdNo9W2dc","type":"table","data":{"withHeadings":false,"content":[["<a href=\"https://editorjs.io/blockapi\"><code class=\"inline-code\">BlockAPI</code></a>","Block API object for Block instance"]]}},{"id":"qmqHKi-0cs","type":"code","data":{"code":"getBlockByIndex(index: number): BlockAPI"}},{"id":"IWZI_g_4Pa","type":"header","data":{"text":"Example","level":4}},{"id":"5JewLjVwuS","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  myMethod() {\n    this.api.blocks.getBlockByIndex(1); // get first Block contents\n  }\n  // ... other methods\n}"}},{"id":"JG8BIrM2LM","type":"header","data":{"text":"getCurrentBlockIndex","level":2}},{"id":"a0o9bdYsFG","type":"paragraph","data":{"text":"Method returns index of current Block"}},{"id":"0HQWNGX_DQ","type":"header","data":{"text":"Parameters","level":4}},{"id":"_AGUY7uEuN","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"4lWXRRdGAD","type":"header","data":{"text":"Return value","level":4}},{"id":"E8EAHisU8T","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","Index of currently focused Block"]]}},{"id":"6ZWfwjMmFL","type":"code","data":{"code":"getCurrentBlockIndex(): number"}},{"id":"OFBYWuD1sc","type":"header","data":{"text":"Example","level":4}},{"id":"YMU52gAfyT","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  isFirstBlock() {\n    return this.api.blocks.getCurrentBlockIndex() === 0;\n  }\n  // ... other methods\n}"}},{"id":"EApHueQbq_","type":"header","data":{"text":"getBlocksCount","level":2}},{"id":"GTsK35YenZ","type":"paragraph","data":{"text":"Method returns number of Blocks"}},{"id":"66lhP9cx6Q","type":"header","data":{"text":"Parameters","level":4}},{"id":"8Ehrk9zqUM","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"tlFi4IlVMj","type":"header","data":{"text":"Return value","level":4}},{"id":"yeMVXrVK0I","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","Count of rendered Blocks"]]}},{"id":"oh6BeR9iAR","type":"code","data":{"code":"getBlocksCount(): number"}},{"id":"yYRqNJ35XG","type":"header","data":{"text":"Example","level":4}},{"id":"q8UXFjMUSM","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  isLastBlock() {\n    return this.api.blocks.getCurrentBlockIndex() === this.api.blocks.getBlocksCount() - 1;\n  }\n  // ... other methods\n}"}},{"id":"pBtm5XTi6t","type":"header","data":{"text":"stretchBlock","level":2}},{"id":"o_Kc7urXTN","type":"paragraph","data":{"text":"Method allow Plugins to use 100% space of Block content. For example, to stretch images"}},{"id":"BTDS1vb4rR","type":"header","data":{"text":"Parameters","level":4}},{"id":"eu4BUYFCfv","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Number</code>","index of Block that will be full-width"],["<code class=\"inline-code\">Boolean</code>","state of stretching"]]}},{"id":"qe3xmjGBwN","type":"header","data":{"text":"Return value","level":4}},{"id":"OJJXejN-UQ","type":"code","data":{"code":"stretchBlock(index: number, status: boolean = true): void"}},{"id":"YCqSTp2PAu","type":"header","data":{"text":"Example","level":4}},{"id":"RdwMvvBo0o","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  stretchMyImage() {\n    this.api.blocks.stretchBlock(1, true);\n  }\n  // ... other methods\n}"}},{"id":"u4pEj6f8_w","type":"header","data":{"text":"insert","level":2}},{"id":"D8RCFAaHoy","type":"paragraph","data":{"text":"Method inserts new Block with pasted type and data."}},{"id":"R43Miz57aN","type":"header","data":{"text":"Parameters","level":4}},{"id":"-J0g0Vg1fa","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">String</code>","New Block type&nbsp;"],["<code class=\"inline-code\">Object</code>","New Block data"],["<code class=\"inline-code\">Object</code>","Config for new Block's Tool"],["<code class=\"inline-code\">Number</code>","Position for block. By default, it will inserted after current Block"],["<code class=\"inline-code\">Boolean</code>","Need to set focus or not."]]}},{"id":"xsug_ilHEQ","type":"header","data":{"text":"Return value","level":4}},{"id":"gMVWsmSC-X","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"Ht606nZTtq","type":"code","data":{"code":"insert(type?: string, data?: BlockToolData, config?: ToolConfig, index?: number, needToFocus?: boolean): void"}},{"id":"fOEKeqrQwI","type":"header","data":{"text":"insertNewBlock","level":2}},{"id":"_L_xhiv3k6","type":"paragraph","data":{"text":"Method inserts new Block after focused Block and sets new focus"}},{"id":"v8hU-AlDOw","type":"warning","data":{"title":"Deprecated","message":"This method will be removed with next major release. Use <a href=\"https://editorjs.io/blocks#insert\"><code class=\"inline-code\">insert()</code></a> instead"}},{"id":"kJKcmrIIuc","type":"header","data":{"text":"Parameters","level":4}},{"id":"tram4thLzr","type":"paragraph","data":{"text":"This method has no arguments"}},{"id":"KyfCUKk5_q","type":"header","data":{"text":"Return value","level":4}},{"id":"Nj5FsJNRW-","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"schG19GsjG","type":"code","data":{"code":"insertNewBlock(): void"}},{"id":"gcfAPemowS","type":"header","data":{"text":"Example","level":4}},{"id":"LTeUZ5ELfE","type":"code","data":{"code":"class MyTool {\n  constructor({data, api}){\n    this.api = api;\n    // ...\n  }\n\n  myMethod() {\n    this.api.blocks.insertNewBlock();\n  }\n  // ... other methods\n}"}},{"id":"qajZaCxfri","type":"header","data":{"text":"update","level":2}},{"id":"TkC1NWp4st","type":"paragraph","data":{"text":"Method updates a Block data by its id"}},{"id":"m1Wsms9sck","type":"header","data":{"text":"Parameters","level":4}},{"id":"0jNnFwP-AJ","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">String</code>","Id of the Block to update"],["<code class=\"inline-code\">Object</code>","The new data for a Block"]]}},{"id":"Rc0oE-9TTa","type":"header","data":{"text":"Return value","level":4}},{"id":"gqgrXhwz4q","type":"paragraph","data":{"text":"Method does not return anything"}},{"id":"6jJwMPtxfx","type":"code","data":{"code":"update(id?: string, data?: BlockToolData): void"}},{"id":"z1qLHmh59p","type":"header","data":{"text":"composeBlockData","level":2}},{"id":"YRzyampzQP","type":"paragraph","data":{"text":"The method creates data of an empty block with a passed type."}},{"id":"J5i7e0kY3E","type":"header","data":{"text":"Parameters","level":4}},{"id":"tJr9WfwpAd","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">String</code>","Block Tool name"]]}},{"id":"2cEFpJePnq","type":"header","data":{"text":"Return value","level":4}},{"id":"qBXuBHwEIz","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">Promise&lt;BlockToolData&gt;</code>","Object with Tool output data"]]}},{"id":"5YdVr0Qkb2","type":"code","data":{"code":"composeBlockData(toolName: string): Promise<BlockToolData>"}},{"id":"4JZTA1qhQK","type":"header","data":{"text":"Example","level":4}},{"id":"Fp8Rqse5kq","type":"code","data":{"code":"/**\n * Merge real tool's data with data overrides\n */\nconst toolName = 'myTool';\nconst defaultBlockData = await this.api.blocks.composeBlockData(toolName);\nconst blockDataOverrides = {someProp: 'someValue'};\nconst blockData = Object.assign(defaultBlockData, blockDataOverrides);\n\nconst newBlock = this.api.blocks.insert(\n      toolName,\n      blockData,\n      undefined,\n      index,\n      undefined,\n      false,\n);"}},{"id":"6C78hBuxwG","type":"header","data":{"text":"getBlockByElement","level":2}},{"id":"QHVNy47YWD","type":"paragraph","data":{"text":"Returns Block API object by any child html element.&nbsp;"}},{"id":"4R3jBpHjsN","type":"header","data":{"text":"Parameters","level":4}},{"id":"siOhnmloNE","type":"table","data":{"withHeadings":false,"content":[["<code class=\"inline-code\">HTMLElement</code>","html element"]]}},{"id":"zyayCgGGgT","type":"header","data":{"text":"Return value","level":4}},{"id":"szzxTc5VeA","type":"table","data":{"withHeadings":false,"content":[["<a href=\"/blockapi\"><code class=\"inline-code\">BlockAPI</code></a>","API of the block associated with specified&nbsp; HTML element"]]}}],"version":"2.25.0"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"pgsFsV5bZEXtv7mu","title":"Configuration","uri":"configuration","body":{"time":1666961922065,"blocks":[{"type":"header","data":{"text":"Configuration","level":2}},{"type":"paragraph","data":{"text":"This page contains guide for Editor.js tunings."}},{"type":"warning","data":{"title":"Tip","message":"The most actual list of available configuration properties — see&nbsp;<a href=\"https://github.com/codex-team/editor.js/blob/next/types/configs/editor-config.d.ts\">here</a>."}},{"type":"header","data":{"text":"Passing saved data","level":2}},{"type":"paragraph","data":{"text":"To initialize the Editor with previously saved data, pass it through the <code class=\"inline-code\">data</code>&nbsp;property:"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  /**\n   * Id of Element that should contain the Editor\n   */\n  holderId : 'editorjs',\n\n  /**\n   * Available Tools list.\n   * Pass Tool's class or Settings object for each Tool you want to use\n   */\n  tools: {\n    header: {\n      class: Header,\n      inlineToolbar : true\n    },\n    // ...\n  },\n\n  /**\n   * Previously saved data that should be rendered\n   */\n  data: {}\n});"}},{"type":"paragraph","data":{"text":"Format of the <code class=\"inline-code\">data</code> object should be the same as returned by Editor saving."}},{"type":"header","data":{"text":"Editor ready callback","level":2}},{"type":"paragraph","data":{"text":"Editor.js needs a bit time to initialize. It is an asynchronous action so it won't block execution of your main script."}},{"type":"paragraph","data":{"text":"If you need to know when editor instance is ready you can use one of the following ways:"}},{"type":"header","data":{"text":"Pass&nbsp;onReady&nbsp;property to the configuration object","level":4}},{"type":"paragraph","data":{"text":"It must be a function:"}},{"type":"code","data":{"code":"var editor = new EditorJS({\n   // Other configuration properties\n\n   /**\n    * onReady callback\n    */\n   onReady: () => {\n      console.log('Editor.js is ready to work!')\n   }\n});"}},{"type":"header","data":{"text":"Use&nbsp;isReady&nbsp;promise","level":4}},{"type":"paragraph","data":{"text":"After you create a new&nbsp;<code><code class=\"inline-code\">EditorJS</code></code>&nbsp;object, it will contain&nbsp;<code><code class=\"inline-code\">isReady</code></code>&nbsp;property. It is a Promise object that will be resolved when the Editor is ready for work and rejected otherwise. If there is an error during initialization the&nbsp;<code><code class=\"inline-code\">isReady</code></code>&nbsp;promise will be rejected with an error message."}},{"type":"code","data":{"code":"var editor = new EditorJS();\n\neditor.isReady\n  .then(() => {\n    console.log('Editor.js is ready to work!')\n    /** Do anything you need after editor initialization */\n  })\n  .catch((reason) => {\n    console.log(`Editor.js initialization failed because of ${reason}`)\n  });"}},{"type":"paragraph","data":{"text":"You can use&nbsp;<code><code class=\"inline-code\">async/await</code></code>&nbsp;to keep your code looking more clear:"}},{"type":"code","data":{"code":"var editor = new EditorJS();\n\ntry {\n  await editor.isReady;\n  console.log('Editor.js is ready to work!')\n  /** Do anything you need after editor initialization */\n} catch (reason) {\n  console.log(`Editor.js initialization failed because of ${reason}`)\n}"}},{"type":"header","data":{"text":"Editor modifications callback","level":2}},{"type":"paragraph","data":{"text":"Similar to <code class=\"inline-code\">onReady</code> callback, you can use the&nbsp;<code class=\"inline-code\">onChange</code> callback to handle any modifications inside the Editor:"}},{"type":"code","data":{"code":"var editor = new EditorJS({\n   // Other configuration properties\n\n   /**\n    * onReady callback\n    */\n   onReady: () => {console.log('Editor.js is ready to work!')},\n   \n   /**\n    * onChange callback\n    */\n   onChange: (api, event) => {\n     console.log('Now I know that Editor\\'s content changed!', event)\n   }\n});"}},{"type":"paragraph","data":{"text":"The editor's <code class=\"inline-code\">onChange</code> callback accepts <code class=\"inline-code\">CustomEvent</code> describing what happened with the Block. (<mark class=\"cdx-marker\">Available since 2.23.0</mark>)"}},{"type":"paragraph","data":{"text":"This <code class=\"inline-code\">CustomEvent</code> has:"}},{"type":"table","data":{"content":[["<code class=\"inline-code\">type</code>","string","Mutation type (<code class=\"inline-code\">Added</code>, <code class=\"inline-code\">Removed</code>, <code class=\"inline-code\">Moved</code>, <code class=\"inline-code\">Changed</code>)"],["<code class=\"inline-code\">details.target</code>","BlockAPI","changed Block API"],["<code class=\"inline-code\">details.*</code>","any","Additional data"]]}},{"type":"header","data":{"text":"Change the default Block","level":2}},{"type":"paragraph","data":{"text":"By default, Editor.js contains Paragraph Block included in a bundle. This Block is called «default»: it will be appended after <code class=\"inline-code\">Enter</code> key pressing and with an empty Editor. Also, it accepts <a href=\"https://editorjs.io/paste-substitutions\">paste patterns</a> that allow rendering other Blocks by pasted URLs."}},{"type":"paragraph","data":{"text":"There is the ability to change the default Block for your own. Use the&nbsp;<code class=\"inline-code\">defaultBlock</code> option for this:"}},{"type":"code","data":{"code":"import MyParagraph from 'my-paragraph.js';\n\nconst editor = new EditorJS({\n\n  /**\n   * Available Tools list.\n   */\n  tools: {\n    myOwnParagraph: MyParagraph\n  },\n\n  /**\n   * This Tool will be used as default \n   */\n  defaultBlock: 'myOwnParagraph'\n})"}},{"type":"paragraph","data":{"text":"The name of the default Block should be equal to one of Tool`s keys passed by <code class=\"inline-code\">tools</code> option."}},{"type":"header","data":{"text":"Autofocus","level":2}},{"type":"paragraph","data":{"text":"Pass <code class=\"inline-code\">autofocus</code> option if you want to set a Caret to the Editor after initialization:"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n\n  // other configuration options\n\n  /**\n   * Enable autofocus\n   */ \n  autofocus: true\n})"}},{"type":"header","data":{"text":"Placeholder","level":2}},{"type":"paragraph","data":{"text":"Pass the&nbsp;<code class=\"inline-code\">placeholder</code> option if you want to set a custom placeholder:"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  ...\n  \n  placeholder: 'Let`s write an awesome story!'\n\n  ...\n});"}},{"type":"warning","data":{"title":"Note.","message":"If you are using custom Initial Block, `placeholder` property is passed in `config` object to your Tool constructor"}},{"type":"header","data":{"text":"Log level","level":2}},{"type":"paragraph","data":{"text":"The editor outputs some information to the console. You can configure how much information you want to see. You can provide log level via <code class=\"inline-code\">logLevel</code> property:"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  ...\n  \n  logLevel: 'ERROR'\n\n  ...\n});"}},{"type":"paragraph","data":{"text":"Here is available levels:"}},{"type":"table","data":{"content":[["<b>Value</b>","<b>Description</b>"],["<code class=\"inline-code\">VERBOSE</code>","Show all messages (default)"],["<code class=\"inline-code\">INFO</code>","Show info and debug messages"],["<code class=\"inline-code\">WARN</code>","Show only warn messages"],["<code class=\"inline-code\">ERROR</code>","Show only error messages"]]}},{"type":"header","data":{"text":"Internationalization","level":2}},{"type":"paragraph","data":{"text":"Editor.js provides an API for Internationalization that allows localizing all UI texts of the editor's core and plugins."}},{"type":"paragraph","data":{"text":"To create localization of the editor.js you need to provide the &nbsp;<code class=\"inline-code\">i18n</code> option with the &nbsp;<code class=\"inline-code\">messages</code> dictionary. The <code class=\"inline-code\">messages</code>&nbsp;object should contain the <code class=\"inline-code\">ui</code>, <code class=\"inline-code\">toolNames</code>, <code class=\"inline-code\">tools</code> and the &nbsp;<code class=\"inline-code\">blockTunes</code> sections."}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  ...\n  \n  i18n: {\n    messages: {\n      ui: {\n        // Translations of internal UI components of the editor.js core\n      },\n      toolNames: {\n        // Section for translation Tool Names: both block and inline tools\n      },\n      tools: {\n        // Section for passing translations to the external tools classes\n        // The first-level keys of this object should be equal of keys ot the 'tools' property of EditorConfig\n      },\n      blockTunes: {\n        // Section allows to translate Block Tunes\n      },\n    }\n  }\n\n  ...\n});"}},{"type":"paragraph","data":{"text":"See detailed description of the i18n config here:&nbsp;<a href=\"https://editorjs.io/internationalization\">https://editorjs.io/internationalization</a>"}},{"type":"header","data":{"text":"Read-Only mode","level":2}},{"type":"paragraph","data":{"text":"Since the 2.19.0 version, Editor.js can be initialized in the read-only mode. That means that users won't have the ability to change the document content."}},{"type":"paragraph","data":{"text":"To initialize this mode, pass the <code class=\"inline-code\">readOnly: true</code> option via Editor Config:"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  // ...\n  \n  readOnly: true,\n\n  // ...\n});"}},{"type":"paragraph","data":{"text":"You can also toggle the read-only mode on the fly using an API method:"}},{"type":"code","data":{"code":"const editor = new EditorJS();\n\neditor.readOnly.toggle();"}},{"type":"warning","data":{"title":"Important","message":"Each of the Block Tools you use MUST support the read-only mode to enable this mode in the editor."}},{"type":"header","data":{"text":"Inline Toolbar order","level":2}},{"type":"paragraph","data":{"text":"You can specify the common order of Inline tools using the <code class=\"inline-code\">inlineToolbar</code> property."}},{"type":"paragraph","data":{"text":"The common <code class=\"inline-code\">inlineToolbar</code> property can be overridden by the tool's <a href=\"https://editorjs.io/enable-inline-toolbar#enable-inline-toolbar\"><code class=\"inline-code\">inlineToolbar</code></a> property.&nbsp;"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  // ...\n  \n  /**\n   * Common Inline Toolbar settings\n   * - if true (or not specified), the order from 'tool' property will be used (default)\n   * - if an array of tool names, this order will be used\n   */\n  inlineToolbar: ['link', 'marker', 'bold', 'italic'],\n  // inlineToolbar: true,\n\n  /**\n   * Tools list\n   */\n  tools: {\n    header: {\n      class: Header,\n      /**\n       * This property will override the common settings\n       * That means that this tool will have only Marker and Link inline tools\n       * If 'true', the common settings will be used.\n       * If 'false' or omitted, the Inline Toolbar wont be shown\n       */\n      inlineToolbar: ['marker', 'link'],\n      config: {\n        placeholder: 'Header'\n      },\n      shortcut: 'CMD+SHIFT+H'\n    },\n  }\n});"}},{"type":"header","data":{"text":"Block Tunes connection","level":2}},{"type":"paragraph","data":{"text":"If you have connected any <a href=\"https://editorjs.io/block-tunes-api\">Block Tunes</a>, you need to specify them in <code class=\"inline-code\">tunes</code> property"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  tools: {\n    myTune: MyTune\n  },\n  tunes: ['myTune']\n});"}},{"type":"paragraph","data":{"text":"If you want to enable Tune for particular Tool you can specify it in Tool configuration:"}},{"type":"code","data":{"code":"const editor = new EditorJS({\n  tools: {\n    myTune: MyTune,\n    blockTool: {\n      class: MyBlockTool,\n      tunes: ['myTune']\n    }\n  }\n});"}}],"version":"2.19.0"},"parent":"tNfI7Y8IaRlvvCcF"}
{"_id":"pmTmcXXa4HJ1CgA3","title":"The first plugin","uri":"the-first-plugin","body":{"time":1643706257712,"blocks":[{"type":"header","data":{"text":"The first plugin","level":2}},{"type":"paragraph","data":{"text":"We'll build the&nbsp;<i>Simple Image</i> plugin that will allow us to add images to our articles. You can view <a href=\"https://github.com/editor-js/simple-image-tutorial\">the final result of the plugin</a>."}},{"type":"header","data":{"text":"Preparation of a playground","level":2}},{"type":"paragraph","data":{"text":"At first, we need to create some files where we will develop and test our new Tool. Create a folder with these three files:"}},{"type":"code","data":{"code":"/simple-image\n ├╴ simple-image.js\n ├╴ simple-image.css\n └╴ example.html"}},{"type":"paragraph","data":{"text":"In <i>example.html</i> we will test our plugin, so let's add some markup and connect Editor.js there:"}},{"type":"code","data":{"code":"<script src=\"https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest\"></script>\n<script src=\"simple-image.js\"></script>\n<link href=\"simple-image.css\" rel=\"stylesheet\"/>\n\n<div id=\"editorjs\"></div>\n\n<script>\n    const editor = new EditorJS({\n      autofocus: true\n    });\n</script>"}},{"type":"paragraph","data":{"text":"If you open this page in a browser, you'll see an empty Editor with the only internal <i>Paragraph Tool</i> available. Now we a ready to start creating our own plugin."}},{"type":"header","data":{"text":"Render and Save","level":2}},{"type":"paragraph","data":{"text":"Ok, let's get started with creating a JavaScript class for our Tool in <i>simple-image.js </i>file."}},{"type":"code","data":{"code":"class SimpleImage {\n\n}"}},{"type":"paragraph","data":{"text":"We need at least of two methods to create a <i>Block Tool</i> for Editor.js — <a href=\"/tools-api#render\"><code class=\"inline-code\">render</code></a> and <a href=\"/tools-api#save\"><code class=\"inline-code\">save</code></a>. "}},{"type":"paragraph","data":{"text":"The&nbsp;<mark class=\"cdx-marker\"><i>render </i>method&nbsp;will create a UI</mark>&nbsp;of a Block that will be appended when our Tool will be selected from the Toolbox. The second method, <mark class=\"cdx-marker\"><i>save</i>&nbsp;will extract the Block's data from that UI</mark>."}},{"type":"paragraph","data":{"text":"Our UI will be quite simple: just an input in which users will paste an image URL. So let's implement a <code class=\"inline-code\">render</code> method:"}},{"type":"code","data":{"code":"class SimpleImage {\n  render(){\n    return document.createElement('input');\n  }\n}"}},{"type":"paragraph","data":{"text":"Then we need to provide a <code class=\"inline-code\">save</code> method for extracting a Block data from the UI:"}},{"type":"code","data":{"code":"class SimpleImage {\n  render(){\n    return document.createElement('input');\n  }\n\n  save(blockContent){\n    return {\n      url: blockContent.value\n    }\n  }\n}"}},{"type":"paragraph","data":{"text":"On saving, Editor.js will pass <i>Block'</i><i>s content</i> to the <code class=\"inline-code\">save</code> method and we should implement the logic of which data we should save by our Tool. <i>Block content</i> is the Element returned by <code class=\"inline-code\">render</code> with actual state of that. "}},{"type":"paragraph","data":{"text":"So in our case, we just need to get input's value and return our Tool's data object:"}},{"type":"code","data":{"code":"{\n  url: '//pasted-image-url.png'\n}"}},{"type":"paragraph","data":{"text":"We will add a «<i>caption»</i> and other fields to our Block later."}},{"type":"header","data":{"text":"Displaying at the Toolbox","level":2}},{"type":"paragraph","data":{"text":"Our Block Plugin is almost done. To make that appear at the <i>Toolbox</i>, we should provide an <code class=\"inline-code\">icon</code> and a <code class=\"inline-code\">title</code> with a static getter <code class=\"inline-code\">toolbox</code>."}},{"type":"code","data":{"code":"class SimpleImage {\n  static get toolbox() {\n    return {\n      title: 'Image',\n      icon: '<svg width=\"17\" height=\"15\" viewBox=\"0 0 336 276\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M291 150V79c0-19-15-34-34-34H79c-19 0-34 15-34 34v42l67-44 81 72 56-29 42 30zm0 52l-43-30-56 30-81-67-66 39v23c0 19 15 34 34 34h178c17 0 31-13 34-29zM79 0h178c44 0 79 35 79 79v118c0 44-35 79-79 79H79c-44 0-79-35-79-79V79C0 35 35 0 79 0z\"/></svg>'\n    };\n  }\n\n  render(){\n    return document.createElement('input');\n  }\n\n  save(blockContent){\n    return {\n      url: blockContent.value\n    }\n  }\n}"}},{"type":"paragraph","data":{"text":"Our Tool is ready. It's time to&nbsp;connect it with the Editor."}},{"type":"header","data":{"text":"Connecting to the Editor","level":2}},{"type":"paragraph","data":{"text":"Let's add a <code class=\"inline-code\">tools</code> property to the configuration object at the <i>example.html</i>."}},{"type":"code","data":{"code":"<script>\n    const editor = new EditorJS({\n      autofocus: true,\n      tools: {\n        image: SimpleImage\n      }\n    });\n</script>"}},{"type":"paragraph","data":{"text":"Open <i>example.html</i> in a browser: if everything is fine, you will see a <i>Plus Button</i> of a <i>Toolbox</i>. Press <code class=\"inline-code\">Tab</code> or click on the <i>Plus Button</i> and our Tool will be there."}},{"type":"image","data":{"file":{"url":"/uploads/662675a178c5b8bbad7c54a6d67eee99.png","size":16631,"mime":"image/png"},"caption":"Our new Tool is ready to use. Icon and title got from the toolbox getter.","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"After you select an Image Tool, the <code class=\"inline-code\">render</code> will be called and returned input will be placed as a new Block. You can add some CSS classes to it and place styles at <i>simple-image.css</i> file."}},{"type":"header","data":{"text":"Testing the save method","level":2}},{"type":"paragraph","data":{"text":"To the final test, we need to check how saving method works. Add a Save-button and output-zone to the example.html"}},{"type":"code","data":{"code":"<script src=\"https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest\"></script>\n<script src=\"simple-image.js\"></script>\n<link href=\"simple-image.css\" rel=\"stylesheet\"/>\n\n<div id=\"editorjs\"></div>\n\n<button id=\"save-button\">Save</button>\n<pre id=\"output\"></pre>\n\n<script>\n    const editor = new EditorJS({\n      autofocus: true,\n      tools: {\n        image: SimpleImage\n      }\n    });\n\n    const saveButton = document.getElementById('save-button');\n    const output = document.getElementById('output');\n\n    saveButton.addEventListener('click', () => {\n      editor.save().then( savedData => {\n        output.innerHTML = JSON.stringify(savedData, null, 4);\n      })\n    })\n</script>"}},{"type":"paragraph","data":{"text":"Now everything is ready. You can add Image Block at Editor, paste image URL and click on the Save button. In output zone you will see saved Editor.js data:"}},{"type":"code","data":{"code":"{\n    \"time\": 1552744582955,\n    \"blocks\": [\n        {\n            \"type\": \"image\",\n            \"data\": {\n                \"url\": \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n            }\n        }\n    ],\n    \"version\": \"2.11.10\"\n}"}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"We've created some preparation stuff for our playground, but actually all you need to create a Block Tool plugin is the simplest&nbsp;<code class=\"inline-code\">save</code> and <code class=\"inline-code\">render</code> methods. If you want to put your Tool in Toolbox, static getter <code class=\"inline-code\">toolbox</code> with the&nbsp;<code class=\"inline-code\">icon</code> and the&nbsp;<code class=\"inline-code\">title</code> allows you to do that.&nbsp;"}},{"type":"paragraph","data":{"text":"In the next chapter, we'll learn <a href=\"/fill-block-with-saved-data\">how to show previously saved data of our tool</a>."}}],"version":"2.19.0"},"parent":"q9RwTn68MBx0S1w0"}
{"_id":"q9RwTn68MBx0S1w0","title":"Creating a Block Tool","uri":"creating-a-block-tool","body":{"time":1591341587280,"blocks":[{"type":"header","data":{"text":"Creating a Block Tool","level":2}},{"type":"paragraph","data":{"text":"One of the key features of Editor.js is the API that allows you to create any Tools for any specific tasks you need. "}},{"type":"paragraph","data":{"text":"In this series of articles, we will learn how to create a full-featured Block Tool step-by-step. We will consider all methods and abilities of <a href=\"/tools-api\">Tools API</a>."}},{"type":"paragraph","data":{"text":"Let's <a href=\"/the-first-plugin\">get started</a>."}}],"version":"2.16.0"},"parent":"0"}
{"_id":"sWBb35brRPCKtx1q","title":"Sanitizer","uri":"sanitizer","body":{"time":1591337754199,"blocks":[{"type":"header","data":{"text":"Sanitizer","level":2}},{"type":"paragraph","data":{"text":"The module provides build-in methods for cleaning unwanted HTML tags and attributes.&nbsp;"}},{"type":"header","data":{"text":"Available methods","level":2}},{"type":"table","data":{"content":[["<a href=\"#clean\"><code class=\"inline-code\">clean</code></a>","Clean up passed string with specified rules"]]}},{"type":"header","data":{"text":"Sanitizer rules configuration","level":2}},{"type":"paragraph","data":{"text":"The example of sanitizer configuration:"}},{"type":"code","data":{"code":"const sanitizerConfig = {\n  b: true, // leave <b>\n  p: {}, // leave <p> without attributes\n}"}},{"type":"paragraph","data":{"text":"<mark class=\"cdx-marker\">Keys of config object is <b>tags</b> and the values is <b>rules</b>.</mark>"}},{"type":"header","data":{"text":"Rule","level":3}},{"type":"paragraph","data":{"text":"Rule can be <code class=\"inline-code\">boolean</code>, <code class=\"inline-code\">object</code> or <code class=\"inline-code\">function</code>. "}},{"type":"table","data":{"content":[["<code class=\"inline-code\">boolean</code>","Pass <code class=\"inline-code\">true</code> to allow tag with all attributes, or <code class=\"inline-code\">false</code> to remove tag"],["<code class=\"inline-code\">object</code>","Leave tag and sanitize attributes. Keys of object is attributes and values is <b>rules</b>. Pass <code class=\"inline-code\">{}</code> to remove all attributes."],["<code class=\"inline-code\">function</code>","Custom function that accept Element and returns a <b>rule</b>."]]}},{"type":"header","data":{"text":"Examples","level":4}},{"type":"code","data":{"code":"// leave <a> with only \"href\" attribute\na: {\n  href: true\n}"}},{"type":"code","data":{"code":"// leave <a> without attributes\na: {}"}},{"type":"code","data":{"code":"// leave <b> if it does not contain 'bad text'\nb: function(el) {\n  return !el.textContent.includes('bad text')\n}"}},{"type":"code","data":{"code":"// leave <a> with 'href' and add 'target=\"_blank\"' for external links \na: function(el) {\n  const href = el.getAttribute('href')\n\n  if (href && href.substring(0, 4) === 'http') {\n    return {\n      href: true,\n      target: '_blank'\n    }\n  } else {\n    return {\n      href: true\n    }\n  }\n}"}},{"type":"warning","data":{"title":"Advice.","message":"Read more about configuration at the&nbsp;<a href=\"https://github.com/guardian/html-janitor\">html-janitor</a>&nbsp;page."}},{"type":"delimiter","data":{}},{"type":"header","data":{"text":"Clean","level":2}},{"type":"paragraph","data":{"text":"Perform sanitizing for passed HTML string with specified rules set."}},{"type":"header","data":{"text":"Parameters","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">String</code>","Taint HTML string to sanitise"],["<code class=\"inline-code\">Object</code>","Sanitizer rules"]]}},{"type":"header","data":{"text":"Return value","level":4}},{"type":"table","data":{"content":[["<code class=\"inline-code\">String</code>","Sanitized HTML string"]]}},{"type":"header","data":{"text":"Example","level":4}},{"type":"code","data":{"code":"const taintString = '<p>The <b style=\"color: red\">Sanitizer</b> <a href=\"https://editorjs.io/sanitizer\">module</a> represents a set of methods that clears taint strings.</p>';\nconst sanitizerConfig = {\n  b: {}, // leave <b> without any attributes\n  p: true, // leave <p> as is\n  a: {\n    href: true, // leave <a> with href\n    target: '_blank' // add 'target=\"_blank\"'\n  }\n}\n\n/**\n* Perform sanitizing\n*/\nconst cleanString = editor.sanitizer.clean(taintString, sanitizerConfing)\n"}}],"version":"2.16.0"},"parent":"kSWsM7nwP27PdfV0"}
{"_id":"shpf1m2PALnI9d1w","title":"Core development","uri":"core-development","body":{"time":1670081522575,"blocks":[{"type":"header","data":{"text":"Core development","level":2}},{"type":"paragraph","data":{"text":"If you want to help improve Editor.js, follow this guide to prepare the local environment and start building."}},{"type":"paragraph","data":{"text":"We have a special Telegram chat&nbsp;for core contributors where you can discuss any problems."}},{"type":"header","data":{"text":"Before starting","level":2}},{"type":"paragraph","data":{"text":"Make sure that you have installed <b>Node.js</b> environment and <b>Yarn</b> package manager. Otherwise, you should install them."}},{"type":"list","data":{"style":"unordered","items":["<a href=\"https://nodejs.org/en/download/\">Node.js downloads page</a>","<a href=\"https://yarnpkg.com/lang/en/docs/install/\">Yarn installation page</a>"]}},{"type":"paragraph","data":{"text":"You also need <b>Git</b> installed. Check out Atlassian's guide «<a href=\"https://www.atlassian.com/git/tutorials/install-git\">Install GIt</a>»."}},{"type":"header","data":{"text":"Clone the repository","level":2}},{"type":"paragraph","data":{"text":"Firstly you need to get sources. Clone the&nbsp;repository&nbsp;via the command line."}},{"type":"code","data":{"code":"git clone https://github.com/codex-team/editor.js"}},{"type":"paragraph","data":{"text":"Or use buttons on the <a href=\"https://github.com/codex-team/editor.js\">GitHub page</a>."}},{"type":"image","data":{"file":{"url":"/uploads/c48bb4cc34e375120b3e5bc69112235c.png","size":32087,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"Then go to the project's directory."}},{"type":"code","data":{"code":"cd editor.js/"}},{"type":"header","data":{"text":"Install dependencies","level":2}},{"type":"paragraph","data":{"text":"Get required dependencies by the following command."}},{"type":"code","data":{"code":"yarn install"}},{"type":"paragraph","data":{"text":"Then pull submodules."}},{"type":"code","data":{"code":"yarn pull_tools"}},{"type":"code","data":{"code":"yarn tools:update"}},{"type":"paragraph","data":{"text":"Ok, you are ready."}},{"type":"header","data":{"text":"Building","level":2}},{"type":"paragraph","data":{"text":"Use the following command to build Editor.js.&nbsp;"}},{"type":"code","data":{"code":"yarn build"}},{"type":"paragraph","data":{"text":"On local environment you can run build command in development mode with a watch flag. This way main bundle will be rebuilt on changes automatically."}},{"type":"code","data":{"code":"yarn build:dev"}},{"type":"header","data":{"text":"Testing","level":2}},{"type":"paragraph","data":{"text":"Open file <code class=\"inline-code\">example/example-dev.html</code>&nbsp;in browser. Editor and Tools will be loaded from local scripts."}},{"type":"image","data":{"file":{"url":"/uploads/159e275499e00ae3f855309e0de853e9.png","size":258875,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Icons adding / changing","level":2}},{"type":"paragraph","data":{"text":"In case of adding or changing editor icons, it is recommended to use 24x24 svg icon size with the path made by stroke (center, 2px). Such an icon should be decreased to 20x20 then."}},{"type":"paragraph","data":{"text":"Consider using the&nbsp;<a href=\"https://github.com/codex-team/icons\">CodeX Icons</a>&nbsp;pack to unify all tools icons."}},{"type":"image","data":{"file":{"url":"/uploads/7ba62f171c556003d694f881ca8a0541.png","size":578487,"mime":"image/png"},"caption":"","withBorder":false,"stretched":false,"withBackground":false}},{"type":"header","data":{"text":"Git conventions","level":2}},{"type":"paragraph","data":{"text":"To publish some changes to Editorjs, please follow these steps:"}},{"type":"list","data":{"style":"ordered","items":["Make sure you have created or found an Issue that describes a problem that you resolve.<br>","Create a branch for your changes. We recommend using a slash-separated <a href=\"https://leanpub.com/git-flow/read\">naming convention</a>.&nbsp;For example: <code class=\"inline-code\">hotfix/issue413-readme-changes</code> or <code class=\"inline-code\">feature/issue413-new-inline-toolbar-style</code>","Make your changes.","Commit your changes.","Open Pull Request to the&nbsp;<code class=\"inline-code\">next</code>&nbsp;branch.","In a PR's description, tell about changes you make and <a href=\"https://help.github.com/en/github/managing-your-work-on-github/closing-issues-using-keywords\">attach</a> corresponded issue."]}}],"version":"2.19.0"},"parent":"ztlMSRFcZ52QB4qp"}
{"_id":"tNfI7Y8IaRlvvCcF","title":"Base concepts","uri":"base-concepts","body":{"time":1644318782151,"blocks":[{"type":"header","data":{"text":"Base concepts","level":2}},{"type":"paragraph","data":{"text":"Editor.js is a block-style editor for rich media stories. It outputs clean data in JSON instead of heavy HTML markup. And more important thing is that Editor.js is designed to be API extendable and pluggable."}},{"type":"paragraph","data":{"text":"So there are a few key features:"}},{"type":"list","data":{"style":"ordered","items":["Clean data output","API pluggable","Open source"]}},{"type":"header","data":{"text":"What does it mean block-styled","level":2}},{"type":"paragraph","data":{"text":"In other editors, the workspace is provided by single <code class=\"inline-code\">contenteditable</code> element in where you can create different HTML markup. All of us saw permanent bugs with moving text fragments or scaling images, while page parts are jumping and twitches. Or highlighting big parts of the text in the case when you just want to make few words to be a heading or bold."}},{"type":"image","data":{"file":{"url":"/uploads/3a611b50e2643d83e0d5abf148c1d61f.mp4","size":1058734,"mime":"video/mp4"},"caption":"Bugs in popular editor. Try in yours.","withBorder":false,"stretched":false,"withBackground":false}},{"type":"paragraph","data":{"text":"The Editor.js workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc. Each of them is an independent <code class=\"inline-code\">contenteditable</code> element (or more complex structure) provided by Plugin and united by Editor's Core. "}},{"type":"paragraph","data":{"text":"At the same time, most useful features as arrow-navigation, copy &amp; paste, cross block selection, and others works almost as in the familiar editors."}},{"type":"header","data":{"text":"What is clean data","level":2}},{"type":"paragraph","data":{"text":"But the more interesting thing is, as mentioned above,  that Editor.js returns clean data instead of HTML-markup. Take a look at the example."}},{"type":"paragraph","data":{"text":"If our entry consists of few paragraphs and a heading, in popular Medium editor after saving we will have something like this:"}},{"type":"code","data":{"code":"<section name=\"0ed1\" class=\"section section--body section--first\">\n   <div class=\"section-divider\">\n      <hr class=\"section-divider\">\n   </div>\n   <div class=\"section-content\">\n      <div class=\"section-inner sectionLayout--insetColumn\">\n         <h3 name=\"f8e8\" class=\"graf graf--h3 graf--leading graf--title\">\n            <br>\n         </h3>\n         <p name=\"982b\" class=\"graf graf--p graf-after--h3\">\n            The example of text that was written in <strong class=\"markup--strong markup--p-strong\">one of popular</strong> text editors.\n         </p>\n         <h3 name=\"c2ad\" class=\"graf graf--h3 graf-after--p\">\n            With the header of course\n         </h3>\n         <p name=\"83d3\" class=\"graf graf--p graf-after--h3\">\n            So what do we have?\n         </p>\n      </div>\n   </div>\n</section>\n<section name=\"d1d2\" class=\"section section--body\">\n  ...\n</section>"}},{"type":"paragraph","data":{"text":"Let's compare with the same data returned by Editor.js:"}},{"type":"code","data":{"code":"{\n    \"time\" : 1550476186479,\n    \"blocks\" : [\n        {\n            \"type\" : \"paragraph\",\n            \"data\" : {\n                \"text\" : \"The example of text that was written in <b>one of popular</b> text editors.\"\n            }\n        },\n        {\n            \"type\" : \"header\",\n            \"data\" : {\n                \"text\" : \"With the header of course\",\n                \"level\" : 2\n            }\n        },\n        {\n            \"type\" : \"paragraph\",\n            \"data\" : {\n                \"text\" : \"So what do we have?\"\n            }\n        }\n    ],\n    \"version\" : \"2.8.1\"\n}"}},{"type":"paragraph","data":{"text":"As you can see, there are only data we need: a list of structural Blocks with their content description."}},{"type":"paragraph","data":{"text":"You can use this data to <mark class=\"cdx-marker\">easily render in Web, native mobile/desktop application, pass to Audio Readers, create templates for Facebook Instant Articles, AMP, RSS, create chat-bots, and many others</mark>."}},{"type":"paragraph","data":{"text":"Also, the clean data can be useful for backend processing: sanitizing, validation, injecting an advertising or other stuff, extracting Headings, make covers for social networks from Image Blocks, and other."}},{"type":"header","data":{"text":"API pluggable?","level":2}},{"type":"paragraph","data":{"text":"A key value of the Editor is the API. All main functional units of the editor — Blocks, Inline Formatting Tools, Block Tunes — are provided by external plugins that use Editor's API."}},{"type":"paragraph","data":{"text":"We decide to extract all these Tools to separate scripts to make Editor's Core more abstract and make API more powerful. Any challenges and tasks you are facing can be implemented by your own plugins using the API.&nbsp;"}},{"type":"paragraph","data":{"text":"At the same time, API is created to be easy-to-understand and simple-to-use."}},{"type":"header","data":{"text":"Open Source, so?","level":2}},{"type":"paragraph","data":{"text":"Editor.js is more than just an editor. It is a big open-source community of developers and contributors. Anyone can suggest an improvement or a bug fix. Anyone can create new cool API features and plugins."}},{"type":"paragraph","data":{"text":"We will support each developer of Editor.js plugins: the best solutions will be collected to the <a href=\"https://github.com/editor-js/awesome-editorjs\">Awesome List</a> and promoted to the community. Together we can create a big suite of different Blocks, Inline Tools, Block Tunes that can hit a wide specter of tasks."}},{"type":"delimiter","data":{}},{"type":"paragraph","data":{"text":"Thanks for your interest. Hope you enjoy Editor.js."}}],"version":"2.19.0"},"parent":"0"}
{"_id":"udmrAMUvcgyVqv5B","title":"Using API","uri":"inline-tools-api","body":{"time":1551286767580,"blocks":[{"type":"header","data":{"text":"Using API","level":2}},{"type":"paragraph","data":{"text":"Now it's time to use the Editor`s API features. We can access the API using the api object passed to the Tool constructor. For Marker Tool we need&nbsp;<code class=\"inline-code\">styles</code>&nbsp;and&nbsp;<code class=\"inline-code\">selection</code>&nbsp;APIs."}},{"type":"paragraph","data":{"text":"<code class=\"inline-code\">Styles</code>&nbsp;API provides some CSS classes` names to stylize elements of our Tool with common Editor.js style:"}},{"type":"code","data":{"code":"class MarkerTool {\n\n    constructor({api}) {\n        this.api = api;\n        this.button = null;\n    }\n\n    render() {\n        this.button = document.createElement('button');\n        this.button.type = 'button';\n        this.button.textContent = 'M';\n        this.button.classList.add(this.api.styles.inlineToolButton);\n\n        return this.button;\n    }\n\n}"}},{"type":"paragraph","data":{"text":"<code class=\"inline-code\">Selection</code>&nbsp;API has some useful methods to work with selected text fragments. For the Marker Tool we will use following API methods:&nbsp;<code class=\"inline-code\">findParentTag</code>&nbsp;and&nbsp;<code class=\"inline-code\">expandToTag</code>. First one accepts&nbsp;<code class=\"inline-code\">tag name</code>&nbsp;and&nbsp;<code class=\"inline-code\">class name</code>&nbsp;as arguments and returns first found parent element of&nbsp;<code class=\"inline-code\">anchorNode</code>&nbsp;of the&nbsp;<code class=\"inline-code\">Selection</code>&nbsp;with passed parameters and null if such element doesn't exist. Second one accepts HTML element as argument and expand current selection to that element."}},{"type":"paragraph","data":{"text":"After we replace selected text with <code class=\"inline-code\">mark</code> element we need to expand selection to the inserted element:"}},{"type":"code","data":{"code":"surround(range) {\n    if (this.state) {\n        return;\n    }\n\n    const selectedText = range.extractContents();\n    const mark = document.createElement('MARK');\n\n    mark.appendChild(selectedText);\n    range.insertNode(mark);\n\n    this.api.selection.expandToTag(mark);\n}"}},{"type":"paragraph","data":{"text":"Let's move code of surrounding text to another method called <code class=\"inline-code\">wrap</code> and create <code class=\"inline-code\">unwrap</code> method to remove highlighting. To remove highlight we need to find mark tag from selection position and replace it with plain text:"}},{"type":"code","data":{"code":"surround(range) {\n    if (this.state) {\n        this.unwrap(range);\n        return;\n    }\n\n    this.wrap(range);\n}\n\nwrap(range) {\n    const selectedText = range.extractContents();\n    const mark = document.createElement('MARK');\n\n    mark.appendChild(selectedText);\n    range.insertNode(mark);\n\n    this.api.selection.expandToTag(mark);\n}\n\nunwrap(range) {\n    const mark = this.api.selection.findParentTag('MARK');\n    const text = range.extractContents();\n\n    mark.remove();\n\n    range.insertNode(text);\n}"}},{"type":"paragraph","data":{"text":"Also we can modify <code class=\"inline-code\">checkState</code> method using the API:"}},{"type":"code","data":{"code":" checkState() {\n    const mark = this.api.selection.findParentTag(this.tag);\n\n    this.state = !!mark;\n  }"}},{"type":"paragraph","data":{"text":"Now Tool works actually how it should but we can make it prettier. Let's add icon and change button state in accordance with current state of highlighting:"}},{"type":"code","data":{"code":"class MarkerTool {\n\n    static get isInline() {\n        return true;\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    set state(state) {\n        this._state = state;\n\n        this.button.classList.toggle(this.api.styles.inlineToolButtonActive, state);\n    }\n\n    constructor({api}) {\n        this.api = api;\n        this.button = null;\n        this._state = false;\n    }\n\n    render() {\n        this.button = document.createElement('button');\n        this.button.type = 'button';\n        this.button.innerHTML = '<svg width=\"20\" height=\"18\"><path d=\"M10.458 12.04l2.919 1.686-.781 1.417-.984-.03-.974 1.687H8.674l1.49-2.583-.508-.775.802-1.401zm.546-.952l3.624-6.327a1.597 1.597 0 0 1 2.182-.59 1.632 1.632 0 0 1 .615 2.201l-3.519 6.391-2.902-1.675zm-7.73 3.467h3.465a1.123 1.123 0 1 1 0 2.247H3.273a1.123 1.123 0 1 1 0-2.247z\"/></svg>';\n        this.button.classList.add(this.api.styles.inlineToolButton);\n\n        return this.button;\n    }\n}\n"}},{"type":"paragraph","data":{"text":"Last step is adding some styles for <code class=\"inline-code\">MARK</code> element:"}},{"type":"code","data":{"code":"// marker.css\n.cdx-marker {\n  background: rgba(245,235,111,0.29);\n  padding: 3px 0;\n}\n\n//marker.js\nwrap(range) {\n    const selectedText = range.extractContents();\n    const mark = document.createElement('MARK');\n\n    mark.classList.add('cdx-marker');\n    mark.appendChild(selectedText);\n    range.insertNode(mark);\n\n    this.api.selection.expandToTag(mark);\n}"}},{"type":"paragraph","data":{"text":"Congrats! Marker Tool is ready to use. Here is the full implementation:"}},{"type":"code","data":{"code":"// marker.css\n.cdx-marker {\n    background: rgba(245,235,111,0.29);\n    padding: 3px 0;\n}\n\n// marker.js\nclass MarkerTool {\n\n  static get isInline() {\n    return true;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(state) {\n    this._state = state;\n\n    this.button.classList.toggle(this.api.styles.inlineToolButtonActive, state);\n  }\n\n  constructor({api}) {\n    this.api = api;\n    this.button = null;\n    this._state = false;\n\n    this.tag = 'MARK';\n    this.class = 'cdx-marker';\n  }\n\n  render() {\n    this.button = document.createElement('button');\n    this.button.type = 'button';\n    this.button.innerHTML = '<svg width=\"20\" height=\"18\"><path d=\"M10.458 12.04l2.919 1.686-.781 1.417-.984-.03-.974 1.687H8.674l1.49-2.583-.508-.775.802-1.401zm.546-.952l3.624-6.327a1.597 1.597 0 0 1 2.182-.59 1.632 1.632 0 0 1 .615 2.201l-3.519 6.391-2.902-1.675zm-7.73 3.467h3.465a1.123 1.123 0 1 1 0 2.247H3.273a1.123 1.123 0 1 1 0-2.247z\"/></svg>';\n    this.button.classList.add(this.api.styles.inlineToolButton);\n\n    return this.button;\n  }\n\n  surround(range) {\n    if (this.state) {\n      this.unwrap(range);\n      return;\n    }\n\n    this.wrap(range);\n  }\n\n  wrap(range) {\n    const selectedText = range.extractContents();\n    const mark = document.createElement(this.tag);\n\n    mark.classList.add(this.class);\n    mark.appendChild(selectedText);\n    range.insertNode(mark);\n\n    this.api.selection.expandToTag(mark);\n  }\n\n  unwrap(range) {\n    const mark = this.api.selection.findParentTag(this.tag, this.class);\n    const text = range.extractContents();\n\n    mark.remove();\n\n    range.insertNode(text);\n  }\n\n\n  checkState() {\n    const mark = this.api.selection.findParentTag(this.tag);\n\n    this.state = !!mark;\n  }\n}\n"}},{"type":"paragraph","data":{"text":"It's that simple! In the <a href=\"/inline-tool-user-interaction\">next article</a> you can learn how to add some interactive elements for Inline Tools."}}],"version":"2.8.1"},"parent":"XIfTsWsoUFNLXgEV"}
{"_id":"xB73CBYg1zsMIskP","title":"Sanitizing","uri":"inline-tool-sanitizing","body":{"time":1551287553358,"blocks":[{"type":"header","data":{"text":"Sanitizing","level":2}},{"type":"paragraph","data":{"text":"Editor.js sanitizes all content in several cases: on render, on paste, and on save. Each Block Tool provides sanitizer rules to let Editor know which HTML tags it should respect. However, Block Tools are not connected with Inline ones so markup added by Inline Tool will be removed on pasting or on saving. To avoid that you need to provide sanitizer rules for your Inline Tool in <code class=\"inline-code\">sanitize</code> static getter."}},{"type":"paragraph","data":{"text":"You can read more about sanitizer rules in <a href=\"/sanitizer\">Sanitizer API</a> section. Here is the example for Marker Tool we created earlier:"}},{"type":"code","data":{"code":"class MarkerTool {\n    static get sanitize() {\n        return {\n            mark: {\n                class: 'cdx-marker'\n            }\n        };\n    }\n}"}},{"type":"paragraph","data":{"text":"That means Editor will respect all <code class=\"inline-code\">MARK</code> elements with <code class=\"inline-code\">cdx-marker</code> class and your highlights won't be lost."}}],"version":"2.8.1"},"parent":"XIfTsWsoUFNLXgEV"}
{"_id":"y3ZBKaEhWmeAIG6o","title":"Advanced methods","uri":"inline-tool-advanced-methods","body":{"time":1551289407527,"blocks":[{"type":"header","data":{"text":"Advanced methods","level":2}},{"type":"paragraph","data":{"text":"Apart from all available methods you learnt from previous articles you can use some advanced ones. You can provide two additional methods:&nbsp;<code class=\"inline-code\">shortcut</code> and <code class=\"inline-code\">clear</code>."}},{"type":"header","data":{"text":"Shortcut","level":2}},{"type":"paragraph","data":{"text":"You can provide a keyboard shortcut for your Inline Tool by <code class=\"inline-code\">shortcut</code> getter. It should return string with keys combination. Available special keys you can see <a href=\"https://github.com/codex-team/codex.shortcuts\">here</a>. For Marker Tool we can use <code class=\"inline-code\">CTRL (or CMD)</code> + M combination:"}},{"type":"code","data":{"code":"class MarkerTool {\n    static get shortcut() {\n        return 'CMD+M';\n    }\n}"}},{"type":"header","data":{"text":"Clear","level":2}},{"type":"paragraph","data":{"text":"<code class=\"inline-code\">Clear</code> method is called when Inline Toolbar closes. You can use it to clean some properties or hide actions. Example for Marker Tool:&nbsp;"}},{"type":"code","data":{"code":"class MarkerTool {\n    clear() {\n        this.hideActions();\n    }\n}"}}],"version":"2.8.1"},"parent":"XIfTsWsoUFNLXgEV"}
{"_id":"ztlMSRFcZ52QB4qp","title":"Contributing","uri":"contributing","body":{"time":1554889456659,"blocks":[{"type":"header","data":{"text":"Contributing","level":2}},{"type":"paragraph","data":{"text":"Thanks for contributing to Editor.js! It is an opensource project so we appreciate any contributions, large or small."}},{"type":"header","data":{"text":"Issues","level":2}},{"type":"paragraph","data":{"text":"Feel free to report any bug on the <a href=\"https://github.com/codex-team/editor.js/issues\">issues page</a>. Please add steps to reproduce them and information about your environment such as OS and browser."}},{"type":"header","data":{"text":"Contribute in core development","level":2}},{"type":"paragraph","data":{"text":"Here is a <a href=\"https://editorjs.io/core-development\">development guide</a> that will help you to build Editor.js from sources. Fork the repository and create a new pull request. We will check your code&nbsp;closely and give a feedback."}},{"type":"header","data":{"text":"Share Tools you made","level":2}},{"type":"paragraph","data":{"text":"At this moment you can write us a mail with a link to your code to discuss, review and publish it. We are ready to add new plugins to the Tools collection."}},{"type":"paragraph","data":{"text":"We will try to come up with simpler sharing soon."}},{"type":"header","data":{"text":"Send a feedback","level":2}},{"type":"paragraph","data":{"text":"Sure you are welcome to drop a few lines to our team's email: <a href=\"http://mailto:all@codex.so?Subject=Editor.js\">all@codex.so</a>.&nbsp;"}}],"version":"2.12.3"},"parent":"0"}
